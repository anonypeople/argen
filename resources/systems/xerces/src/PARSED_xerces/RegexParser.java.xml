<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xpath\regex\RegexParser.java">
    <comment type="block">/*
        * Copyright 1999-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xpath</name>.
            <name>regex</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>MissingResourceException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ResourceBundle</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A Regular Expression Parser.
        *
        * @xerces.internal
        *
        * @version $Id: RegexParser.java,v 1.10 2004/10/04 22:07:40 mrglavas Exp $
        */
    </comment>
    <class>class <name>RegexParser</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_CHAR</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_EOF</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_OR</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '|'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_STAR</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '*'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_PLUS</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '+'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_QUESTION</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '?'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_LPAREN</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '('</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_RPAREN</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// ')'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_DOT</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '.'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_LBRACKET</name> =
                    <init>
                        <expr>9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '['</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_BACKSOLIDUS</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '\'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_CARET</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '^'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_DOLLAR</name> =
                    <init>
                        <expr>12</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '$'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_LPAREN2</name> =
                    <init>
                        <expr>13</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?:'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_LOOKAHEAD</name> =
                    <init>
                        <expr>14</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?='</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_NEGATIVELOOKAHEAD</name> =
                    <init>
                        <expr>15</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?!'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_LOOKBEHIND</name> =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?&lt;='</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_NEGATIVELOOKBEHIND</name> =
                    <init>
                        <expr>17</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?&lt;!'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_INDEPENDENT</name> =
                    <init>
                        <expr>18</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?&gt;'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_SET_OPERATIONS</name> =
                    <init>
                        <expr>19</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?['</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_POSIX_CHARCLASS_START</name> =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '[:' in a character class</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_COMMENT</name> =
                    <init>
                        <expr>21</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?#'</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_MODIFIERS</name> =
                    <init>
                        <expr>22</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?' [\-,a-z,A-Z]</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_CONDITION</name> =
                    <init>
                        <expr>23</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '(?('</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>T_XMLSCHEMA_CC_SUBTRACTION</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// '-[' in a character class</comment>

            <class>
                <specifier>static</specifier>
                class <name>ReferencePosition</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refNumber</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>ReferencePosition</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>n</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>refNumber</name>
                                    </name>
                                    =
                                    <name>n</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>position</name>
                                    </name>
                                    =
                                    <name>pos</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>offset</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>regex</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>regexlen</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>options</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>ResourceBundle</name>
                    </type>
                    <name>resources</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>chardata</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>nexttoken</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>S_NORMAL</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>S_INBRACKETS</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>S_INXBRACKETS</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>context</name> =
                    <init>
                        <expr>
                            <name>S_NORMAL</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>parennumber</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>hasBackReferences</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Vector</name>
                    </type>
                    <name>references</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>RegexParser</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setLocale</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Locale</name>.
                                                    <name>getDefault</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <constructor>
                <specifier>public</specifier>
                <name>RegexParser</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setLocale</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>locale</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLocale</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>resources</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>ResourceBundle</name>.
                                            <name>getBundle</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"org.apache.xerces.impl.xpath.regex.message"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>locale</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>MissingResourceException</name>
                                    </type>
                                    <name>mre</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Installation Problem??? Couldn't load messages: "
                                                        +
                                                        <call>
                                                            <name><name>mre</name>.
                                                                <name>getMessage</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>ParseException</name>
                </type>
                <name>ex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>loc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>resources</name>.
                                                    <name>getString</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name><name>this</name>.
                                <name>options</name>
                            </name>
                            &amp; <name>flag</name>) ==
                            <name>flag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>synchronized</specifier>
                    <name>Token</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>regex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>options</name>
                            </name>
                            =
                            <name>options</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>offset</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setContext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>S_NORMAL</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>parennumber</name>
                            </name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hasBackReferences</name>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>regex</name>
                            </name>
                            =
                            <name>regex</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>isSet</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>RegularExpression</name>.
                                                    <name>EXTENDED_COMMENT</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>regex</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>REUtil</name>.
                                            <name>stripExtendedComment</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>regex</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>regexlen</name>
                            </name>
                            =
                            <call>
                                <name><name>this</name>.<name>regex</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>parseRegex</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                !=
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.parse.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>references</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.<name>references</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>ReferencePosition</name>
                                                </type>
                                                <name>position</name> =
                                                <init>
                                                    <expr>(<name>ReferencePosition</name>)
                                                        <call>
                                                            <name><name>this</name>.<name>references</name>.
                                                                <name>elementAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>parennumber</name>
                                                    </name>
                                                    &lt;=
                                                    <name><name>position</name>.
                                                        <name>refNumber</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <throw>throw
                                                    <expr>
                                                        <call>
                                                            <name>ex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"parser.parse.2"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>position</name>.
                                                                            <name>position</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>references</name>.
                                                <name>removeAllElements</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                public RegularExpression createRegex(String regex, int options) throws ParseException {
                Token tok = this.parse(regex, options);
                return new RegularExpression(regex, tok, this.parennumber, this.hasBackReferences, options);
                }
                */
            </comment>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>setContext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>con</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>context</name>
                            </name>
                            =
                            <name>con</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>nexttoken</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                &gt;=
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>chardata</name>
                                        </name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>nexttoken</name>
                                        </name>
                                        =
                                        <name>T_EOF</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ret</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>regex</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    ++
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>chardata</name>
                            </name>
                            =
                            <name>ch</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>context</name>
                                </name>
                                ==
                                <name>S_INBRACKETS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// In a character class, this.chardata has one character, that is
                                    to say,
                                </comment>
                                <comment type="line">// a pair of surrogates is composed and stored to this.chardata.
                                </comment>
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>'\\'</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_BACKSOLIDUS</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &gt;=
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.next.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                    =
                                                    <call>
                                                        <name><name>this</name>.<name>regex</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                    ++
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>

                                        </case>
                                        <case>case <expr>'-'</expr>:
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>isSet</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>RegularExpression</name>.
                                                                            <name>XMLSCHEMA_MODE</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        &amp;&amp;
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &lt;
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                        &amp;&amp;
                                                        <call>
                                                            <name><name>this</name>.<name>regex</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>offset</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == '['
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                ++
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ret</name>
                                                                =
                                                                <name>T_XMLSCHEMA_CC_SUBTRACTION</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            =
                                                            <name>T_CHAR</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </else>
                                            </if>
                                            <break>break;</break>

                                        </case>
                                        <case>case <expr>'['</expr>:
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>isSet</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>RegularExpression</name>.
                                                                            <name>XMLSCHEMA_MODE</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        &amp;&amp;
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &lt;
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                        &amp;&amp;
                                                        <call>
                                                            <name><name>this</name>.<name>regex</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>offset</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == ':'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                ++
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ret</name>
                                                                =
                                                                <name>T_POSIX_CHARCLASS_START</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// Through down</comment>
                                        </case>
                                        <default>default:
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>REUtil</name>.
                                                                <name>isHighSurrogate</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        &amp;&amp;
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &lt;
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>low</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>this</name>.<name>regex</name>.
                                                                                <name>charAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name><name>this</name>.
                                                                                            <name>offset</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>REUtil</name>.
                                                                            <name>isLowSurrogate</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>low</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>chardata</name>
                                                                            </name>
                                                                            =
                                                                            <call>
                                                                                <name><name>REUtil</name>.
                                                                                    <name>composeFromSurrogates</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>ch</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>low</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            ++
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_CHAR</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>nexttoken</name>
                                        </name>
                                        =
                                        <name>ret</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>'|'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_OR</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'*'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_STAR</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'+'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_PLUS</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'?'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_QUESTION</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>')'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_RPAREN</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'.'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_DOT</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'['</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_LBRACKET</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'^'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_CARET</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'$'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_DOLLAR</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'('</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_LPAREN</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &gt;=
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <break>break;</break>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>regex</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != '?'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <break>break;</break>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>++
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &gt;=
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.next.2"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>ch</name>
                                        =
                                        <call>
                                            <name><name>this</name>.<name>regex</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        ++
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>':'</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_LPAREN2</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'='</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_LOOKAHEAD</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'!'</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_NEGATIVELOOKAHEAD</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'['</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_SET_OPERATIONS</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'&gt;'</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_INDEPENDENT</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'&lt;'</expr>:
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &gt;=
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.next.2"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -3
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ch</name>
                                                    =
                                                    <call>
                                                        <name><name>this</name>.<name>regex</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                    ++
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch</name>
                                                        == '='
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ret</name>
                                                                =
                                                                <name>T_LOOKBEHIND</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>ch</name>
                                                                == '!'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ret</name>
                                                                        =
                                                                        <name>T_NEGATIVELOOKBEHIND</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name>ex</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.next.3"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -3
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                            <break>break;</break>
                                        </case>
                                        <case>case <expr>'#'</expr>:
                                            <while>while
                                                <condition>(
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        &lt;
                                                        <name><name>this</name>.
                                                            <name>regexlen</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ch</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.<name>regex</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            ++
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>ch</name>
                                                                == ')'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <break>break;</break>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </while>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch</name>
                                                        != ')'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.next.4"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <name>T_COMMENT</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <break>break;</break>
                                        </case>
                                        <default>default:
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch</name>
                                                        == '-' || 'a' &lt;= <name>ch</name> &amp;&amp; <name>ch</name> &lt;=
                                                        'z' || 'A' &lt;= <name>ch</name> &amp;&amp; <name>ch</name> &lt;=
                                                        'Z'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// Options</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                --
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ret</name>
                                                                =
                                                                <name>T_MODIFIERS</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>ch</name>
                                                                == '('
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">// conditional</comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ret</name>
                                                                        =
                                                                        <name>T_CONDITION</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <comment type="line">// this.offsets points the next of
                                                                    '('.
                                                                </comment>
                                                                <break>break;</break>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>ex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"parser.next.2"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                    -2
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                <break>break;</break>

                            </case>
                            <case>case <expr>'\\'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_BACKSOLIDUS</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &gt;=
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.next.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>chardata</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>this</name>.<name>regex</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        ++
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                            </case>
                            <default>default:
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>T_CHAR</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </default>
                            }
                        </block>
                    </switch>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nexttoken</name>
                            </name>
                            =
                            <name>ret</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * regex ::= term (`|` term)*
                * term ::= factor+
                * factor ::= ('^' | '$' | '\A' | '\Z' | '\z' | '\b' | '\B' | '\&lt;' | '\&gt;'
                * | atom (('*' | '+' | '?' | minmax ) '?'? )?)
                * | '(?=' regex ')' | '(?!' regex ')' | '(?&amp;lt;=' regex ')' | '(?&amp;lt;!' regex ')'
                * atom ::= char | '.' | range | '(' regex ')' | '(?:' regex ')' | '\' [0-9]
                * | '\w' | '\W' | '\d' | '\D' | '\s' | '\S' | category-block
                */
            </comment>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>parseRegex</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>parseTerm</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_OR</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// '|'</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>parent</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>parent</name>
                                                =
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>createUnion</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>addChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tok</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>tok</name>
                                                =
                                                <name>parent</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>tok</name>.
                                            <name>addChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseTerm</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * term ::= factor+
                */
            </comment>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>parseTerm</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                == <name>T_OR</name> || <name>ch</name> == <name>T_RPAREN</name> || <name>ch</name> ==
                                <name>T_EOF</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Token</name>
                                        </type>
                                        <name>tok</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>parseFactor</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Token</name>
                                        </type>
                                        <name>concat</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>(<name>ch</name> =
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ) != <name>T_OR</name> &amp;&amp; <name>ch</name> != <name>T_RPAREN</name> &amp;&amp; <name>
                                                ch
                                            </name> !=
                                            <name>T_EOF</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>concat</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>concat</name>
                                                            =
                                                            <call>
                                                                <name><name>Token</name>.
                                                                    <name>createConcat</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>concat</name>.
                                                                    <name>addChild</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>tok</name>
                                                            =
                                                            <name>concat</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>concat</name>.
                                                        <name>addChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>parseFactor</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">//tok = Token.createConcat(tok, this.parseFactor());
                                        </comment>
                                        }
                                    </block>
                                </while>
                                <return>return
                                    <expr>
                                        <name>tok</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// ----------------------------------------------------------------</comment>

            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processCaret</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_linebeginning</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processDollar</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_lineend</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processLookahead</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createLook</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>LOOKAHEAD</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processNegativelookahead</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createLook</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>NEGATIVELOOKAHEAD</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processLookbehind</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createLook</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>LOOKBEHIND</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processNegativelookbehind</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createLook</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>NEGATIVELOOKBEHIND</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_A</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_stringbeginning</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_Z</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_stringend2</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_z</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_stringend</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_b</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_wordedge</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_B</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_not_wordedge</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_lt</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_wordbeginning</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_gt</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_wordend</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processStar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_QUESTION</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createNGClosure</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createClosure</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tok</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processPlus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// X+ -&gt; XX*</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_QUESTION</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createConcat</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createNGClosure</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createConcat</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tok</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createClosure</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>tok</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processQuestion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// X? -&gt; X|</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>par</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createUnion</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_QUESTION</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>par</name>.
                                                <name>addChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createEmpty</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>par</name>.
                                                <name>addChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>par</name>.
                                                <name>addChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>par</name>.
                                                <name>addChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createEmpty</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>par</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>checkQuestion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>off</name>
                            &lt;
                            <name><name>this</name>.
                                <name>regexlen</name>
                            </name>
                            &amp;&amp;
                            <call>
                                <name><name>this</name>.<name>regex</name>.
                                    <name>charAt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            == '?'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processParen</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>parennumber</name>
                                    </name>
                                    ++
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createParen</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>p</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processParen2</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createParen</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processCondition</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// this.offset points the next of '('</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                +1 &gt;=
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.4"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <comment type="line">// Parses a condition.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refno</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>condition</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>regex</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>'1' &lt;= <name>ch</name> &amp;&amp; <name>ch</name> &lt;= '9'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>refno</name>
                                        = <name>ch</name>-'0'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>hasBackReferences</name>
                                        </name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>references</name>
                                            </name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>references</name>
                                                </name>
                                                = new
                                                <call>
                                                    <name>Vector</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>references</name>.
                                                <name>addElement</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>ReferencePosition</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>refno</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>offset</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>offset</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>regex</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != ')'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.factor.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>offset</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                            == '?'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>offset</name>
                                                </name>
                                                --
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <comment type="line">// Points '('.</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>condition</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>parseFactor</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name><name>condition</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case
                                            <expr>
                                                <name><name>Token</name>.
                                                    <name>LOOKAHEAD</name>
                                                </name>
                                            </expr>
                                            :
                                        </case>
                                        <case>case
                                            <expr>
                                                <name><name>Token</name>.
                                                    <name>NEGATIVELOOKAHEAD</name>
                                                </name>
                                            </expr>
                                            :
                                        </case>
                                        <case>case
                                            <expr>
                                                <name><name>Token</name>.
                                                    <name>LOOKBEHIND</name>
                                                </name>
                                            </expr>
                                            :
                                        </case>
                                        <case>case
                                            <expr>
                                                <name><name>Token</name>.
                                                    <name>NEGATIVELOOKBEHIND</name>
                                                </name>
                                            </expr>
                                            :
                                            <break>break;</break>
                                        </case>
                                        <case>case
                                            <expr>
                                                <name><name>Token</name>.
                                                    <name>ANCHOR</name>
                                                </name>
                                            </expr>
                                            :
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        !=
                                                        <name>T_RPAREN</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.factor.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <break>break;</break>
                                        </case>
                                        <default>default:
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>ex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"parser.factor.5"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </else>
                    </if>
                    <comment type="line">// Parses yes/no-patterns.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>yesPattern</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>parseRegex</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>noPattern</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>yesPattern</name>.
                                    <name>type</name>
                                </name>
                                ==
                                <name><name>Token</name>.
                                    <name>UNION</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>yesPattern</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != 2
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.factor.6"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>noPattern</name>
                                        =
                                        <call>
                                            <name><name>yesPattern</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>yesPattern</name>
                                        =
                                        <call>
                                            <name><name>yesPattern</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createCondition</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>refno</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>condition</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>yesPattern</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>noPattern</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processModifiers</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// this.offset points the next of '?'.</comment>
                    <comment type="line">// modifiers ::= [imsw]* ('-' [imsw]*)? ':'</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>add</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>mask</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>ch</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                &lt;
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>ch</name>
                                    =
                                    <call>
                                        <name><name>this</name>.<name>regex</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>v</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>getOptionValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ch</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>v</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <break>break;</break>
                                </then>
                            </if>
                            <comment type="line">// '-' or ':'?</comment>
                            <expr_stmt>
                                <expr>
                                    <name>add</name>
                                    |=
                                    <name>v</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>offset</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                &gt;=
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.2"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                == '-'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>offset</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &lt;
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>
                                                    <name><name>this</name>.<name>regex</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>v</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>REUtil</name>.
                                                                <name>getOptionValue</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>v</name>
                                                    == 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <break>break;</break>
                                            </then>
                                        </if>
                                        <comment type="line">// ':'?</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>mask</name>
                                                |=
                                                <name>v</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>offset</name>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &gt;=
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.factor.2"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                == ':'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>offset</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createModifierGroup</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>parseRegex</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>add</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>mask</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>T_RPAREN</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.factor.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        == ')'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// such as (?-i)</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>offset</name>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>tok</name>
                                                =
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>createModifierGroup</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>parseRegex</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>add</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>mask</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <throw>throw
                                        <expr>
                                            <call>
                                                <name>ex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"parser.factor.3"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                </else>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processIndependent</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createLook</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>INDEPENDENT</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_c</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch2</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Must be in 0x0040-0x005f</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>offset</name>
                                </name>
                                &gt;=
                                <name><name>this</name>.
                                    <name>regexlen</name>
                                </name>
                                || ((<name>ch2</name> =
                                <call>
                                    <name><name>this</name>.<name>regex</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>offset</name>
                                                </name>
                                                ++
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ) &amp; 0xffe0) != 0x0040
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.atom.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createChar</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr><name>ch2</name>-0x40
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_C</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_i</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createChar</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'i'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_I</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_g</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>getGraphemePattern</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_X</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>getCombiningCharacterSequence</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBackreference</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refnum</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chardata</name>
                                    </name>
                                    -'0'
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createBackReference</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>refnum</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hasBackReferences</name>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>references</name>
                                </name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>references</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.<name>references</name>.
                                    <name>addElement</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>ReferencePosition</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refnum</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                            -2
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ----------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * factor ::= ('^' | '$' | '\A' | '\Z' | '\z' | '\b' | '\B' | '\&lt;' | '\&gt;'
                * | atom (('*' | '+' | '?' | minmax ) '?'? )?)
                * | '(?=' regex ')' | '(?!' regex ')' | '(?&amp;lt;=' regex ')' | '(?&amp;lt;!' regex ')'
                * | '(?#' [^)]* ')'
                * minmax ::= '{' min (',' max?)? '}'
                * min ::= [0-9]+
                * max ::= [0-9]+
                */
            </comment>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>parseFactor</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>T_CARET</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processCaret</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_DOLLAR</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processDollar</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_LOOKAHEAD</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processLookahead</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_NEGATIVELOOKAHEAD</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processNegativelookahead</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_LOOKBEHIND</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processLookbehind</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_NEGATIVELOOKBEHIND</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processNegativelookbehind</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>T_COMMENT</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>T_BACKSOLIDUS</name>
                                </expr>
                                :
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>'A'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_A</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'Z'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_Z</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'z'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_z</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'b'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_b</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'B'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_B</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'&lt;'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_lt</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'&gt;'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_gt</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        }
                                    </block>
                                </switch>
                                <comment type="line">// through down</comment>
                            </case>
                            }
                        </block>
                    </switch>
                    <expr_stmt>
                        <expr>
                            <name>tok</name>
                            =
                            <call>
                                <name><name>this</name>.
                                    <name>parseAtom</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>ch</name>
                            =
                            <call>
                                <name><name>this</name>.
                                    <name>read</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>T_STAR</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processStar</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_PLUS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processPlus</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_QUESTION</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processQuestion</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_CHAR</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                            == '{' &amp;&amp;
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            &lt;
                                            <name><name>this</name>.
                                                <name>regexlen</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>off</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">// this.offset -&gt; next of '{'</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>min</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                    , <name>max</name> =
                                                    <init>
                                                        <expr>-1</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>(<name>ch</name> =
                                                        <call>
                                                            <name><name>this</name>.<name>regex</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>off</name>++
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ) &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{

                                                        <expr_stmt>
                                                            <expr>
                                                                <name>min</name>
                                                                = <name>ch</name> -'0'
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <while>while
                                                            <condition>(
                                                                <expr>
                                                                    <name>off</name>
                                                                    &lt;
                                                                    <name><name>this</name>.
                                                                        <name>regexlen</name>
                                                                    </name>
                                                                    &amp;&amp; (<name>ch</name> =
                                                                    <call>
                                                                        <name><name>this</name>.<name>regex</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>off</name>++
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    ) &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>min</name>
                                                                        = <name>min</name>*10 +<name>ch</name>-'0'
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>min</name>
                                                                            &lt; 0
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <throw>throw
                                                                            <expr>
                                                                                <call>
                                                                                    <name>ex</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                "parser.quantifier.5"
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>this</name>.
                                                                                                    <name>offset</name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </while>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <throw>throw
                                                            <expr>
                                                                <call>
                                                                    <name>ex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"parser.quantifier.1"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </else>
                                            </if>

                                            <expr_stmt>
                                                <expr>
                                                    <name>max</name>
                                                    =
                                                    <name>min</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch</name>
                                                        == ','
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{

                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>off</name>
                                                                    &gt;=
                                                                    <name><name>this</name>.
                                                                        <name>regexlen</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <throw>throw
                                                                        <expr>
                                                                            <call>
                                                                                <name>ex</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"parser.quantifier.3"
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>this</name>.
                                                                                                <name>offset</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </throw>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>(<name>ch</name> =
                                                                            <call>
                                                                                <name><name>this</name>.<name>
                                                                                    regex</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>off</name>++
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            ) &gt;= '0' &amp;&amp; <name>ch</name> &lt;=
                                                                            '9'
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{

                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>max</name>
                                                                                    = <name>ch</name> -'0'
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <comment type="line">// {min,max}</comment>
                                                                            <while>while
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>off</name>
                                                                                        &lt;
                                                                                        <name><name>this</name>.
                                                                                            <name>regexlen</name>
                                                                                        </name>
                                                                                        &amp;&amp; (<name>ch</name> =
                                                                                        <call>
                                                                                            <name><name>this</name>
                                                                                                .<name>regex</name>.
                                                                                                <name>charAt</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr><name>
                                                                                                        off</name>++
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        ) &gt;= '0'
                                                                                        &amp;&amp; <name>ch</name> &lt;=
                                                                                        '9'
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <block>{
                                                                                    <expr_stmt>
                                                                                        <expr>
                                                                                            <name>max</name>
                                                                                            = <name>max</name>*10
                                                                                            +<name>ch</name>-'0'
                                                                                        </expr>
                                                                                        ;
                                                                                    </expr_stmt>
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>max</name>
                                                                                                &lt; 0
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <throw>throw
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name>ex</name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    "parser.quantifier.5"
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            this</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            offset
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </throw>
                                                                                        </then>
                                                                                    </if>
                                                                                    }
                                                                                </block>
                                                                            </while>

                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>min</name>
                                                                                        &gt;
                                                                                        <name>max</name>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <throw>throw
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name>ex</name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            "parser.quantifier.4"
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    ,
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                this</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    offset
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ;
                                                                                    </throw>
                                                                                </then>
                                                                            </if>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <block>{
                                                                            <comment type="line">// assume {min,}
                                                                            </comment>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>max</name>
                                                                                    = -1
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch</name>
                                                        != '}'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.quantifier.2"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>checkQuestion</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>off</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// off -&gt; next of '}'</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>tok</name>
                                                                =
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>createNGClosure</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>tok</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                = <name>off</name>+1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>tok</name>
                                                                =
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>createClosure</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>tok</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                =
                                                                <name>off</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>

                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>tok</name>.
                                                            <name>setMin</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>min</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>tok</name>.
                                                            <name>setMax</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>max</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">//System.err.println("CLOSURE: "+min+", "+max);
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                            </case>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * atom ::= char | '.' | char-class | '(' regex ')' | '(?:' regex ')' | '\' [0-9]
                * | '\w' | '\W' | '\d' | '\D' | '\s' | '\S' | category-block
                * | '(?&gt;' regex ')'
                * char ::= '\\' | '\' [efnrt] | bmp-code | character-1
                */
            </comment>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>parseAtom</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>T_LPAREN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processParen</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_LPAREN2</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processParen2</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// '(?:'</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_CONDITION</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processCondition</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// '(?('</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_MODIFIERS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processModifiers</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// (?modifiers ... )</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_INDEPENDENT</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>processIndependent</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_DOT</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// Skips '.'</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <name><name>Token</name>.
                                            <name>token_dot</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                                <comment type="javadoc">/**
                                    * char-class ::= '[' ( '^'? range ','?)+ ']'
                                    * range ::= '\d' | '\w' | '\s' | category-block | range-char
                                    * | range-char '-' range-char
                                    * range-char ::= '\[' | '\]' | '\\' | '\' [,-efnrtv] | bmp-code | character-2
                                    * bmp-char ::= '\' 'u' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
                                    */
                                </comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_LBRACKET</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>parseCharacterClass</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>T_SET_OPERATIONS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>parseSetOperations</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>T_BACKSOLIDUS</name>
                                </expr>
                                :
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>'d'</expr>:
                                        </case>
                                        <case>case <expr>'D'</expr>:
                                        </case>
                                        <case>case <expr>'w'</expr>:
                                        </case>
                                        <case>case <expr>'W'</expr>:
                                        </case>
                                        <case>case <expr>'s'</expr>:
                                        </case>
                                        <case>case <expr>'S'</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getTokenForShorthand</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>chardata</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>tok</name>
                                                </expr>
                                                ;
                                            </return>

                                        </case>
                                        <case>case <expr>'e'</expr>:
                                        </case>
                                        <case>case <expr>'f'</expr>:
                                        </case>
                                        <case>case <expr>'n'</expr>:
                                        </case>
                                        <case>case <expr>'r'</expr>:
                                        </case>
                                        <case>case <expr>'t'</expr>:
                                        </case>
                                        <case>case <expr>'u'</expr>:
                                        </case>
                                        <case>case <expr>'v'</expr>:
                                        </case>
                                        <case>case <expr>'x'</expr>:
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>ch2</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>decodeEscaped</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>ch2</name>
                                                            &lt; 0x10000
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>tok</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>Token</name>.
                                                                            <name>createChar</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>ch2</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>tok</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>Token</name>.
                                                                            <name>createString</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>REUtil</name>.
                                                                                            <name>
                                                                                                decomposeToSurrogates
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>ch2</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                            <break>break;</break>

                                        </case>
                                        <case>case <expr>'c'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_c</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'C'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_C</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'i'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_i</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'I'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_I</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'g'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_g</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'X'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBacksolidus_X</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>'1'</expr>:
                                        </case>
                                        <case>case <expr>'2'</expr>:
                                        </case>
                                        <case>case <expr>'3'</expr>:
                                        </case>
                                        <case>case <expr>'4'</expr>:
                                        </case>
                                        <case>case <expr>'5'</expr>:
                                        </case>
                                        <case>case <expr>'6'</expr>:
                                        </case>
                                        <case>case <expr>'7'</expr>:
                                        </case>
                                        <case>case <expr>'8'</expr>:
                                        </case>
                                        <case>case <expr>'9'</expr>:
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>processBackreference</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>

                                        </case>
                                        <case>case <expr>'P'</expr>:
                                        </case>
                                        <case>case <expr>'p'</expr>:
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>pstart</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>offset</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name>processBacksolidus_pP</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>chardata</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>tok</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>ex</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.atom.5"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>pstart</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <break>break;</break>

                                        </case>
                                        <default>default:
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createChar</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>chardata</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name>T_CHAR</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                            == ']' ||
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                            == '{' ||
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                            == '}'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>ex</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.atom.4"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createChar</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>chardata</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>high</name> =
                                        <init>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>chardata</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>isHighSurrogate</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>high</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == <name>T_CHAR</name> &amp;&amp;
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>isLowSurrogate</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>sur</name> =
                                                    <init>
                                                        <expr>new
                                                            <name>
                                                                <name>char</name>
                                                                <index>[<expr>2</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>sur</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    = (<name>char</name>)
                                                    <name>high</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>sur</name>
                                                        <index>[<expr>1</expr>]
                                                        </index>
                                                    </name>
                                                    = (<name>char</name>)
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createParen</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Token</name>.
                                                                            <name>createString</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>new
                                                                                    <call>
                                                                                        <name>String</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>sur</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <break>break;</break>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>ex</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"parser.atom.4"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        -1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>processBacksolidus_pP</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != <name>T_CHAR</name> ||
                                <name><name>this</name>.
                                    <name>chardata</name>
                                </name>
                                != '{'
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>ex</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.atom.2"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <comment type="line">// handle category escape</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>positive</name> =
                            <init>
                                <expr>
                                    <name>c</name>
                                    == 'p'
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>namestart</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>offset</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nameend</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>regex</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'}'</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>namestart</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>nameend</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>ex</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.atom.3"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>pname</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>regex</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>namestart</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>nameend</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>offset</name>
                            </name>
                            = <name>nameend</name>+1
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>getRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pname</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>positive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>isSet</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>XMLSCHEMA_MODE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>int</name>
                </type>
                <name>processCIinCharacterClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>decodeEscaped</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * char-class ::= '[' ( '^'? range ','?)+ ']'
                * range ::= '\d' | '\w' | '\s' | category-block | range-char
                * | range-char '-' range-char
                * range-char ::= '\[' | '\]' | '\\' | '\' [,-efnrtv] | bmp-code | character-2
                * bmp-code ::= '\' 'u' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>parseCharacterClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useNrange</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setContext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>S_INBRACKETS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// '['</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>nrange</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>base</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == <name>T_CHAR</name> &amp;&amp;
                                <name><name>this</name>.
                                    <name>chardata</name>
                                </name>
                                == '^'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>nrange</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// '^'</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>useNrange</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createNRange</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>base</name>
                                                    =
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createRange</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>base</name>.
                                                            <name>addRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Token</name>.
                                                                        <name>UTF16_MAX</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>createRange</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>firstloop</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>type</name> =
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>T_EOF</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        == <name>T_CHAR</name> &amp;&amp;
                                        <name><name>this</name>.
                                            <name>chardata</name>
                                        </name>
                                        == ']' &amp;&amp; !
                                        <name>firstloop</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <break>break;</break>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>firstloop</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>false</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name>T_BACKSOLIDUS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case <expr>'d'</expr>:
                                                </case>
                                                <case>case <expr>'D'</expr>:
                                                </case>
                                                <case>case <expr>'w'</expr>:
                                                </case>
                                                <case>case <expr>'W'</expr>:
                                                </case>
                                                <case>case <expr>'s'</expr>:
                                                </case>
                                                <case>case <expr>'S'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>mergeRanges</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getTokenForShorthand</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>c</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>end</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>

                                                </case>
                                                <case>case <expr>'i'</expr>:
                                                </case>
                                                <case>case <expr>'I'</expr>:
                                                </case>
                                                <case>case <expr>'c'</expr>:
                                                </case>
                                                <case>case <expr>'C'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>processCIinCharacterClass</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                &lt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>end</name>
                                                                    = true
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>
                                                    <break>break;</break>

                                                </case>
                                                <case>case <expr>'p'</expr>:
                                                </case>
                                                <case>case <expr>'P'</expr>:
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>pstart</name> =
                                                            <init>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>RangeToken</name>
                                                            </type>
                                                            <name>tok2</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>processBacksolidus_pP</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>tok2</name>
                                                                ==
                                                                <name>null</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.atom.5"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>pstart</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>mergeRanges</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>end</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>

                                                </case>
                                                <default>default:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>decodeEscaped</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </default>
                                                }
                                            </block>
                                        </switch>
                                        <comment type="line">// \ + c</comment>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// backsolidus</comment>
                                <comment type="line">// POSIX Character class such as [:alnum:]</comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name>T_POSIX_CHARCLASS_START</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>nameend</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.<name>regex</name>.
                                                                        <name>indexOf</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>':'</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>nameend</name>
                                                            &lt; 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <throw>throw
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>ex</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"parser.cc.1"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                    </then>
                                                </if>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>boolean</name>
                                                        </type>
                                                        <name>positive</name> =
                                                        <init>
                                                            <expr>true</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.<name>regex</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            == '^'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                    ++
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>positive</name>
                                                                    = false
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>String</name>
                                                        </type>
                                                        <name>name</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.<name>regex</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>nameend</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>RangeToken</name>
                                                        </type>
                                                        <name>range</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>getRange</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>name</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>positive</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>this</name>.
                                                                                        <name>isSet</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    RegularExpression</name>
                                                                                                    .
                                                                                                    <name>
                                                                                                        XMLSCHEMA_MODE
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>range</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <throw>throw
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>ex</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"parser.cc.3"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tok</name>.
                                                                <name>mergeRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>range</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>end</name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr><name>nameend</name>+1 &gt;=
                                                            <name><name>this</name>.
                                                                <name>regexlen</name>
                                                            </name>
                                                            ||
                                                            <call>
                                                                <name><name>this</name>.<name>regex</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr><name>nameend</name>+1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            != ']'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <throw>throw
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>ex</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"parser.cc.1"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>nameend</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        = <name>nameend</name>+2
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if not shorthands...</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>read</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    != <name>T_CHAR</name> ||
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                    != '-'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// Here is no '-'.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>addRange</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">// Skips '-'</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>type</name> =
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>read</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                ) ==
                                                                <name>T_EOF</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.cc.2"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>type</name>
                                                                == <name>T_CHAR</name> &amp;&amp;
                                                                <name><name>this</name>.
                                                                    <name>chardata</name>
                                                                </name>
                                                                == ']'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>addRange</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>c</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>c</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>addRange</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>'-'</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>'-'</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>rangeend</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>chardata</name>
                                                                                </name>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>type</name>
                                                                            ==
                                                                            <name>T_BACKSOLIDUS</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>rangeend</name>
                                                                                =
                                                                                <call>
                                                                                    <name><name>this</name>.
                                                                                        <name>decodeEscaped</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>this</name>.
                                                                                <name>next</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>addRange</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>c</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>rangeend</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>SPECIAL_COMMA</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>this</name>.
                                                <name>read</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == <name>T_CHAR</name> &amp;&amp;
                                        <name><name>this</name>.
                                            <name>chardata</name>
                                        </name>
                                        == ','
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_EOF</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>ex</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.cc.2"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!<name>useNrange</name> &amp;&amp;
                                <name>nrange</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>base</name>.
                                                <name>subtractRanges</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <name>base</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>sortRanges</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>compactRanges</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//tok.dumpRanges();</comment>
                    <comment type="block">/*
                        if (this.isSet(RegularExpression.IGNORE_CASE))
                        tok = RangeToken.createCaseInsensitiveToken(tok);
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setContext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>S_NORMAL</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ']'</comment>

                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * '(?[' ... ']' (('-' | '+' | '&amp;') '[' ... ']')? ')'
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>parseSetOperations</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>parseCharacterClass</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>type</name> =
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        == <name>T_CHAR</name> &amp;&amp; (<name>ch</name> == '-' || <name>ch</name> ==
                                        '&amp;')
                                        || <name>type</name> ==
                                        <name>T_PLUS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>read</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name>T_LBRACKET</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <throw>throw
                                                    <expr>
                                                        <call>
                                                            <name>ex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"parser.ope.1"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>offset</name>
                                                                        </name>
                                                                        -1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>RangeToken</name>
                                                </type>
                                                <name>t2</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>parseCharacterClass</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>type</name>
                                                    ==
                                                    <name>T_PLUS</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tok</name>.
                                                                <name>mergeRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>t2</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>ch</name>
                                                            == '-'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>tok</name>.
                                                                        <name>subtractRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>t2</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>ch</name>
                                                                    == '&amp;'
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>intersectRanges</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>t2</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                            <else>else
                                                                <throw>throw
                                                                    <expr>new
                                                                        <call>
                                                                            <name>RuntimeException</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"ASSERT"</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </throw>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.ope.2"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>getTokenForShorthand</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>'d'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Nd"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_0to9</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'D'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Nd"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_not_0to9</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'w'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"IsWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_wordchars</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'W'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"IsWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_not_wordchars</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'s'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"IsSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_spaces</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'S'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>this</name>.
                                                <name>isSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RegularExpression</name>.
                                                            <name>USE_UNICODE_CATEGORY</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ?
                                        <call>
                                            <name><name>Token</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"IsSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        :
                                        <name><name>Token</name>.
                                            <name>token_not_spaces</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Internal Error: shorthands: \\u"+
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>16</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                */
            </comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>decodeEscaped</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_BACKSOLIDUS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.next.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chardata</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>c</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>'e'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = 0x1b
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// ESCAPE U+001B</comment>
                            </case>
                            <case>case <expr>'f'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\f'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// FORM FEED U+000C</comment>
                            </case>
                            <case>case <expr>'n'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\n'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// LINE FEED U+000A</comment>
                            </case>
                            <case>case <expr>'r'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\r'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// CRRIAGE RETURN U+000D</comment>
                            </case>
                            <case>case <expr>'t'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\t'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// HORIZONTAL TABULATION U+0009</comment>
                                <comment type="line">//case 'v': c = 0x0b; break; // VERTICAL TABULATION U+000B
                                </comment>
                            </case>
                            <case>case <expr>'x'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>T_CHAR</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                            == '{'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>v1</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>uv</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <do>do
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>read</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                !=
                                                                <name>T_CHAR</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name>ex</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.descape.1"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>v1</name> =
                                                                <call>
                                                                    <name>hexChar</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>chardata</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ) &lt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <break>break;</break>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>uv</name>
                                                                &gt; <name>uv</name>*16
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name>ex</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.descape.2"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>uv</name>
                                                            = <name>uv</name>*16+
                                                            <name>v1</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                while
                                                <condition>(<expr>true</expr>)
                                                </condition>
                                                ;
                                            </do>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>chardata</name>
                                                        </name>
                                                        != '}'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.descape.3"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>uv</name>
                                                        &gt;
                                                        <name><name>Token</name>.
                                                            <name>UTF16_MAX</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.descape.4"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>c</name>
                                                    =
                                                    <name>uv</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>v1</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        != <name>T_CHAR</name> || (<name>v1</name> =
                                                        <call>
                                                            <name>hexChar</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>chardata</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ) &lt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.descape.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>uv</name> =
                                                    <init>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        != <name>T_CHAR</name> || (<name>v1</name> =
                                                        <call>
                                                            <name>hexChar</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>chardata</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ) &lt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name>ex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.descape.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>uv</name>
                                                    = <name>uv</name>*16+
                                                    <name>v1</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>c</name>
                                                    =
                                                    <name>uv</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <break>break;</break>

                            </case>
                            <case>case <expr>'u'</expr>:
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>v1</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>uv</name> =
                                        <init>
                                            <expr>
                                                <name>v1</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        =
                                        <name>uv</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                            </case>
                            <case>case <expr>'v'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        =
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>T_CHAR</name> || (<name>v1</name> =
                                            <call>
                                                <name>hexChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ) &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descape.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>uv</name>
                                        = <name>uv</name>*16+
                                        <name>v1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>uv</name>
                                            &gt;
                                            <name><name>Token</name>.
                                                <name>UTF16_MAX</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <throw>throw
                                            <expr>
                                                <call>
                                                    <name>ex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"parser.descappe.4"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                -1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        =
                                        <name>uv</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case <expr>'A'</expr>:
                            </case>
                            <case>case <expr>'Z'</expr>:
                            </case>
                            <case>case <expr>'z'</expr>:
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>ex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"parser.descape.5"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        -2
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </case>
                            <default>default:
                            </default>}
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>c</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>hexChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt; '0'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>-1</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &gt; 'f'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>-1</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt;= '9'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr><name>ch</name>-'0'
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt; 'A'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>-1</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt;= 'F'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr><name>ch</name>-'A'+10
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt; 'a'
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>-1</expr>;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr><name>ch</name>-'a'+10
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
