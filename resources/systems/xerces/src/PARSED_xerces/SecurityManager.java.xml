<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\util\SecurityManager.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This class is a container for parser settings that relate to
        * security, or more specifically, it is intended to be used to prevent denial-of-service
        * attacks from being launched against a system running Xerces.
        * Any component that is aware of a denial-of-service attack that can arise
        * from its processing of a certain kind of document may query its Component Manager
        * for the property (http://apache.org/xml/properties/security-manager)
        * whose value will be an instance of this class.
        * If no value has been set for the property, the component should proceed in the "usual" (spec-compliant)
        * manner. If a value has been set, then it must be the case that the component in
        * question needs to know what method of this class to query. This class
        * will provide defaults for all known security issues, but will also provide
        * setters so that those values can be tailored by applications that care.
        *
        * @author Neil Graham, IBM
        *
        * @version $Id: SecurityManager.java,v 1.5 2004/03/23 01:23:41 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>SecurityManager</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default value for entity expansion limit. **/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>DEFAULT_ENTITY_EXPANSION_LIMIT</name> =
                    <init>
                        <expr>100000</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Default value of number of nodes created. **/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>DEFAULT_MAX_OCCUR_NODE_LIMIT</name> =
                    <init>
                        <expr>3000</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Entity expansion limit. **/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>entityExpansionLimit</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** W3C XML Schema maxOccurs limit. **/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>maxOccurLimit</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default constructor. Establishes default values
                * for known security vulnerabilities.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SecurityManager</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>entityExpansionLimit</name>
                            =
                            <name>DEFAULT_ENTITY_EXPANSION_LIMIT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>maxOccurLimit</name>
                            =
                            <name>DEFAULT_MAX_OCCUR_NODE_LIMIT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the number of entity expansions that the
                * parser should permit in a document.&lt;/p&gt;
                *
                * @param limit the number of entity expansions
                * permitted in a document
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEntityExpansionLimit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>entityExpansionLimit</name>
                            =
                            <name>limit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the number of entity expansions
                * that the parser permits in a document.&lt;/p&gt;
                *
                * @return the number of entity expansions
                * permitted in a document
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getEntityExpansionLimit</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>entityExpansionLimit</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the limit of the number of content model nodes
                * that may be created when building a grammar for a W3C
                * XML Schema that contains maxOccurs attributes with values
                * other than "unbounded".&lt;/p&gt;
                *
                * @param limit the maximum value for maxOccurs other
                * than "unbounded"
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMaxOccurNodeLimit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>maxOccurLimit</name>
                            =
                            <name>limit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the limit of the number of content model nodes
                * that may be created when building a grammar for a W3C
                * XML Schema that contains maxOccurs attributes with values
                * other than "unbounded".&lt;/p&gt;
                *
                * @return the maximum value for maxOccurs other
                * than "unbounded"
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMaxOccurNodeLimit</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>maxOccurLimit</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class SecurityManager</comment>

</unit>
