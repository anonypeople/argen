<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\Serializer.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>ContentHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>DocumentHandler</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Interface for a DOM serializer implementation, factory for DOM and SAX
        * serializers, and static methods for serializing DOM documents.
        * &lt;p&gt;
        * To serialize a document using SAX events, create a compatible serializer
        * and pass it around as a {@link
        * org.xml.sax.DocumentHandler}. If an I/O error occurs while serializing, it will
        * be thrown by {@link DocumentHandler#endDocument}. The SAX serializer
        * may also be used as {@link org.xml.sax.DTDHandler}, {@link org.xml.sax.ext.DeclHandler} and
        * {@link org.xml.sax.ext.LexicalHandler}.
        * &lt;p&gt;
        * To serialize a DOM document or DOM element, create a compatible
        * serializer and call it's {@link
        * DOMSerializer#serialize(Document)} or {@link DOMSerializer#serialize(Element)} methods.
        * Both methods would produce a full XML document, to serizlie only
        * the portion of the document use {@link OutputFormat#setOmitXMLDeclaration}
        * and specify no document type.
        * &lt;p&gt;
        * The {@link OutputFormat} dictates what underlying serialized is used
        * to serialize the document based on the specified method. If the output
        * format or method are missing, the default is an XML serializer with
        * UTF-8 encoding and now indentation.
        *
        *
        * @version $Revision: 1.14 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        * @author &lt;a href="mailto:Scott_Boag/CAM/Lotus@lotus.com"&gt;Scott Boag&lt;/a&gt;
        * @see DocumentHandler
        * @see ContentHandler
        * @see OutputFormat
        * @see DOMSerializer
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>Serializer</name>
        <block>{


            <comment type="javadoc">/**
                * Specifies an output stream to which the document should be
                * serialized. This method should not be called while the
                * serializer is in the process of serializing a document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputByteStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Specifies a writer to which the document should be serialized.
                * This method should not be called while the serializer is in
                * the process of serializing a document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputCharStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Specifies an output format for this serializer. It the
                * serializer has already been associated with an output format,
                * it will switch to the new format. This method should not be
                * called while the serializer is in the process of serializing
                * a document.
                *
                * @param format The output format to use
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Return a {@link DocumentHandler} interface into this serializer.
                * If the serializer does not support the {@link DocumentHandler}
                * interface, it should return null.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>DocumentHandler</name>
                </type>
                <name>asDocumentHandler</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Return a {@link ContentHandler} interface into this serializer.
                * If the serializer does not support the {@link ContentHandler}
                * interface, it should return null.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ContentHandler</name>
                </type>
                <name>asContentHandler</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Return a {@link DOMSerializer} interface into this serializer.
                * If the serializer does not support the {@link DOMSerializer}
                * interface, it should return null.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>DOMSerializer</name>
                </type>
                <name>asDOMSerializer</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            }
        </block>
    </class>


</unit>
