<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\util\ShadowedSymbolTable.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>util</name>
        </name>
        ;
    </package>


    <comment type="javadoc">/**
        * Shadowed symbol table.
        *
        * The table has a reference to the main symbol table and is
        * not allowed to add new symbols to the main symbol table.
        * New symbols are added to the shadow symbol table and are local
        * to the component using this table.
        *
        * @author Andy Clark IBM
        * @version $Id: ShadowedSymbolTable.java,v 1.3 2004/02/24 23:15:53 mrglavas Exp $
        */
    </comment>

    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class
        <name>ShadowedSymbolTable</name>
        <super>
            <extends>extends
                <name>SymbolTable</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Main symbol table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>SymbolTable</name>
                    </type>
                    <name>fSymbolTable</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Constructs a shadow of the specified symbol table. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ShadowedSymbolTable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSymbolTable</name>
                            =
                            <name>symbolTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(SymbolTable)</comment>

            <comment type="line">//</comment>
            <comment type="line">// SymbolTable methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Adds the specified symbol to the symbol table and returns a
                * reference to the unique symbol. If the symbol already exists,
                * the previous symbol reference is returned instead, in order
                * guarantee that symbol references remain unique.
                *
                * @param symbol The new symbol.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>addSymbol</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>symbol</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fSymbolTable</name>.
                                        <name>containsSymbol</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>symbol</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>fSymbolTable</name>.
                                                <name>addSymbol</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>symbol</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>addSymbol</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbol</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// addSymbol(String)</comment>

            <comment type="javadoc">/**
                * Adds the specified symbol to the symbol table and returns a
                * reference to the unique symbol. If the symbol already exists,
                * the previous symbol reference is returned instead, in order
                * guarantee that symbol references remain unique.
                *
                * @param buffer The buffer containing the new symbol.
                * @param offset The offset into the buffer of the new symbol.
                * @param length The length of the new symbol in the buffer.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>addSymbol</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fSymbolTable</name>.
                                        <name>containsSymbol</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>buffer</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>offset</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>length</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>fSymbolTable</name>.
                                                <name>addSymbol</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>buffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>addSymbol</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>length</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// addSymbol(char[],int,int):String</comment>

            <comment type="javadoc">/**
                * Returns a hashcode value for the specified symbol. The value
                * returned by this method must be identical to the value returned
                * by the &lt;code&gt;hash(char[],int,int)&lt;/code&gt; method when called
                * with the character array that comprises the symbol string.
                *
                * @param symbol The symbol to hash.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>symbol</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fSymbolTable</name>.
                                    <name>hash</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbol</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// hash(String):int</comment>

            <comment type="javadoc">/**
                * Returns a hashcode value for the specified symbol information.
                * The value returned by this method must be identical to the value
                * returned by the &lt;code&gt;hash(String)&lt;/code&gt; method when called
                * with the string object created from the symbol information.
                *
                * @param buffer The character buffer containing the symbol.
                * @param offset The offset into the character buffer of the start
                * of the symbol.
                * @param length The length of the symbol.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fSymbolTable</name>.
                                    <name>hash</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>length</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// hash(char[],int,int):int</comment>

            }
        </block>
    </class>
    <comment type="line">// class ShadowedSymbolTable</comment>
</unit>
