<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dtd\models\SimpleContentModel.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>models</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>QName</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>XMLContentSpec</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * SimpleContentModel is a derivative of the abstract content model base
        * class that handles a small set of simple content models that are just
        * way overkill to give the DFA treatment.
        * &lt;p&gt;
        * This class handles the following scenarios:
        * &lt;ul&gt;
        * &lt;li&gt; a
        * &lt;li&gt; a?
        * &lt;li&gt; a*
        * &lt;li&gt; a+
        * &lt;li&gt; a,b
        * &lt;li&gt; a|b
        * &lt;/ul&gt;
        * &lt;p&gt;
        * These all involve a unary operation with one element type, or a binary
        * operation with two elements. These are very simple and can be checked
        * in a simple way without a DFA and without the overhead of setting up a
        * DFA for such a simple check.
        *
        * @xerces.internal
        *
        * @version $Id: SimpleContentModel.java,v 1.7 2004/10/04 22:00:42 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>SimpleContentModel</name>
        <super>
            <implements>implements
                <name>ContentModelValidator</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** CHOICE */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CHOICE</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** SEQUENCE */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>SEQUENCE</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>


            <comment type="javadoc">/**
                * The element decl pool indices of the first (and optional second)
                * child node. The operation code tells us whether the second child
                * is used or not.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>QName</name>
                    </type>
                    <name>fFirstChild</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>QName</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The element decl pool indices of the first (and optional second)
                * child node. The operation code tells us whether the second child
                * is used or not.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>QName</name>
                    </type>
                    <name>fSecondChild</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>QName</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The operation that this object represents. Since this class only
                * does simple contents, there is only ever a single operation
                * involved (i.e. the children of the operation are always one or
                * two leafs.) This is one of the XMLDTDParams.CONTENTSPECNODE_XXX values.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fOperator</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* this is the EquivClassComparator object */</comment>
            <comment type="line">//private EquivClassComparator comparator = null;</comment>


            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Constructs a simple content model.
                *
                * @param operator The content model operator.
                * @param firstChild qualified name of the first child
                * @param secondChild qualified name of the second child
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SimpleContentModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>operator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>firstChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>secondChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">//</comment>
                    <comment type="line">// Store away the children and operation. This is all we need to</comment>
                    <comment type="line">// do the content model check.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// The operation is one of the ContentSpecNode.NODE_XXX values!</comment>
                    <comment type="line">//</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFirstChild</name>.
                                    <name>setValues</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>firstChild</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>secondChild</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fSecondChild</name>.
                                                <name>setValues</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>secondChild</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fSecondChild</name>.
                                                <name>clear</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fOperator</name>
                            =
                            <name>operator</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// ContentModelValidator methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Check that the specified content is valid according to this
                * content model. This method can also be called to do 'what if'
                * testing of content models just to see if they would be valid.
                * &lt;p&gt;
                * A value of -1 in the children array indicates a PCDATA node. All other
                * indexes will be positive and represent child elements. The count can be
                * zero, since some elements have the EMPTY content model and that must be
                * confirmed.
                *
                * @param children The children of this element. Each integer is an index within
                * the &lt;code&gt;StringPool&lt;/code&gt; of the child element name. An index
                * of -1 is used to indicate an occurrence of non-whitespace character
                * data.
                * @param offset Offset into the array where the children starts.
                * @param length The number of entries in the &lt;code&gt;children&lt;/code&gt; array.
                *
                * @return The value -1 if fully valid, else the 0 based index of the child
                * that first failed. If the value returned is equal to the number
                * of children, then the specified children are valid but additional
                * content is required to reach a valid ending state.
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>validate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>QName</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>children</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// According to the type of operation, we do the correct type of</comment>
                    <comment type="line">// content check.</comment>
                    <comment type="line">//</comment>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>fOperator</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_LEAF</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// If there is not a child, then report an error at index 0
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>

                                <comment type="line">// If the 0th child is not the right kind, report an error at 0
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>children</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .<name>rawname</name> !=
                                            <name><name>fFirstChild</name>.
                                                <name>rawname</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>0</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// If more than one child, report an error at index 1</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            &gt; 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>1</expr>;
                                        </return>
                                    </then>
                                </if>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_ZERO_OR_ONE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">//</comment>
                                <comment type="line">// If there is one child, make sure its the right type. If not,
                                </comment>
                                <comment type="line">// then its an error at index 0.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            == 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>children</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>offset</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .<name>rawname</name> !=
                                                        <name><name>fFirstChild</name>.
                                                            <name>rawname</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>0</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">//</comment>
                                <comment type="line">// If the child count is greater than one, then obviously</comment>
                                <comment type="line">// bad, so report an error at index 1.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            &gt; 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>1</expr>;
                                        </return>
                                    </then>
                                </if>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_ZERO_OR_MORE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">//</comment>
                                <comment type="line">// If the child count is zero, that's fine. If its more than
                                </comment>
                                <comment type="line">// zero, then make sure that all children are of the element
                                </comment>
                                <comment type="line">// type that we stored. If not, report the index of the first
                                </comment>
                                <comment type="line">// failed one.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>index</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>index</name>
                                                        &lt;
                                                        <name>length</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>index</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>
                                                                    <name>children</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>offset</name>
                                                                            +
                                                                            <name>index</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .<name>rawname</name> !=
                                                                <name><name>fFirstChild</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_ONE_OR_MORE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">//</comment>
                                <comment type="line">// If the child count is zero, that's an error so report</comment>
                                <comment type="line">// an error at index 0.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>

                                <comment type="line">//</comment>
                                <comment type="line">// Otherwise we have to check them all to make sure that they
                                </comment>
                                <comment type="line">// are of the correct child type. If not, then report the index
                                </comment>
                                <comment type="line">// of the first one that is not.</comment>
                                <comment type="line">//</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>length</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>children</name>
                                                        <index>[
                                                            <expr>
                                                                <name>offset</name>
                                                                +
                                                                <name>index</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .<name>rawname</name> !=
                                                    <name><name>fFirstChild</name>.
                                                        <name>rawname</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_CHOICE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">//</comment>
                                <comment type="line">// There must be one and only one child, so if the element count
                                </comment>
                                <comment type="line">// is zero, return an error at index 0.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>

                                <comment type="line">// If the zeroth element isn't one of our choices, error at 0
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>(
                                            <name>
                                                <name>children</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .<name>rawname</name> !=
                                            <name><name>fFirstChild</name>.
                                                <name>rawname</name>
                                            </name>
                                            ) &amp;&amp;
                                            (
                                            <name>
                                                <name>children</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .<name>rawname</name> !=
                                            <name><name>fSecondChild</name>.
                                                <name>rawname</name>
                                            </name>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>0</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// If there is more than one element, then an error at 1</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            &gt; 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>1</expr>;
                                        </return>
                                    </then>
                                </if>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>XMLContentSpec</name>.
                                        <name>CONTENTSPECNODE_SEQ</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">//</comment>
                                <comment type="line">// There must be two children and they must be the two values
                                </comment>
                                <comment type="line">// we stored, in the stored order.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            == 2
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>children</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>offset</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .<name>rawname</name> !=
                                                        <name><name>fFirstChild</name>.
                                                            <name>rawname</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>0</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>children</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>offset</name>
                                                                    + 1
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .<name>rawname</name> !=
                                                        <name><name>fSecondChild</name>.
                                                            <name>rawname</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>1</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>length</name>
                                                        &gt; 2
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>2</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            <return>return
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>

                                <break>break;</break>

                            </case>
                            <default>default :
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"ImplementationMessages.VAL_CST"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>

                    <comment type="line">// We survived, so return success status</comment>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// validate</comment>

            }
        </block>
    </class>
    <comment type="line">// class SimpleContentModel</comment>
</unit>
