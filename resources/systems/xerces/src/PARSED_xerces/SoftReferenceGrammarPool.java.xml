<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\jaxp\validation\SoftReferenceGrammarPool.java">
    <comment type="block">/*
        * Copyright 2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>jaxp</name>.
            <name>validation</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>Reference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>ReferenceQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>SoftReference</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>Grammar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarDescription</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLSchemaDescription</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarPool</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;This grammar pool is a memory sensitive cache. The grammars
        * stored in the pool are softly reachable and may be cleared by
        * the garbage collector in response to memory demand. Equality
        * of &lt;code&gt;XMLSchemaDescription&lt;/code&gt;s is determined using both
        * the target namespace for the schema and schema location.&lt;/p&gt;
        *
        * @author Michael Glavassevich, IBM
        * @version $Id: SoftReferenceGrammarPool.java,v 1.2 2005/05/28 02:06:59 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>SoftReferenceGrammarPool</name>
        <super>
            <implements>implements
                <name>XMLGrammarPool</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default size. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>TABLE_SIZE</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Zero length grammar array. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Grammar</name>
                        <index>[]</index>
                    </type>
                    <name>ZERO_LENGTH_GRAMMAR_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Grammar</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Grammars. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Entry</name>
                        <index>[]</index>
                    </type>
                    <name>fGrammars</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Flag indicating whether this pool is locked */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fPoolIsLocked</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The number of grammars in the pool */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>fGrammarCount</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Reference queue for cleared grammar references */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>ReferenceQueue</name>
                    </type>
                    <name>fReferenceQueue</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ReferenceQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Constructs a grammar pool with a default number of buckets. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>SoftReferenceGrammarPool</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fGrammars</name>
                            = new
                            <name>
                                <name>Entry</name>
                                <index>[
                                    <expr>
                                        <name>TABLE_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fPoolIsLocked</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="javadoc">/** Constructs a grammar pool with a specified number of buckets. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>SoftReferenceGrammarPool</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialCapacity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fGrammars</name>
                            = new
                            <name>
                                <name>Entry</name>
                                <index>[
                                    <expr>
                                        <name>initialCapacity</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fPoolIsLocked</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// XMLGrammarPool methods</comment>
            <comment type="line">//</comment>

            <comment type="block">/* &lt;p&gt; Retrieve the initial known set of grammars. This method is
                * called by a validator before the validation starts. The application
                * can provide an initial set of grammars available to the current
                * validation attempt. &lt;/p&gt;
                *
                * @param grammarType The type of the grammar, from the
                * &lt;code&gt;org.apache.xerces.xni.grammars.XMLGrammarDescription&lt;/code&gt;
                * interface.
                * @return The set of grammars the validator may put in its "bucket"
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                    <index>[]</index>
                </type>
                <name>retrieveInitialGrammarSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>grammarType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <synchronized>synchronized (
                        <expr>
                            <name>fGrammars</name>
                        </expr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>clean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Return no grammars. This allows the garbage collector to sift
                            </comment>
                            <comment type="line">// out grammars which are not in use when memory demand is high.
                            </comment>
                            <comment type="line">// It also allows the pool to return the "right" schema grammar
                            </comment>
                            <comment type="line">// based on schema locations.</comment>
                            <return>return
                                <expr>
                                    <name>ZERO_LENGTH_GRAMMAR_ARRAY</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>
            <comment type="line">// retrieveInitialGrammarSet (String): Grammar[]</comment>

            <comment type="block">/* &lt;p&gt; Return the final set of grammars that the validator ended up
                * with. This method is called after the validation finishes. The
                * application may then choose to cache some of the returned grammars.&lt;/p&gt;
                * &lt;p&gt;In this implementation, we make our choice based on whether this object
                * is "locked"--that is, whether the application has instructed
                * us not to accept any new grammars.&lt;/p&gt;
                *
                * @param grammarType The type of the grammars being returned;
                * @param grammars An array containing the set of grammars being
                * returned; order is not significant.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>cacheGrammars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>grammarType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Grammar</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>grammars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>fPoolIsLocked</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>grammars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>++
                                            <name>i</name>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>putGrammar</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>grammars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// cacheGrammars(String, Grammar[]);</comment>

            <comment type="block">/* &lt;p&gt; This method requests that the application retrieve a grammar
                * corresponding to the given GrammarIdentifier from its cache.
                * If it cannot do so it must return null; the parser will then
                * call the EntityResolver. &lt;/p&gt;
                * &lt;strong&gt;An application must not call its EntityResolver itself
                * from this method; this may result in infinite recursions.&lt;/strong&gt;
                *
                * This implementation chooses to use the root element name to identify a DTD grammar
                * and the target namespace to identify a Schema grammar.
                *
                * @param desc The description of the Grammar being requested.
                * @return The Grammar corresponding to this description or null if
                * no such Grammar is known.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                </type>
                <name>retrieveGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getGrammar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>desc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// retrieveGrammar(XMLGrammarDescription): Grammar</comment>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Puts the specified grammar into the grammar pool and associates it to
                * its root element name or its target namespace.
                *
                * @param grammar The Grammar.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Grammar</name>
                            </type>
                            <name>grammar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>fPoolIsLocked</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <synchronized>synchronized (
                                    <expr>
                                        <name>fGrammars</name>
                                    </expr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>clean</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>XMLGrammarDescription</name>
                                                </type>
                                                <name>desc</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>grammar</name>.
                                                                <name>getGrammarDescription</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>hash</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>hashCode</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>index</name> =
                                                <init>
                                                    <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                                        <name><name>fGrammars</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>Entry</name>
                                                    </type>
                                                    <name>entry</name> =
                                                    <init>
                                                        <expr>
                                                            <name>
                                                                <name>fGrammars</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>entry</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>entry</name>
                                                    =
                                                    <name><name>entry</name>.
                                                        <name>next</name>
                                                    </name>
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>entry</name>.
                                                                <name>hash</name>
                                                            </name>
                                                            == <name>hash</name> &amp;&amp;
                                                            <call>
                                                                <name>equals</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>entry</name>.
                                                                                <name>desc</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>desc</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>entry</name>.<name>
                                                                                grammar</name>.
                                                                                <name>get</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        !=
                                                                        <name>grammar</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name><name>entry</name>.
                                                                                    <name>grammar</name>
                                                                                </name>
                                                                                = new
                                                                                <call>
                                                                                    <name>SoftGrammarReference</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entry</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>grammar</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>fReferenceQueue
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <return>return;</return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        <comment type="line">// create a new entry</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Entry</name>
                                                </type>
                                                <name>entry</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>Entry</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>grammar</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fGrammars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fReferenceQueue</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>entry</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>fGrammarCount</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </synchronized>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// putGrammar(Grammar)</comment>

            <comment type="javadoc">/**
                * Returns the grammar associated to the specified grammar description.
                * Currently, the root element name is used as the key for DTD grammars
                * and the target namespace is used as the key for Schema grammars.
                *
                * @param desc The Grammar Description.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                </type>
                <name>getGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <synchronized>synchronized (
                        <expr>
                            <name>fGrammars</name>
                        </expr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>clean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>hashCode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>desc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                            <name><name>fGrammars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>entry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>entry</name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Grammar</name>
                                            </type>
                                            <name>tempGrammar</name> =
                                            <init>
                                                <expr>(<name>Grammar</name>)
                                                    <call>
                                                        <name><name>entry</name>.<name>grammar</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <comment type="javadoc">/** If the soft reference has been cleared, remove this
                                        entry from the pool. */
                                    </comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>tempGrammar</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>removeEntry</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>entry</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>(
                                                        <name><name>entry</name>.
                                                            <name>hash</name>
                                                        </name>
                                                        == <name>hash</name>) &amp;&amp;
                                                        <call>
                                                            <name>equals</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>entry</name>.
                                                                            <name>desc</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>tempGrammar</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>
            <comment type="line">// getGrammar(XMLGrammarDescription):Grammar</comment>

            <comment type="javadoc">/**
                * Removes the grammar associated to the specified grammar description from the
                * grammar pool and returns the removed grammar. Currently, the root element name
                * is used as the key for DTD grammars and the target namespace is used
                * as the key for Schema grammars.
                *
                * @param desc The Grammar Description.
                * @return The removed grammar.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                </type>
                <name>removeGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <synchronized>synchronized (
                        <expr>
                            <name>fGrammars</name>
                        </expr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>clean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>hashCode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>desc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                            <name><name>fGrammars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>entry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>entry</name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>(
                                                <name><name>entry</name>.
                                                    <name>hash</name>
                                                </name>
                                                == <name>hash</name>) &amp;&amp;
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>entry</name>.
                                                                    <name>desc</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>desc</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name>removeEntry</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>entry</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>
            <comment type="line">// removeGrammar(XMLGrammarDescription):Grammar</comment>

            <comment type="javadoc">/**
                * Returns true if the grammar pool contains a grammar associated
                * to the specified grammar description. Currently, the root element name
                * is used as the key for DTD grammars and the target namespace is used
                * as the key for Schema grammars.
                *
                * @param desc The Grammar Description.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <synchronized>synchronized (
                        <expr>
                            <name>fGrammars</name>
                        </expr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>clean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>hashCode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>desc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                            <name><name>fGrammars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>entry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>entry</name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Grammar</name>
                                            </type>
                                            <name>tempGrammar</name> =
                                            <init>
                                                <expr>(<name>Grammar</name>)
                                                    <call>
                                                        <name><name>entry</name>.<name>grammar</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <comment type="javadoc">/** If the soft reference has been cleared, remove this
                                        entry from the pool. */
                                    </comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>tempGrammar</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>removeEntry</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>entry</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>(
                                                        <name><name>entry</name>.
                                                            <name>hash</name>
                                                        </name>
                                                        == <name>hash</name>) &amp;&amp;
                                                        <call>
                                                            <name>equals</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>entry</name>.
                                                                            <name>desc</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>
            <comment type="line">// containsGrammar(XMLGrammarDescription):boolean</comment>

            <comment type="block">/* &lt;p&gt; Sets this grammar pool to a "locked" state--i.e.,
                * no new grammars will be added until it is "unlocked".
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>lockPool</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fPoolIsLocked</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// lockPool()</comment>

            <comment type="block">/* &lt;p&gt; Sets this grammar pool to an "unlocked" state--i.e.,
                * new grammars will be added when putGrammar or cacheGrammars
                * are called.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unlockPool</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fPoolIsLocked</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// unlockPool()</comment>

            <comment type="block">/*
                * &lt;p&gt;This method clears the pool-i.e., removes references
                * to all the grammars in it.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>fGrammars</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>fGrammars</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>clear</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fGrammars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fGrammarCount</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// clear()</comment>

            <comment type="javadoc">/**
                * This method checks whether two grammars are the same. Currently, we compare
                * the root element names for DTD grammars and the target namespaces for Schema grammars.
                * The application can override this behaviour and add its own logic.
                *
                * @param desc1 The grammar description
                * @param desc2 The grammar description of the grammar to be compared to
                * @return True if the grammars are equal, otherwise false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>desc1</name>
                                <name>instanceof</name>
                                <name>XMLSchemaDescription</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!(<name>desc2</name>
                                            <name>instanceof</name>
                                            <name>XMLSchemaDescription</name>)
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>XMLSchemaDescription</name>
                                        </type>
                                        <name>sd1</name> =
                                        <init>
                                            <expr>(<name>XMLSchemaDescription</name>)
                                                <name>desc1</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>XMLSchemaDescription</name>
                                        </type>
                                        <name>sd2</name> =
                                        <init>
                                            <expr>(<name>XMLSchemaDescription</name>)
                                                <name>desc2</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>targetNamespace</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sd1</name>.
                                                        <name>getTargetNamespace</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>targetNamespace</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name><name>targetNamespace</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>sd2</name>.
                                                                                <name>getTargetNamespace</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>sd2</name>.
                                                            <name>getTargetNamespace</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                <comment type="line">// The JAXP 1.3 spec says that the implementation can assume that
                                </comment>
                                <comment type="line">// if two schema location hints are the same they always resolve
                                </comment>
                                <comment type="line">// to the same document. In the default grammar pool
                                    implementation
                                </comment>
                                <comment type="line">// we only look at the target namespaces. Here we also compare
                                </comment>
                                <comment type="line">// location hints.</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>expandedSystemId</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sd1</name>.
                                                        <name>getExpandedSystemId</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>expandedSystemId</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name><name>expandedSystemId</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>sd2</name>.
                                                                                <name>getExpandedSystemId</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>sd2</name>.
                                                            <name>getExpandedSystemId</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>desc1</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>desc2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the hash code value for the given grammar description.
                *
                * @param desc The grammar description
                * @return The hash code value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>desc</name>
                                <name>instanceof</name>
                                <name>XMLSchemaDescription</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>XMLSchemaDescription</name>
                                        </type>
                                        <name>sd</name> =
                                        <init>
                                            <expr>(<name>XMLSchemaDescription</name>)
                                                <name>desc</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>targetNamespace</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sd</name>.
                                                        <name>getTargetNamespace</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>expandedSystemId</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sd</name>.
                                                        <name>getExpandedSystemId</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>hash</name> =
                                        <init>
                                            <expr>(<name>targetNamespace</name> != <name>null</name>) ?
                                                <call>
                                                    <name><name>targetNamespace</name>.
                                                        <name>hashCode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                : 0
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>hash</name>
                                        ^= (<name>expandedSystemId</name> != <name>null</name>) ?
                                        <call>
                                            <name><name>expandedSystemId</name>.
                                                <name>hashCode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        : 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>hash</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>desc</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Removes the given entry from the pool
                *
                * @param entry the entry to remove
                * @return The grammar attached to this entry
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Grammar</name>
                </type>
                <name>removeEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>entry</name>.
                                    <name>prev</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>entry</name>.<name>prev</name>.
                                            <name>next</name>
                                        </name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fGrammars</name>
                                            <index>[
                                                <expr>
                                                    <name><name>entry</name>.
                                                        <name>bucket</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>entry</name>.
                                    <name>next</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>entry</name>.<name>next</name>.
                                            <name>prev</name>
                                        </name>
                                        =
                                        <name><name>entry</name>.
                                            <name>prev</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>--
                            <name>fGrammarCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>entry</name>.<name>grammar</name>.
                                <name>entry</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>Grammar</name>)
                            <call>
                                <name><name>entry</name>.<name>grammar</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Removes stale entries from the pool.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>clean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Reference</name>
                            </type>
                            <name>ref</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fReferenceQueue</name>.
                                            <name>poll</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>ref</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>entry</name> =
                                    <init>
                                        <expr>((<name>SoftGrammarReference</name>) <name>ref</name>).
                                            <name>entry</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>entry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>removeEntry</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>entry</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>ref</name>
                                    =
                                    <call>
                                        <name><name>fReferenceQueue</name>.
                                            <name>poll</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This class is a grammar pool entry. Each entry acts as a node
                * in a doubly linked list.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Entry</name>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>int</name>
                            </type>
                            <name>bucket</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Entry</name>
                            </type>
                            <name>prev</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Entry</name>
                            </type>
                            <name>next</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>SoftGrammarReference</name>
                            </type>
                            <name>grammar</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>protected</specifier>
                        <name>Entry</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bucket</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLGrammarDescription</name>
                                    </type>
                                    <name>desc</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Grammar</name>
                                    </type>
                                    <name>grammar</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>next</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>ReferenceQueue</name>
                                    </type>
                                    <name>queue</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hash</name>
                                    </name>
                                    =
                                    <name>hash</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bucket</name>
                                    </name>
                                    =
                                    <name>bucket</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>prev</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>next</name>
                                    </name>
                                    =
                                    <name>next</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>next</name>.
                                                    <name>prev</name>
                                                </name>
                                                =
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>desc</name>
                                    </name>
                                    =
                                    <name>desc</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>grammar</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>SoftGrammarReference</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>grammar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>queue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="line">// clear this entry; useful to promote garbage collection</comment>
                    <comment type="line">// since reduces reference count of objects to be destroyed</comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>clear</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>desc</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>grammar</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>next</name>.
                                                        <name>clear</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>next</name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// clear()</comment>

                    }
                </block>
            </class>
            <comment type="line">// class Entry</comment>

            <comment type="javadoc">/**
                * This class stores a soft reference to a grammar object. It keeps a reference
                * to its associated entry, so that it can be easily removed from the pool.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>SoftGrammarReference</name>
                <super>
                    <extends>extends
                        <name>SoftReference</name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Entry</name>
                            </type>
                            <name>entry</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>protected</specifier>
                        <name>SoftGrammarReference</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>entry</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Grammar</name>
                                    </type>
                                    <name>grammar</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>ReferenceQueue</name>
                                    </type>
                                    <name>queue</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>grammar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>queue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>entry</name>
                                    </name>
                                    =
                                    <name>entry</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    }
                </block>
            </class>
            <comment type="line">// class SoftGrammarReference</comment>

            }
        </block>
    </class>
    <comment type="line">// class SoftReferenceGrammarPool</comment>
</unit>
