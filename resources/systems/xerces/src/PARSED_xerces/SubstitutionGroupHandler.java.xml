<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\SubstitutionGroupHandler.java">
    <comment type="block">/*
        * Copyright 2001-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSConstants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSTypeDefinition</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>QName</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * To store and validate information about substitutionGroup
        *
        * @xerces.internal
        *
        * @author Sandy Gao, IBM
        *
        * @version $Id: SubstitutionGroupHandler.java,v 1.18 2005/02/04 03:36:57 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SubstitutionGroupHandler</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>XSElementDecl</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_GROUP</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>XSElementDecl</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// grammar resolver</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSGrammarBucket</name>
                    </type>
                    <name>fGrammarBucket</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default constructor
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SubstitutionGroupHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSGrammarBucket</name>
                            </type>
                            <name>grammarBucket</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fGrammarBucket</name>
                            =
                            <name>grammarBucket</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// 3.9.4 Element Sequence Locally Valid (Particle) 2.3.3</comment>
            <comment type="line">// check whether one element decl matches an element with the given qname</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSElementDecl</name>
                </type>
                <name>getMatchingElemDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>exemplar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>element</name>.
                                    <name>localpart</name>
                                </name>
                                ==
                                <name><name>exemplar</name>.
                                    <name>fName</name>
                                </name>
                                &amp;&amp;
                                <name><name>element</name>.
                                    <name>uri</name>
                                </name>
                                ==
                                <name><name>exemplar</name>.
                                    <name>fTargetNamespace</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>exemplar</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if the exemplar is not a global element decl, then it's not possible
                    </comment>
                    <comment type="line">// to be substituted by another element.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>exemplar</name>.
                                    <name>fScope</name>
                                </name>
                                !=
                                <name><name>XSConstants</name>.
                                    <name>SCOPE_GLOBAL</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// if the decl blocks substitution, return false</comment>
                    <if>if
                        <condition>(
                            <expr>(
                                <name><name>exemplar</name>.
                                    <name>fBlock</name>
                                </name>
                                &amp;
                                <name><name>XSConstants</name>.
                                    <name>DERIVATION_SUBSTITUTION</name>
                                </name>
                                ) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// get grammar of the element</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>sGrammar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fGrammarBucket</name>.
                                            <name>getGrammar</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>element</name>.
                                                        <name>uri</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sGrammar</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// get the decl for the element</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>eDecl</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>sGrammar</name>.
                                            <name>getGlobalElementDecl</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>element</name>.
                                                        <name>localpart</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>eDecl</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// and check by using substitutionGroup information</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>substitutionGroupOK</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>eDecl</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>exemplar</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>exemplar</name>.
                                                    <name>fBlock</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>eDecl</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// 3.3.6 Substitution Group OK (Transitive)</comment>
            <comment type="line">// check whether element can substitute exemplar</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>substitutionGroupOK</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>exemplar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>blockingConstraint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// For an element declaration (call it D) to be validly substitutable for
                        another element declaration (call it C) subject to a blocking constraint (a subset of
                        {substitution, extension, restriction}, the value of a {disallowed substitutions}) one of the
                        following must be true:
                    </comment>
                    <comment type="line">// 1. D and C are the same element declaration.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>element</name>
                                ==
                                <name>exemplar</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>true</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// 2 All of the following must be true:</comment>
                    <comment type="line">// 2.1 The blocking constraint does not contain substitution.</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>blockingConstraint</name> &amp;
                                <name><name>XSConstants</name>.
                                    <name>DERIVATION_SUBSTITUTION</name>
                                </name>
                                ) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// 2.2 There is a chain of {substitution group affiliation}s from D to C, that
                        is, either D's {substitution group affiliation} is C, or D's {substitution group affiliation}'s
                        {substitution group affiliation} is C, or . . .
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>subGroup</name> =
                            <init>
                                <expr>
                                    <name><name>element</name>.
                                        <name>fSubGroup</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>subGroup</name>
                                != <name>null</name> &amp;&amp; <name>subGroup</name> !=
                                <name>exemplar</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>subGroup</name>
                                    =
                                    <name><name>subGroup</name>.
                                        <name>fSubGroup</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <if>if
                        <condition>(
                            <expr>
                                <name>subGroup</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// 2.3 The set of all {derivation method}s involved in the derivation of D's
                        {type definition} from C's {type definition} does not intersect with the union of the blocking
                        constraint, C's {prohibited substitutions} (if C is complex, otherwise the empty set) and the
                        {prohibited substitutions} (respectively the empty set) of any intermediate {type definition}s
                        in the derivation of D's {type definition} from C's {type definition}.
                    </comment>
                    <comment type="line">// prepare the combination of {derivation method} and</comment>
                    <comment type="line">// {disallowed substitution}</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>devMethod</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>blockConstraint</name> =
                            <init>
                                <expr>
                                    <name>blockingConstraint</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// element.fType should be derived from exemplar.fType</comment>
                    <comment type="line">// add derivation methods of derived types to devMethod;</comment>
                    <comment type="line">// add block of base types to blockConstraint.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <name><name>element</name>.
                                        <name>fType</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>type</name>
                                !=
                                <name><name>exemplar</name>.
                                    <name>fType</name>
                                </name>
                                &amp;&amp; <name>type</name> !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnyType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>type</name>.
                                                <name>getTypeCategory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSTypeDefinition</name>.
                                            <name>COMPLEX_TYPE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>devMethod</name>
                                            |= ((<name>XSComplexTypeDecl</name>)<name>type</name>).
                                            <name>fDerivedBy</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <name>devMethod</name>
                                            |=
                                            <name><name>XSConstants</name>.
                                                <name>DERIVATION_RESTRICTION</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    =
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// type == null means the current type is anySimpleType,</comment>
                            <comment type="line">// whose base type should be anyType</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>type</name>
                                            =
                                            <name><name>SchemaGrammar</name>.
                                                <name>fAnyType</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>type</name>.
                                                <name>getTypeCategory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSTypeDefinition</name>.
                                            <name>COMPLEX_TYPE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>blockConstraint</name>
                                            |= ((<name>XSComplexTypeDecl</name>)<name>type</name>).
                                            <name>fBlock</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                !=
                                <name><name>exemplar</name>.
                                    <name>fType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>(<name>devMethod</name> &amp; <name>blockConstraint</name>) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// check whether element is in exemplar's substitution group</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>inSubstitutionGroup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>exemplar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// [Definition:] Every element declaration (call this HEAD) in the {element
                        declarations} of a schema defines a substitution group, a subset of those {element
                        declarations}, as follows:
                    </comment>
                    <comment type="line">// Define PSG, the potential substitution group for HEAD, as follows:</comment>
                    <comment type="line">// 1 The element declaration itself is in PSG;</comment>
                    <comment type="line">// 2 PSG is closed with respect to {substitution group affiliation}, that is,
                        if any element declaration in the {element declarations} has a {substitution group affiliation}
                        in PSG, then it is also in PSG itself.
                    </comment>
                    <comment type="line">// HEAD's actual substitution group is then the set consisting of each member
                        of PSG such that all of the following must be true:
                    </comment>
                    <comment type="line">// 1 Its {abstract} is false.</comment>
                    <comment type="line">// 2 It is validly substitutable for HEAD subject to an empty blocking
                        constraint, as defined in Substitution Group OK (Transitive) (3.3.6).
                    </comment>
                    <return>return
                        <expr>
                            <call>
                                <name>substitutionGroupOK</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exemplar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>exemplar</name>.
                                                <name>fBlock</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// to store substitution group information</comment>
            <comment type="line">// the key to the hashtable is an element decl, and the value is</comment>
            <comment type="line">// - a Vector, which contains all elements that has this element as their</comment>
            <comment type="line">// substitution group affilication</comment>
            <comment type="line">// - an array of OneSubGroup, which contains its substitution group before block.
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Hashtable</name>
                    </type>
                    <name>fSubGroupsB</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>OneSubGroup</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_VECTOR</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>OneSubGroup</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// The real substitution groups (after "block")</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Hashtable</name>
                    </type>
                    <name>fSubGroups</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * clear the internal registry of substitutionGroup information
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fSubGroupsB</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fSubGroups</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * add a list of substitution group information.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addSubstitutionGroup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>XSElementDecl</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>subHead</name>,
                            <name>element</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>subGroup</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// for all elements with substitution group affiliation</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>elements</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>element</name>
                                    =
                                    <name>
                                        <name>elements</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>subHead</name>
                                    =
                                    <name><name>element</name>.
                                        <name>fSubGroup</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// check whether this an entry for this element</comment>
                            <expr_stmt>
                                <expr>
                                    <name>subGroup</name>
                                    = (<name>Vector</name>)
                                    <call>
                                        <name><name>fSubGroupsB</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>subHead</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>subGroup</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if not, create a new one</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>subGroup</name>
                                                = new
                                                <call>
                                                    <name>Vector</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fSubGroupsB</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>subHead</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>subGroup</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// add to the vactor</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>subGroup</name>.
                                            <name>addElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * get all elements that can substitute the given element,
                * according to the spec, we shouldn't consider the {block} constraints.
                *
                * from the spec, substitution group of a given element decl also contains
                * the element itself. but the array returned from this method doesn't
                * containt this element.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSElementDecl</name>
                    <index>[]</index>
                </type>
                <name>getSubstitutionGroup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// If we already have sub group for this element, just return it.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>subGroup</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fSubGroups</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>subGroup</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>(
                                    <name>
                                        <name>XSElementDecl</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <name>subGroup</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>(
                                <name><name>element</name>.
                                    <name>fBlock</name>
                                </name>
                                &amp;
                                <name><name>XSConstants</name>.
                                    <name>DERIVATION_SUBSTITUTION</name>
                                </name>
                                ) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fSubGroups</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>EMPTY_GROUP</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>EMPTY_GROUP</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Otherwise, get all potential sub group elements</comment>
                    <comment type="line">// (without considering "block" on this element</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>OneSubGroup</name>
                                <index>[]</index>
                            </type>
                            <name>groupB</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getSubGroupB</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>OneSubGroup</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <name><name>groupB</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                            , <name>rlen</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                                <index>[]</index>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>XSElementDecl</name>
                                        <index>[
                                            <expr>
                                                <name>len</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// For each of such elements, check whether the derivation methods</comment>
                    <comment type="line">// overlap with "block". If not, add it to the sub group</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <name><name>element</name>.
                                            <name>fBlock</name>
                                        </name>
                                        &amp;
                                        <name>
                                            <name>groupB</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .<name>dMethod</name>) == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>ret</name>
                                                <index>[
                                                    <expr><name>rlen</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>
                                                <name>groupB</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .
                                            <name>sub</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// Resize the array if necessary</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>rlen</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSElementDecl</name>
                                            <index>[]</index>
                                        </type>
                                        <name>ret1</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>XSElementDecl</name>
                                                    <index>[
                                                        <expr>
                                                            <name>rlen</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ret</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ret1</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>rlen</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ret</name>
                                        =
                                        <name>ret1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Store the subgroup</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fSubGroups</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ret</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Get potential sub group element (without considering "block")</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>OneSubGroup</name>
                    <index>[]</index>
                </type>
                <name>getSubGroupB</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OneSubGroup</name>
                            </type>
                            <name>methods</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>subGroup</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fSubGroupsB</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// substitution group for this one is empty</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>subGroup</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fSubGroupsB</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>EMPTY_VECTOR</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>EMPTY_VECTOR</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// we've already calculated the element, just return.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>subGroup</name>
                                <name>instanceof</name>
                                <name>
                                    <name>OneSubGroup</name>
                                    <index>[]</index>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>(
                                    <name>
                                        <name>OneSubGroup</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <name>subGroup</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// we only have the *direct* substitutions</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>group</name> =
                            <init>
                                <expr>(<name>Vector</name>)
                                    <name>subGroup</name>
                                </expr>
                            </init>
                            , <name>newGroup</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>OneSubGroup</name>
                                <index>[]</index>
                            </type>
                            <name>group1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// then for each of the direct substitutions, get its substitution</comment>
                    <comment type="line">// group, and combine the groups together.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>dMethod</name>, <name>bMethod</name>, <name>dSubMethod</name>,
                            <name>bSubMethod</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>group</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        -1
                                    </expr>
                                </init>
                                ,
                                <name>j</name>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <comment type="line">// Check whether this element is blocked. If so, ignore it.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XSElementDecl</name>
                                    </type>
                                    <name>sub</name> =
                                    <init>
                                        <expr>(<name>XSElementDecl</name>)
                                            <call>
                                                <name><name>group</name>.
                                                    <name>elementAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getDBMethods</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>sub</name>.
                                                            <name>fType</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>element</name>.
                                                            <name>fType</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>methods</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <continue>continue;</continue>
                                </then>
                            </if>
                            <comment type="line">// Remember derivation methods and blocks from the types</comment>
                            <expr_stmt>
                                <expr>
                                    <name>dMethod</name>
                                    =
                                    <name><name>methods</name>.
                                        <name>dMethod</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>bMethod</name>
                                    =
                                    <name><name>methods</name>.
                                        <name>bMethod</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Add this one to potential group</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>newGroup</name>.
                                            <name>addElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>OneSubGroup</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>sub</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>methods</name>.
                                                                        <name>dMethod</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>methods</name>.
                                                                        <name>bMethod</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Get potential group for this element</comment>
                            <expr_stmt>
                                <expr>
                                    <name>group1</name>
                                    =
                                    <call>
                                        <name>getSubGroupB</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sub</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>methods</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <expr>
                                        <name>j</name>
                                        =
                                        <name><name>group1</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &gt;= 0
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>--
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <comment type="line">// For each of them, check whether it's blocked (by type)
                                    </comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>dSubMethod</name>
                                            =
                                            <call>(<name>short</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dMethod</name>
                                                            |
                                                            <name>
                                                                <name>group1</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            .
                                                            <name>dMethod</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>bSubMethod</name>
                                            =
                                            <call>(<name>short</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>bMethod</name>
                                                            |
                                                            <name>
                                                                <name>group1</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            .
                                                            <name>bMethod</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <comment type="line">// Ignore it if it's blocked</comment>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>dSubMethod</name> &amp; <name>bSubMethod</name>) != 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <continue>continue;</continue>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>newGroup</name>.
                                                    <name>addElement</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>new
                                                            <call>
                                                                <name>OneSubGroup</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>group1</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>j</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <name>sub</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>dSubMethod</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>bSubMethod</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <comment type="line">// Convert to an array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>OneSubGroup</name>
                                <index>[]</index>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>OneSubGroup</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>newGroup</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>newGroup</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        -1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>ret</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>OneSubGroup</name>)
                                    <call>
                                        <name><name>newGroup</name>.
                                            <name>elementAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <comment type="line">// Store the potential sub group</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fSubGroupsB</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ret</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>getDBMethods</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>typed</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>typeb</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OneSubGroup</name>
                            </type>
                            <name>methods</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>dMethod</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>bMethod</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>typed</name>
                                != <name>typeb</name> &amp;&amp; <name>typed</name> !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnyType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>typed</name>.
                                                <name>getTypeCategory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSTypeDefinition</name>.
                                            <name>COMPLEX_TYPE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>dMethod</name>
                                            |= ((<name>XSComplexTypeDecl</name>)<name>typed</name>).
                                            <name>fDerivedBy</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <name>dMethod</name>
                                            |=
                                            <name><name>XSConstants</name>.
                                                <name>DERIVATION_RESTRICTION</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>typed</name>
                                    =
                                    <call>
                                        <name><name>typed</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// type == null means the current type is anySimpleType,</comment>
                            <comment type="line">// whose base type should be anyType</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>typed</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>typed</name>
                                            =
                                            <name><name>SchemaGrammar</name>.
                                                <name>fAnyType</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>typed</name>.
                                                <name>getTypeCategory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSTypeDefinition</name>.
                                            <name>COMPLEX_TYPE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>bMethod</name>
                                            |= ((<name>XSComplexTypeDecl</name>)<name>typed</name>).
                                            <name>fBlock</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <comment type="line">// No derivation relation, or blocked, return false</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>typed</name>
                                != <name>typeb</name> || (<name>dMethod</name> &amp; <name>bMethod</name>) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Remember the derivation methods and blocks, return true.</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>methods</name>.
                                <name>dMethod</name>
                            </name>
                            =
                            <name>dMethod</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>methods</name>.
                                <name>bMethod</name>
                            </name>
                            =
                            <name>bMethod</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Record the information about how one element substitute another one</comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>OneSubGroup</name>
                <block>{
                    <constructor>
                        <name>OneSubGroup</name>
                        <parameter_list>()</parameter_list>
                        <block>{}</block>
                    </constructor>
                    <constructor>
                        <name>OneSubGroup</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XSElementDecl</name>
                                    </type>
                                    <name>sub</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>dMethod</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>bMethod</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>sub</name>
                                    </name>
                                    =
                                    <name>sub</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>dMethod</name>
                                    </name>
                                    =
                                    <name>dMethod</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bMethod</name>
                                    </name>
                                    =
                                    <name>bMethod</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// The element that substitutes another one</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSElementDecl</name>
                            </type>
                            <name>sub</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// The combination of all derivation methods from sub's type to</comment>
                    <comment type="line">// the head's type</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>dMethod</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// The combination of {block} of the types in the derivation chain</comment>
                    <comment type="line">// excluding sub's type</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>bMethod</name>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>
            }
        </block>
    </class>
    <comment type="line">// class SubstitutionGroupHandler</comment>
</unit>
