<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\util\SymbolHash.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>util</name>
        </name>
        ;
    </package>


    <comment type="javadoc">/**
        * This class is an unsynchronized hash table primary used for String
        * to Object mapping.
        * &lt;p&gt;
        * The hash code uses the same algorithm as SymbolTable class.
        *
        * @author Elena Litani
        * @version $Id: SymbolHash.java,v 1.8 2004/02/24 23:15:53 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SymbolHash</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default table size. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>fTableSize</name> =
                    <init>
                        <expr>101</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Buckets. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Entry</name>
                        <index>[]</index>
                    </type>
                    <name>fBuckets</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Number of elements. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>fNum</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Constructs a key table with the default size. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>SymbolHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fBuckets</name>
                            = new
                            <name>
                                <name>Entry</name>
                                <index>[
                                    <expr>
                                        <name>fTableSize</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a key table with a given size.
                *
                * @param size the size of the key table.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SymbolHash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fTableSize</name>
                            =
                            <name>size</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBuckets</name>
                            = new
                            <name>
                                <name>Entry</name>
                                <index>[
                                    <expr>
                                        <name>fTableSize</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Adds the key/value mapping to the key table. If the key already exists,
                * the previous value associated with this key is overwritten by the new
                * value.
                *
                * @param key
                * @param value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bucket</name> =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>key</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &amp; 0x7FFFFFFF) %
                                    <name>fTableSize</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>search</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>bucket</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// replace old value</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>entry</name>.
                                            <name>value</name>
                                        </name>
                                        =
                                        <name>value</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <comment type="line">// create new entry</comment>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>entry</name>
                                        = new
                                        <call>
                                            <name>Entry</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>fBuckets</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>bucket</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fBuckets</name>
                                            <index>[
                                                <expr>
                                                    <name>bucket</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>entry</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>fNum</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the value associated with the given key.
                *
                * @param key
                * @return the value associated with the given key.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bucket</name> =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>key</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &amp; 0x7FFFFFFF) %
                                    <name>fTableSize</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>search</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>bucket</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>entry</name>.
                                            <name>value</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the number of key/value pairs stored in this table.
                *
                * @return the number of key/value pairs stored in this table.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fNum</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Add all values to the given array. The array must have enough entry.
                *
                * @param elements the array to store the elements
                * @param from where to start store element in the array
                * @return number of elements copied to the array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                                , <name>j</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;<name>fTableSize</name> &amp;&amp; <name>j</name>&lt;
                                <name>fNum</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>fBuckets</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>entry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>entry</name>
                                        =
                                        <name><name>entry</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>elements</name>
                                                <index>[
                                                    <expr><name>from</name>+
                                                        <name>j</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name><name>entry</name>.
                                                <name>value</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr><name>j</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>fNum</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Make a clone of this object.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>SymbolHash</name>
                </type>
                <name>makeClone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SymbolHash</name>
                            </type>
                            <name>newTable</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SymbolHash</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fTableSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTable</name>.
                                <name>fNum</name>
                            </name>
                            =
                            <name>fNum</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>fTableSize</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>fBuckets</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name><name>newTable</name>.
                                                <name>fBuckets</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>
                                                <name>fBuckets</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .
                                            <call>
                                                <name>makeClone</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>newTable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Remove all key/value assocaition. This tries to save a bit of GC'ing
                * by at least keeping the fBuckets array around.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>fTableSize</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fBuckets</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fNum</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// clear(): void</comment>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Entry</name>
                </type>
                <name>search</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bucket</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// search for identical key</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Entry</name>
                                </type>
                                <name>entry</name> =
                                <init>
                                    <expr>
                                        <name>
                                            <name>fBuckets</name>
                                            <index>[
                                                <expr>
                                                    <name>bucket</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>entry</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>entry</name>
                                =
                                <name><name>entry</name>.
                                    <name>next</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>key</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>entry</name>.
                                                            <name>key</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Classes</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * This class is a key table entry. Each entry acts as a node
                * in a linked list.
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Entry</name>
                <block>{
                    <comment type="line">// key/value</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/** The next entry. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Entry</name>
                            </type>
                            <name>next</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>public</specifier>
                        <name>Entry</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>key</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>value</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <constructor>
                        <specifier>public</specifier>
                        <name>Entry</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>next</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>key</name>
                                    </name>
                                    =
                                    <name>key</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>next</name>
                                    </name>
                                    =
                                    <name>next</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Entry</name>
                        </type>
                        <name>makeClone</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>entry</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>Entry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>entry</name>.
                                        <name>key</name>
                                    </name>
                                    =
                                    <name>key</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>entry</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name><name>entry</name>.
                                                <name>next</name>
                                            </name>
                                            =
                                            <call>
                                                <name><name>next</name>.
                                                    <name>makeClone</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>entry</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// entry</comment>

            }
        </block>
    </class>
    <comment type="line">// class SymbolHash</comment>

</unit>
