<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\TextImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>CharacterData</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Text</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Text nodes hold the non-markup, non-Entity content of
        * an Element or Attribute.
        * &lt;P&gt;
        * When a document is first made available to the DOM, there is only
        * one Text object for each block of adjacent plain-text. Users (ie,
        * applications) may create multiple adjacent Texts during editing --
        * see {@link org.w3c.dom.Element#normalize} for discussion.
        * &lt;P&gt;
        * Note that CDATASection is a subclass of Text. This is conceptually
        * valid, since they're really just two different ways of quoting
        * characters when they're written out as part of an XML stream.
        *
        * @xerces.internal
        *
        * @version $Id: TextImpl.java,v 1.29 2004/11/08 22:21:39 nddelima Exp $
        * @since PR-DOM-Level-1-19980818.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>TextImpl</name>
        <super>
            <extends>extends
                <name>CharacterDataImpl</name>
            </extends>
            <implements>implements <name>CharacterData</name>,
                <name>Text</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Private Data members</comment>
            <comment type="line">//</comment>


            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-5294980852957403469L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default constructor */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>TextImpl</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/** Factory constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>TextImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDoc</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDoc</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * NON-DOM: resets node and sets specified values for the current node
                *
                * @param ownerDoc
                * @param data
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDoc</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr><name>flags</name>=0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>nextSibling</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>previousSibling</name>=
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setOwnerDocument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDoc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>super</name>.
                                <name>data</name>
                            </name>
                            =
                            <name>data</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">//</comment>
            <comment type="line">// Node methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * A short integer indicating what type of node this is. The named
                * constants for this value are defined in the org.w3c.dom.Node interface.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getNodeType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Node</name>.
                                <name>TEXT_NODE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns the node name. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>"#text"</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * NON-DOM: Set whether this Text is ignorable whitespace.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIgnorableWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ignore</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>isIgnorableWhitespace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ignore</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// setIgnorableWhitespace(boolean)</comment>


            <comment type="javadoc">/**
                * DOM L3 Core CR - Experimental
                *
                * Returns whether this text node contains
                * element content whitespace&lt;/a&gt;, often abusively called "ignorable whitespace".
                * The text node is determined to contain whitespace in element content
                * during the load of the document or if validation occurs while using
                * &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isElementContentWhitespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: is this implemenation correct?</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>internalIsIgnorableWhitespace</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * DOM Level 3 WD - Experimental.
                * Returns all text of &lt;code&gt;Text&lt;/code&gt; nodes logically-adjacent text
                * nodes to this node, concatenated in document order.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getWholeText</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fBufferStr</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fBufferStr</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fBufferStr</name>.
                                                <name>setLength</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>data</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>data</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fBufferStr</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//concatenate text of logically adjacent text nodes to the left of this node in
                        the tree
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getWholeTextBackward</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getPreviousSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fBufferStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>temp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fBufferStr</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//clear buffer</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fBufferStr</name>.
                                    <name>setLength</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//concatenate text of logically adjacent text nodes to the right of this node
                        in the tree
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getWholeTextForward</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fBufferStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>temp</name>
                            +
                            <call>
                                <name><name>fBufferStr</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * internal method taking a StringBuffer in parameter and inserts the
                * text content at the start of the buffer
                *
                * @param buf
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>insertTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buf</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNodeValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>content</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>insert</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>content</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Concatenates the text of all logically-adjacent text nodes to the
                * right of this node
                * @param node
                * @param buffer
                * @param parent
                * @return true - if execution was stopped because the type of node
                * other than EntityRef, Text, CDATA is encountered, otherwise
                * return false
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>getWholeTextForward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// boolean to indicate whether node is a child of an entity reference</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inEntRef</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr><name>parent</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>inEntRef</name>
                                        =
                                        <call>
                                            <name><name>parent</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>getWholeTextForward</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>node</name>.
                                                                            <name>getFirstChild</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>buffer</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>true</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                                ||
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>CDATA_SECTION_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>((<name>NodeImpl</name>)<name>node</name>).
                                                        <call>
                                                            <name>getTextContent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>buffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>node</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// if the parent node is an entity reference node, must</comment>
                    <comment type="line">// check nodes to the right of the parent entity reference node for logically
                        adjacent
                    </comment>
                    <comment type="line">// text nodes</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>inEntRef</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getWholeTextForward</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>parent</name>.
                                                                <name>getNextSibling</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>buffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>parent</name>.
                                                                <name>getParentNode</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Concatenates the text of all logically-adjacent text nodes to the left of
                * the node
                * @param node
                * @param buffer
                * @param parent
                * @return true - if execution was stopped because the type of node
                * other than EntityRef, Text, CDATA is encountered, otherwise
                * return false
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>getWholeTextBackward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// boolean to indicate whether node is a child of an entity reference</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inEntRef</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>parent</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>inEntRef</name>
                                        =
                                        <call>
                                            <name><name>parent</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>getWholeTextBackward</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>node</name>.
                                                                            <name>getLastChild</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>buffer</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>true</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                                ||
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>CDATA_SECTION_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>((<name>TextImpl</name>)<name>node</name>).
                                                        <call>
                                                            <name>insertTextContent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>buffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>node</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// if the parent node is an entity reference node, must</comment>
                    <comment type="line">// check nodes to the left of the parent entity reference node for logically
                        adjacent
                    </comment>
                    <comment type="line">// text nodes</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>inEntRef</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getWholeTextBackward</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>parent</name>.
                                                                <name>getPreviousSibling</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>buffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>parent</name>.
                                                                <name>getParentNode</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Replaces the text of the current node and all logically-adjacent text
                * nodes with the specified text. All logically-adjacent text nodes are
                * removed including the current node unless it was the recipient of the
                * replacement text.
                *
                * @param content
                * The content of the replacing Text node.
                * @return text - The Text node created with the specified content.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Text</name>
                </type>
                <name>replaceWholeText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//if the content is null</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>content</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>content</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// remove current node</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>parent</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// check if node in the tree</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>parent</name>.
                                                            <name>removeChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// make sure we can make the replacement</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>ownerDocument</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <name>errorChecking</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>canModifyPrev</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NO_MODIFICATION_ALLOWED_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NO_MODIFICATION_ALLOWED_ERR"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// make sure we can make the replacement</comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>canModifyNext</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NO_MODIFICATION_ALLOWED_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NO_MODIFICATION_ALLOWED_ERR"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//replace the text node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Text</name>
                            </type>
                            <name>currentNode</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isReadOnly</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Text</name>
                                        </type>
                                        <name>newNode</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>ownerDocument</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>createTextNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>content</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>parent</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// check if node in the tree</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>parent</name>.
                                                            <name>insertBefore</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newNode</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>parent</name>.
                                                            <name>removeChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>currentNode</name>
                                                    =
                                                    <name>newNode</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setData</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>content</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>currentNode</name>
                                        =
                                        <name>this</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">//check logically-adjacent text nodes</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>prev</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>currentNode</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>prev</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">//If the logically-adjacent next node can be removed</comment>
                            <comment type="line">//remove it. A logically adjacent node can be removed if</comment>
                            <comment type="line">//it is a Text or CDATASection node or an EntityReference with
                            </comment>
                            <comment type="line">//Text and CDATA only children.</comment>
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>prev</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>TEXT_NODE</name>
                                        </name>
                                        )
                                        || (
                                        <call>
                                            <name><name>prev</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>CDATA_SECTION_NODE</name>
                                        </name>
                                        )
                                        || (
                                        <call>
                                            <name><name>prev</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name>hasTextOnlyChildren</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prev</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>removeChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>prev</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>prev</name>
                                                =
                                                <name>currentNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>prev</name>
                                    =
                                    <call>
                                        <name><name>prev</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">//check logically-adjacent text nodes</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>currentNode</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>next</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">//If the logically-adjacent next node can be removed</comment>
                            <comment type="line">//remove it. A logically adjacent node can be removed if</comment>
                            <comment type="line">//it is a Text or CDATASection node or an EntityReference with
                            </comment>
                            <comment type="line">//Text and CDATA only children.</comment>
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>next</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>TEXT_NODE</name>
                                        </name>
                                        )
                                        || (
                                        <call>
                                            <name><name>next</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>CDATA_SECTION_NODE</name>
                                        </name>
                                        )
                                        || (
                                        <call>
                                            <name><name>next</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name>hasTextOnlyChildren</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>next</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>removeChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>next</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>next</name>
                                                =
                                                <name>currentNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <call>
                                        <name><name>next</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>currentNode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If any EntityReference to be removed has descendants that are not
                * EntityReference, Text, or CDATASection nodes, the replaceWholeText method
                * must fail before performing any modification of the document, raising a
                * DOMException with the code NO_MODIFICATION_ALLOWED_ERR. Traverse previous
                * siblings of the node to be replaced. If a previous sibling is an
                * EntityReference node, get it's last child. If the last child was a Text
                * or CDATASection node and its previous siblings are neither a replaceable
                * EntityReference or Text or CDATASection nodes, return false. IF the last
                * child was neither Text nor CDATASection nor a replaceable EntityReference
                * Node, then return true. If the last child was a Text or CDATASection node
                * any its previous sibling was not or was an EntityReference that did not
                * contain only Text or CDATASection nodes, return false. Check this
                * recursively for EntityReference nodes.
                *
                * @param node
                * @return true - can replace text false - can't replace exception must be
                * raised
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>canModifyPrev</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>textLastChild</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>prev</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>prev</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>prev</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">//If the previous sibling was entityreference</comment>
                                        <comment type="line">//check if its content is replaceable</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>lastChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>prev</name>.
                                                                <name>getLastChild</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <comment type="line">//if the entity reference has no children</comment>
                                        <comment type="line">//return false</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>lastChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">//The replacement text of the entity reference should
                                        </comment>
                                        <comment type="line">//be either only text,cadatsections or replaceable entity
                                        </comment>
                                        <comment type="line">//reference nodes or the last child should be neither of
                                            these
                                        </comment>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>lastChild</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>short</name>
                                                        </type>
                                                        <name>lType</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>lastChild</name>.
                                                                        <name>getNodeType</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>lType</name>
                                                            ==
                                                            <name><name>Node</name>.
                                                                <name>TEXT_NODE</name>
                                                            </name>
                                                            || <name>lType</name> ==
                                                            <name><name>Node</name>.
                                                                <name>CDATA_SECTION_NODE</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>textLastChild</name>
                                                                    = true
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>lType</name>
                                                                    ==
                                                                    <name><name>Node</name>.
                                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name>canModifyPrev</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>lastChild</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <return>return <expr>false</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <comment type="line">//If the
                                                                                    EntityReference child contains
                                                                                </comment>
                                                                                <comment type="line">//only text, or
                                                                                    non-text or ends with a
                                                                                </comment>
                                                                                <comment type="line">//non-text node.
                                                                                </comment>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>textLastChild</name>
                                                                                        = true
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <comment type="line">//If the last child was
                                                                        replaceable and others are not
                                                                    </comment>
                                                                    <comment type="line">//Text or CDataSection or
                                                                        replaceable EntityRef nodes
                                                                    </comment>
                                                                    <comment type="line">//return false.</comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>textLastChild</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <return>return <expr>false</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <return>return <expr>true</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>lastChild</name>
                                                        =
                                                        <call>
                                                            <name><name>lastChild</name>.
                                                                <name>getPreviousSibling</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                                || <name>type</name> ==
                                                <name><name>Node</name>.
                                                    <name>CDATA_SECTION_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">//If the previous sibling was text or cdatasection
                                                    move to next
                                                </comment>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <comment type="line">//If the previous sibling was anything but text
                                                    or
                                                </comment>
                                                <comment type="line">//cdatasection or an entity reference, stop search
                                                    and
                                                </comment>
                                                <comment type="line">//return true</comment>
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>prev</name>
                                    =
                                    <call>
                                        <name><name>prev</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If any EntityReference to be removed has descendants that are not
                * EntityReference, Text, or CDATASection nodes, the replaceWholeText method
                * must fail before performing any modification of the document, raising a
                * DOMException with the code NO_MODIFICATION_ALLOWED_ERR. Traverse previous
                * siblings of the node to be replaced. If a previous sibling is an
                * EntityReference node, get it's last child. If the first child was a Text
                * or CDATASection node and its next siblings are neither a replaceable
                * EntityReference or Text or CDATASection nodes, return false. IF the first
                * child was neither Text nor CDATASection nor a replaceable EntityReference
                * Node, then return true. If the first child was a Text or CDATASection
                * node any its next sibling was not or was an EntityReference that did not
                * contain only Text or CDATASection nodes, return false. Check this
                * recursively for EntityReference nodes.
                *
                * @param node
                * @return true - can replace text false - can't replace exception must be
                * raised
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>canModifyNext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>textFirstChild</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>next</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>next</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">//If the previous sibling was entityreference</comment>
                                        <comment type="line">//check if its content is replaceable</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>firstChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>next</name>.
                                                                <name>getFirstChild</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <comment type="line">//if the entity reference has no children</comment>
                                        <comment type="line">//return false</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>firstChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">//The replacement text of the entity reference should
                                        </comment>
                                        <comment type="line">//be either only text,cadatsections or replaceable entity
                                        </comment>
                                        <comment type="line">//reference nodes or the last child should be neither of
                                            these
                                        </comment>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>firstChild</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>short</name>
                                                        </type>
                                                        <name>lType</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>firstChild</name>.
                                                                        <name>getNodeType</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>lType</name>
                                                            ==
                                                            <name><name>Node</name>.
                                                                <name>TEXT_NODE</name>
                                                            </name>
                                                            || <name>lType</name> ==
                                                            <name><name>Node</name>.
                                                                <name>CDATA_SECTION_NODE</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>textFirstChild</name>
                                                                    = true
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>lType</name>
                                                                    ==
                                                                    <name><name>Node</name>.
                                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name>canModifyNext</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>firstChild</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <return>return <expr>false</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <comment type="line">//If the
                                                                                    EntityReference child contains
                                                                                </comment>
                                                                                <comment type="line">//only text, or
                                                                                    non-text or ends with a
                                                                                </comment>
                                                                                <comment type="line">//non-text node.
                                                                                </comment>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>textFirstChild</name>
                                                                                        = true
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <comment type="line">//If the first child was
                                                                        replaceable text and next
                                                                    </comment>
                                                                    <comment type="line">//children are not, then return
                                                                        false
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>textFirstChild</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <return>return <expr>false</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <return>return <expr>true</expr>;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>firstChild</name>
                                                        =
                                                        <call>
                                                            <name><name>firstChild</name>.
                                                                <name>getNextSibling</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                                || <name>type</name> ==
                                                <name><name>Node</name>.
                                                    <name>CDATA_SECTION_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">//If the previous sibling was text or cdatasection
                                                    move to next
                                                </comment>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <comment type="line">//If the next sibling was anything but text or
                                                </comment>
                                                <comment type="line">//cdatasection or an entity reference, stop search
                                                    and
                                                </comment>
                                                <comment type="line">//return true</comment>
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <call>
                                        <name><name>next</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Check if an EntityReference node has Text Only child nodes
                *
                * @param node
                * @return true - Contains text only children
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>hasTextOnlyChildren</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name> =
                            <init>
                                <expr>
                                    <name>node</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>child</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>child</name>
                            =
                            <call>
                                <name><name>child</name>.
                                    <name>getFirstChild</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>child</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>child</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ENTITY_REFERENCE_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>hasTextOnlyChildren</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>child</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                !=
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                                &amp;&amp; <name>type</name> !=
                                                <name><name>Node</name>.
                                                    <name>CDATA_SECTION_NODE</name>
                                                </name>
                                                &amp;&amp; <name>type</name> !=
                                                <name><name>Node</name>.
                                                    <name>ENTITY_REFERENCE_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>child</name>
                                    =
                                    <call>
                                        <name><name>child</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * NON-DOM: Returns whether this Text is ignorable whitespace.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isIgnorableWhitespace</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>internalIsIgnorableWhitespace</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// isIgnorableWhitespace():boolean</comment>


            <comment type="line">//</comment>
            <comment type="line">// Text methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Break a text node into two sibling nodes. (Note that if the current node
                * has no parent, they won't wind up as "siblings" -- they'll both be
                * orphans.)
                *
                * @param offset
                * The offset at which to split. If offset is at the end of the
                * available data, the second node will be empty.
                *
                * @return A reference to the new node (containing data after the offset
                * point). The original node will contain data up to that point.
                *
                * @throws DOMException(INDEX_SIZE_ERR)
                * if offset is &lt;0 or &gt;length.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR)
                * if node is read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Text</name>
                </type>
                <name>splitText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isReadOnly</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>NO_MODIFICATION_ALLOWED_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"NO_MODIFICATION_ALLOWED_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt; 0 || <name>offset</name> &gt;
                                <call>
                                    <name><name>data</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INDEX_SIZE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INDEX_SIZE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// split text into two separate nodes</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Text</name>
                            </type>
                            <name>newText</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getOwnerDocument</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>createTextNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>data</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>offset</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setNodeValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>data</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>offset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// insert new text node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parentNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getParentNode</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parentNode</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>parentNode</name>.
                                                <name>insertBefore</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newText</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>nextSibling</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>newText</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// splitText(int):Text</comment>


            <comment type="javadoc">/**
                * NON-DOM (used by DOMParser): Reset data for the node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>replaceData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>data</name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * NON-DOM (used by DOMParser: Sets data to empty string.
                * Returns the value the data was set to.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>removeData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>olddata</name>=
                            <init>
                                <expr>
                                    <name>data</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>data</name>
                            = ""
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>olddata</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class TextImpl</comment>
</unit>
