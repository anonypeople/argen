<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\opti\TextImpl.java">
    <comment type="block">/*
        * Copyright 2001-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>opti</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @xerces.internal
        *
        * @author Neil Graham, IBM
        * @version $Id: TextImpl.java,v 1.4 2004/10/06 15:14:49 mrglavas Exp $
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>TextImpl</name>
        <super>
            <extends>extends
                <name>DefaultText</name>
            </extends>
        </super>
        <block>{

            <comment type="line">// Data</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fData</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>SchemaDOM</name>
                    </type>
                    <name>fSchemaDOM</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fRow</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fCol</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>TextImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>SchemaDOM</name>
                            </type>
                            <name>sDOM</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>row</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>col</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fData</name>
                            =
                            <call>
                                <name><name>str</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSchemaDOM</name>
                            =
                            <name>sDOM</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fRow</name>
                            =
                            <name>row</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCol</name>
                            =
                            <name>col</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>rawname</name>
                            = <name>prefix</name> = <name>localpart</name> = <name>uri</name> =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>nodeType</name>
                            =
                            <name><name>Node</name>.
                                <name>TEXT_NODE</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// org.w3c.dom.Node methods</comment>
            <comment type="line">//</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>fSchemaDOM</name>.
                                <name>relations</name>
                                <index>[
                                    <expr>
                                        <name>fRow</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getPreviousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCol</name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>fSchemaDOM</name>.
                                <name>relations</name>
                                <index>[
                                    <expr>
                                        <name>fRow</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr><name>fCol</name>-1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getNextSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCol</name>
                                ==
                                <name><name>fSchemaDOM</name>.
                                    <name>relations</name>
                                    <index>[
                                        <expr>
                                            <name>fRow</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                .<name>length</name>-1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>fSchemaDOM</name>.
                                <name>relations</name>
                                <index>[
                                    <expr>
                                        <name>fRow</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr><name>fCol</name>+1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// CharacterData methods</comment>

            <comment type="javadoc">/**
                * The character data of the node that implements this interface. The DOM
                * implementation may not put arbitrary limits on the amount of data
                * that may be stored in a &lt;code&gt;CharacterData&lt;/code&gt; node. However,
                * implementation limits may mean that the entirety of a node's data may
                * not fit into a single &lt;code&gt;DOMString&lt;/code&gt;. In such cases, the user
                * may call &lt;code&gt;substringData&lt;/code&gt; to retrieve the data in
                * appropriately sized pieces.
                * @exception DOMException
                * NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
                * @exception DOMException
                * DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                * fit in a &lt;code&gt;DOMString&lt;/code&gt; variable on the implementation
                * platform.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getData</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <name>fData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The number of 16-bit units that are available through &lt;code&gt;data&lt;/code&gt;
                * and the &lt;code&gt;substringData&lt;/code&gt; method below. This may have the
                * value zero, i.e., &lt;code&gt;CharacterData&lt;/code&gt; nodes may be empty.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fData</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>0</expr>;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>fData</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Extracts a range of data from the node.
                * @param offset Start offset of substring to extract.
                * @param count The number of 16-bit units to extract.
                * @return The specified substring. If the sum of &lt;code&gt;offset&lt;/code&gt; and
                * &lt;code&gt;count&lt;/code&gt; exceeds the &lt;code&gt;length&lt;/code&gt;, then all 16-bit
                * units to the end of the data are returned.
                * @exception DOMException
                * INDEX_SIZE_ERR: Raised if the specified &lt;code&gt;offset&lt;/code&gt; is
                * negative or greater than the number of 16-bit units in
                * &lt;code&gt;data&lt;/code&gt;, or if the specified &lt;code&gt;count&lt;/code&gt; is
                * negative.
                * &lt;br&gt;DOMSTRING_SIZE_ERR: Raised if the specified range of text does
                * not fit into a &lt;code&gt;DOMString&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>substringData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fData</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                &lt; 0 || <name>offset</name> &lt; 0 || <name>offset</name> &gt;
                                <call>
                                    <name><name>fData</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>DOMException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>DOMException</name>.
                                                        <name>INDEX_SIZE_ERR</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"parameter error"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>offset</name>+<name>count</name> &gt;=
                                <call>
                                    <name><name>fData</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fData</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>fData</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>offset</name>+
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
