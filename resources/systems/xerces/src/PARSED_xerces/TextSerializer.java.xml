<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\TextSerializer.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <comment type="line">// Sep 14, 2000:</comment>
    <comment type="line">// Fixed serializer to report IO exception directly, instead at</comment>
    <comment type="line">// the end of document processing.</comment>
    <comment type="line">// Reported by Patrick Higgins &lt;phiggins@transzap.com&gt;</comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Element</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>AttributeList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>Attributes</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Implements a text serializer supporting both DOM and SAX
        * serializing. For usage instructions see {@link Serializer}.
        * &lt;p&gt;
        * If an output stream is used, the encoding is taken from the
        * output format (defaults to &lt;tt&gt;UTF-8&lt;/tt&gt;). If a writer is
        * used, make sure the writer uses the same encoding (if applies)
        * as specified in the output format.
        * &lt;p&gt;
        * The serializer supports both DOM and SAX. DOM serializing is done
        * by calling {@link #serialize} and SAX serializing is done by firing
        * SAX events and using the serializer as a document handler.
        * &lt;p&gt;
        * If an I/O exception occurs while serializing, the serializer
        * will not throw an exception directly, but only throw it
        * at the end of serializing (either DOM or SAX's {@link
        * org.xml.sax.DocumentHandler#endDocument}.
        *
        *
        * @version $Revision: 1.14 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        * @see Serializer
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>TextSerializer</name>
        <super>
            <extends>extends
                <name>BaseMarkupSerializer</name>
            </extends>
        </super>
        <block>{


            <comment type="javadoc">/**
                * Constructs a new serializer. The serializer cannot be used without
                * calling {@link #setOutputCharStream} or {@link #setOutputByteStream}
                * first.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>TextSerializer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>OutputFormat</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Method</name>.
                                                                <name>TEXT</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setOutputFormat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>format</name>
                                            != <name>null</name> ? <name>format</name> : new
                                            <call>
                                                <name>OutputFormat</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Method</name>.
                                                                <name>TEXT</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">//-----------------------------------------//</comment>
            <comment type="line">// SAX content handler serializing methods //</comment>
            <comment type="line">//-----------------------------------------//</comment>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rawName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Attributes</name>
                            </type>
                            <name>attrs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SAXException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>startElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>rawName</name>
                                            == <name>null</name> ? <name>localName</name> :
                                            <name>rawName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rawName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SAXException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>endElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>rawName</name>
                                            == <name>null</name> ? <name>localName</name> :
                                            <name>rawName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">//------------------------------------------//</comment>
            <comment type="line">// SAX document handler serializing methods //</comment>
            <comment type="line">//------------------------------000---------//</comment>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AttributeList</name>
                            </type>
                            <name>attrs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SAXException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>state</name>
                                    =
                                    <call>
                                        <name>getElementState</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isDocumentState</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// If this is the root element handle it differently.
                                        </comment>
                                        <comment type="line">// If the first root element in the document, serialize
                                        </comment>
                                        <comment type="line">// the document's DOCTYPE. Space preserving defaults
                                        </comment>
                                        <comment type="line">// to that of the output format.</comment>
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>_started</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>startDocument</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tagName</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// For any other element, if first in parent, then</comment>
                            <comment type="line">// use the parnet's space preserving.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>preserveSpace</name>
                                    =
                                    <name><name>state</name>.
                                        <name>preserveSpace</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Do not change the current element state yet.</comment>
                            <comment type="line">// This only happens in endElement().</comment>

                            <comment type="line">// Ignore all other attributes of the element, only printing</comment>
                            <comment type="line">// its contents.</comment>

                            <comment type="line">// Now it's time to enter a new element state</comment>
                            <comment type="line">// with the tag name and space preserving.</comment>
                            <comment type="line">// We still do not change the curent element state.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>state</name>
                                    =
                                    <call>
                                        <name>enterElementState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>preserveSpace</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SAXException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>except</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SAXException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>endElementIO</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SAXException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>except</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endElementIO</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Works much like content() with additions for closing</comment>
                    <comment type="line">// an element. Note the different checks for the closed</comment>
                    <comment type="line">// element's state and the parent element's state.</comment>
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <call>
                                <name>getElementState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Leave the element state and update that of the parent</comment>
                    <comment type="line">// (if we're not root) to not empty and after element.</comment>
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <call>
                                <name>leaveElementState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>state</name>.
                                <name>afterElement</name>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>state</name>.
                                <name>empty</name>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isDocumentState</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_printer</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>processingInstructionIO</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>code</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>comment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>comment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>characters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SAXException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>state</name>
                                    =
                                    <call>
                                        <name>content</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>state</name>.
                                        <name>doCData</name>
                                    </name>
                                    =
                                    <name><name>state</name>.
                                        <name>inCData</name>
                                    </name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>printText</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SAXException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>except</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>characters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>unescaped</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <call>
                                <name>content</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>state</name>.
                                <name>doCData</name>
                            </name>
                            =
                            <name><name>state</name>.
                                <name>inCData</name>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>printText</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">//------------------------------------------//</comment>
            <comment type="line">// Generic node serializing methods methods //</comment>
            <comment type="line">//------------------------------------------//</comment>


            <comment type="javadoc">/**
                * Called to serialize the document's DOCTYPE by the root element.
                * &lt;p&gt;
                * This method will check if it has not been called before ({@link #_started}),
                * will serialize the document type declaration, and will serialize all
                * pre-root comments and PIs that were accumulated in the document
                * (see {@link #serializePreRoot}). Pre-root will be serialized even if
                * this is not the first root element of the document.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>startDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootTagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Required to stop processing the DTD, even though the DTD</comment>
                    <comment type="line">// is not printed.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_printer</name>.
                                    <name>leaveDTD</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>_started</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Always serialize these, even if not te first root element.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>serializePreRoot</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called to serialize a DOM element. Equivalent to calling {@link
                * #startElement}, {@link #endElement} and serializing everything
                * inbetween, but better optimized.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>serializeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>elem</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>tagName</name>
                            =
                            <call>
                                <name><name>elem</name>.
                                    <name>getTagName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <call>
                                <name>getElementState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isDocumentState</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If this is the root element handle it differently.</comment>
                                <comment type="line">// If the first root element in the document, serialize</comment>
                                <comment type="line">// the document's DOCTYPE. Space preserving defaults</comment>
                                <comment type="line">// to that of the output format.</comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>_started</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>startDocument</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tagName</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// For any other element, if first in parent, then</comment>
                    <comment type="line">// use the parnet's space preserving.</comment>
                    <expr_stmt>
                        <expr>
                            <name>preserveSpace</name>
                            =
                            <name><name>state</name>.
                                <name>preserveSpace</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Do not change the current element state yet.</comment>
                    <comment type="line">// This only happens in endElement().</comment>

                    <comment type="line">// Ignore all other attributes of the element, only printing</comment>
                    <comment type="line">// its contents.</comment>

                    <comment type="line">// If element has children, then serialize them, otherwise</comment>
                    <comment type="line">// serialize en empty tag.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>elem</name>.
                                        <name>hasChildNodes</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Enter an element state, and serialize the children</comment>
                                <comment type="line">// one by one. Finally, end the element.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>state</name>
                                        =
                                        <call>
                                            <name>enterElementState</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tagName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>preserveSpace</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>child</name>
                                        =
                                        <call>
                                            <name><name>elem</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>child</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>serializeNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>child</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>child</name>
                                                =
                                                <call>
                                                    <name><name>child</name>.
                                                        <name>getNextSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>endElementIO</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tagName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isDocumentState</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// After element but parent element is no longer
                                                empty.
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>state</name>.
                                                        <name>afterElement</name>
                                                    </name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>state</name>.
                                                        <name>empty</name>
                                                    </name>
                                                    = false
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Serialize the DOM node. This method is unique to the Text serializer.
                *
                * @param node The node to serialize
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>serializeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Based on the node type call the suitable SAX handler.</comment>
                    <comment type="line">// Only comments entities and documents which are not</comment>
                    <comment type="line">// handled by SAX are serialized directly.</comment>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>node</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>TEXT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>text</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <expr_stmt>
                                        <expr>
                                            <name>text</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>text</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>characters</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>node</name>.
                                                                            <name>getNodeValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>CDATA_SECTION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>text</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <expr_stmt>
                                        <expr>
                                            <name>text</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>text</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>characters</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>node</name>.
                                                                            <name>getNodeValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>COMMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_REFERENCE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// Ignore.</comment>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>PROCESSING_INSTRUCTION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ELEMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>serializeElement</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Element</name>)
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// !!! Fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>child</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <comment type="line">// By definition this will happen if the node is a document,
                                    </comment>
                                    <comment type="line">// document fragment, etc. Just serialize its contents. It
                                        will
                                    </comment>
                                    <comment type="line">// work well for other nodes that we do not know how to
                                        serialize.
                                    </comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>child</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getFirstChild</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <while>while
                                        <condition>(
                                            <expr>
                                                <name>child</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>serializeNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>child</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>child</name>
                                                    =
                                                    <call>
                                                        <name><name>child</name>.
                                                            <name>getNextSibling</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </while>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <default>default:
                                <break>break;</break>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>ElementState</name>
                </type>
                <name>content</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ElementState</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <call>
                                <name>getElementState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isDocumentState</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If this is the first content in the element,</comment>
                                <comment type="line">// change the state to not-empty.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>state</name>.
                                                <name>empty</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>state</name>.
                                                    <name>empty</name>
                                                </name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <comment type="line">// Except for one content type, all of them</comment>
                                <comment type="line">// are not last element. That one content</comment>
                                <comment type="line">// type will take care of itself.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>state</name>.
                                            <name>afterElement</name>
                                        </name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>state</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>String</name>
                </type>
                <name>getEntityRef</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            }
        </block>
    </class>


</unit>
