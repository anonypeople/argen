<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xpath\regex\Token.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004,2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xpath</name>.
            <name>regex</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class represents a node in parse tree.
        *
        * @xerces.internal
        *
        * @version $Id: Token.java,v 1.10 2005/03/22 03:26:24 mrglavas Exp $
        */
    </comment>
    <class>class <name>Token</name>
        <super>
            <implements>implements <name>java</name>.<name>io</name>.
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>4049923761862293040L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>COUNTTOKENS</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>tokens</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Literal char</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DOT</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// .</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CONCAT</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// XY</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNION</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X|Y|Z</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSURE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X*</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>RANGE</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// [a-zA-Z] etc.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NRANGE</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// [^a-zA-Z] etc.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>PAREN</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (X) or (?:X)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EMPTY</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ANCHOR</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// ^ $ \b \B \&lt; \&gt; \A \Z \z</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NONGREEDYCLOSURE</name> =
                    <init>
                        <expr>9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// *? +?</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STRING</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// strings</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BACKREFERENCE</name> =
                    <init>
                        <expr>12</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// back references</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKAHEAD</name> =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?=...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NEGATIVELOOKAHEAD</name> =
                    <init>
                        <expr>21</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?!...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKBEHIND</name> =
                    <init>
                        <expr>22</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&lt;=...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NEGATIVELOOKBEHIND</name> =
                    <init>
                        <expr>23</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&lt;!...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INDEPENDENT</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&gt;...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MODIFIERGROUP</name> =
                    <init>
                        <expr>25</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?ims-ims:...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CONDITION</name> =
                    <init>
                        <expr>26</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?(...)yes|no)</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UTF16_MAX</name> =
                    <init>
                        <expr>0x10ffff</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>type</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_dot</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_0to9</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_wordchars</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_not_0to9</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_not_wordchars</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_spaces</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_not_spaces</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_empty</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_linebeginning</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_linebeginning2</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_lineend</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_stringbeginning</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_stringend</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_stringend2</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_wordedge</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_not_wordedge</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_wordbeginning</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_wordend</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_empty</name>
                        </name>
                        = new
                        <call>
                            <name>Token</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_linebeginning</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'^'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_linebeginning2</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'@'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_lineend</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'$'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_stringbeginning</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'A'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_stringend</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'z'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_stringend2</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'Z'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_wordedge</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'b'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_not_wordedge</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'B'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_wordbeginning</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'&lt;'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_wordend</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createAnchor</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'&gt;'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_dot</name>
                        </name>
                        = new
                        <call>
                            <name>Token</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>DOT</name>
                                        </name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_0to9</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createRange</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_0to9</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'0'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'9'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_wordchars</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createRange</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_wordchars</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'0'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'9'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_wordchars</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'A'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'Z'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_wordchars</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'_'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'_'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_wordchars</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'a'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'z'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_spaces</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>createRange</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_spaces</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\t'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'\t'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_spaces</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\n'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'\n'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_spaces</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\f'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'\f'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_spaces</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\r'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'\r'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>Token</name>.<name>token_spaces</name>.
                                <name>addRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>' '</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>' '</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_not_0to9</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>complementRanges</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>token_0to9</name>
                                        </name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_not_wordchars</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>complementRanges</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>token_wordchars</name>
                                        </name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name><name>Token</name>.
                            <name>token_not_spaces</name>
                        </name>
                        =
                        <call>
                            <name><name>Token</name>.
                                <name>complementRanges</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>token_spaces</name>
                                        </name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ParenToken</name>
                    </name>
                </type>
                <name>createLook</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ParenToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>child</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ParenToken</name>
                    </name>
                </type>
                <name>createParen</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pnumber</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ParenToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>PAREN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>child</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pnumber</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ClosureToken</name>
                    </name>
                </type>
                <name>createClosure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ClosureToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>CLOSURE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ClosureToken</name>
                    </name>
                </type>
                <name>createNGClosure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ClosureToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>NONGREEDYCLOSURE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ConcatToken</name>
                    </name>
                </type>
                <name>createConcat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ConcatToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tok2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>UnionToken</name>
                    </name>
                </type>
                <name>createConcat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>UnionToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>CONCAT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// *** It is not a bug.</comment>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>UnionToken</name>
                    </name>
                </type>
                <name>createUnion</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>UnionToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>UNION</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>Token</name>
                </type>
                <name>createEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_empty</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>RangeToken</name>
                </type>
                <name>createRange</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>RangeToken</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>RANGE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>RangeToken</name>
                </type>
                <name>createNRange</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>RangeToken</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>NRANGE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>CharToken</name>
                    </name>
                </type>
                <name>createChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>CharToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>CHAR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>private</specifier>
                    <name><name>Token</name>.
                        <name>CharToken</name>
                    </name>
                </type>
                <name>createAnchor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>CharToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>ANCHOR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>StringToken</name>
                    </name>
                </type>
                <name>createBackReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refno</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>StringToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>BACKREFERENCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>refno</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>StringToken</name>
                    </name>
                </type>
                <name>createString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>StringToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>STRING</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ModifierToken</name>
                    </name>
                </type>
                <name>createModifierGroup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>add</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>mask</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ModifierToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>child</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>add</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mask</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name><name>Token</name>.
                        <name>ConditionToken</name>
                    </name>
                </type>
                <name>createCondition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refno</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>condition</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>yespat</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>nopat</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>COUNTTOKENS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>tokens</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Token</name>.
                                    <name>ConditionToken</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>refno</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>condition</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>yespat</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>nopat</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <specifier>protected</specifier>
                <name>Token</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>type</name>
                            </name>
                            =
                            <name>type</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * A number of children.
                */
            </comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>getChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>addChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// for RANGE or NRANGE</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>addRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>sortRanges</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>compactRanges</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>mergeRanges</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>subtractRanges</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>intersectRanges</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Not supported."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>Token</name>
                </type>
                <name>complementRanges</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>RangeToken</name>.
                                    <name>complementRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <name>void</name>
                </type>
                <name>setMin</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>min</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// for CLOSURE</comment>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>setMax</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// for CLOSURE</comment>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getMin</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for CLOSURE</comment>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getMax</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for CLOSURE</comment>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getReferenceNumber</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for STRING</comment>
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>String</name>
                </type>
                <name>getString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for STRING</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getParenNumber</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getChar</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>type</name>
                            </name>
                            ==
                            <name><name>Token</name>.
                                <name>DOT</name>
                            </name>
                            ? "." : ""
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * How many characters are needed?
                */
            </comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getMinLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>type</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CONCAT</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>sum</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>sum</name>
                                            +=
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getMinLength</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <return>return
                                    <expr>
                                        <name>sum</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CONDITION</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UNION</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getMinLength</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>1</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>min</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>getChild</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getMinLength</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>min</name>
                                                    &lt;
                                                    <name>ret</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        =
                                                        <name>min</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <name>ret</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CLOSURE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NONGREEDYCLOSURE</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getMin</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getMin</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                *
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getMinLength</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <return>return <expr>0</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>EMPTY</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>ANCHOR</name>
                                </expr>
                                :
                                <return>return <expr>0</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>DOT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>CHAR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>RANGE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NRANGE</name>
                                </expr>
                                :
                                <return>return <expr>1</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>INDEPENDENT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>PAREN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>MODIFIERGROUP</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getMinLength</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>BACKREFERENCE</name>
                                </expr>
                                :
                                <return>return <expr>0</expr>;
                                </return>
                                <comment type="line">// *******</comment>

                            </case>
                            <case>case
                                <expr>
                                    <name>STRING</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>length</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKBEHIND</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKBEHIND</name>
                                </expr>
                                :
                                <return>return <expr>0</expr>;
                                </return>
                                <comment type="line">// ***** Really?</comment>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Token#getMinLength(): Invalid Type: "+
                                                        <name><name>this</name>.
                                                            <name>type</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getMaxLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>type</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CONCAT</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>sum</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>d</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>getChild</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getMaxLength</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>d</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>-1</expr>;
                                                </return>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>sum</name>
                                                +=
                                                <name>d</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <name>sum</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CONDITION</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UNION</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getMaxLength</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>1</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>ret</name>
                                            &gt;= 0 &amp;&amp; <name>i</name> &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>max</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>getChild</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getMaxLength</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>max</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// infinity</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = -1
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>max</name>
                                                    &gt;
                                                    <name>ret</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        =
                                                        <name>max</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <name>ret</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CLOSURE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NONGREEDYCLOSURE</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getMax</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <comment type="line">// When this.child.getMaxLength() &lt; 0,</comment>
                                        <comment type="line">// this returns minus value</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getMax</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                *
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getMaxLength</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <return>return <expr>-1</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>EMPTY</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>ANCHOR</name>
                                </expr>
                                :
                                <return>return <expr>0</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CHAR</name>
                                </expr>
                                :
                                <return>return <expr>1</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>DOT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>RANGE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NRANGE</name>
                                </expr>
                                :
                                <return>return <expr>2</expr>;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>INDEPENDENT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>PAREN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>MODIFIERGROUP</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getMaxLength</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>BACKREFERENCE</name>
                                </expr>
                                :
                                <return>return <expr>-1</expr>;
                                </return>
                                <comment type="line">// ******</comment>

                            </case>
                            <case>case
                                <expr>
                                    <name>STRING</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>length</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKBEHIND</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKBEHIND</name>
                                </expr>
                                :
                                <return>return <expr>0</expr>;
                                </return>
                                <comment type="line">// ***** Really?</comment>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Token#getMaxLength(): Invalid Type: "+
                                                        <name><name>this</name>.
                                                            <name>type</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>FC_CONTINUE</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>FC_TERMINAL</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>FC_ANY</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>options</name> &amp; <name>flag</name>) ==
                            <name>flag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>analyzeFirstCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>type</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CONCAT</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret</name> =
                                        <init>
                                            <expr>
                                                <name>FC_CONTINUE</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ret</name> =
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>analyzeFirstCharacter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                ) !=
                                                <name>FC_CONTINUE</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <break>break;</break>
                                        </then>
                                    </if>
                                </for>
                                <return>return
                                    <expr>
                                        <name>ret</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>UNION</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>FC_CONTINUE</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <comment type="block">/*
                                    * a|b|c -&gt; FC_TERMINAL
                                    * a|.|c -&gt; FC_ANY
                                    * a|b| -&gt; FC_CONTINUE
                                    */
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret2</name> =
                                        <init>
                                            <expr>
                                                <name>FC_CONTINUE</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>hasEmpty</name> =
                                        <init>
                                            <expr>false</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret2</name>
                                                =
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>analyzeFirstCharacter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ret2</name>
                                                    ==
                                                    <name>FC_ANY</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <break>break;</break>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>ret2</name>
                                                            ==
                                                            <name>FC_CONTINUE</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>hasEmpty</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <name>hasEmpty</name>
                                        ? <name>FC_CONTINUE</name> :
                                        <name>ret2</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CONDITION</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret3</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>analyzeFirstCharacter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>FC_CONTINUE</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ret3</name>
                                            ==
                                            <name>FC_ANY</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>ret3</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ret4</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>analyzeFirstCharacter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ret4</name>
                                            ==
                                            <name>FC_ANY</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>ret4</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>ret3</name>
                                        == <name>FC_CONTINUE</name> || <name>ret4</name> == <name>FC_CONTINUE</name> ? <name>
                                        FC_CONTINUE
                                    </name> :
                                        <name>FC_TERMINAL</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CLOSURE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NONGREEDYCLOSURE</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>analyzeFirstCharacter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>options</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>FC_CONTINUE</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>EMPTY</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>ANCHOR</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>FC_CONTINUE</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CHAR</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ch</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChar</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                            &lt; 0x10000 &amp;&amp;
                                            <call>
                                                <name>isSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>options</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>IGNORE_CASE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>ch</name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toUpperCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>char</name>)
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>addRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ch</name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toLowerCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>char</name>)
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>addRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>FC_TERMINAL</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>DOT</name>
                                </expr>
                                :
                                <comment type="line">// ****</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>options</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>SINGLE_LINE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>FC_CONTINUE</name>
                                                </expr>
                                                ;
                                            </return>
                                            <comment type="line">// **** We can not optimize.</comment>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>FC_CONTINUE</name>
                                                </expr>
                                                ;
                                            </return>
                                            <comment type="block">/*
                                                result.addRange(0, RegularExpression.LINE_FEED-1);
                                                result.addRange(RegularExpression.LINE_FEED+1,
                                                RegularExpression.CARRIAGE_RETURN-1);
                                                result.addRange(RegularExpression.CARRIAGE_RETURN+1,
                                                RegularExpression.LINE_SEPARATOR-1);
                                                result.addRange(RegularExpression.PARAGRAPH_SEPARATOR+1, UTF16_MAX);
                                                return 1;
                                                */
                                            </comment>
                                            }
                                        </block>
                                    </else>
                                </if>

                            </case>
                            <case>case
                                <expr>
                                    <name>RANGE</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>options</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>IGNORE_CASE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>mergeRanges</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>((<name>RangeToken</name>)<name>this</name>).
                                                                    <call>
                                                                        <name>getCaseInsensitiveToken</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>mergeRanges</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <return>return
                                    <expr>
                                        <name>FC_TERMINAL</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>NRANGE</name>
                                </expr>
                                :
                                <comment type="line">// ****</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>options</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>IGNORE_CASE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>mergeRanges</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Token</name>.
                                                                            <name>complementRanges</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>((<name>RangeToken</name>)<name>
                                                                                    this</name>).
                                                                                    <call>
                                                                                        <name>getCaseInsensitiveToken
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>mergeRanges</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Token</name>.
                                                                            <name>complementRanges</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>this</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <return>return
                                    <expr>
                                        <name>FC_TERMINAL</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>INDEPENDENT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>PAREN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>analyzeFirstCharacter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>options</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>MODIFIERGROUP</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>options</name>
                                        |= ((<name>ModifierToken</name>)<name>this</name>).
                                        <call>
                                            <name>getOptions</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>options</name>
                                        &amp;= ~((<name>ModifierToken</name>)<name>this</name>).
                                        <call>
                                            <name>getOptionsMask</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>analyzeFirstCharacter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>options</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>BACKREFERENCE</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>UTF16_MAX</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// **** We can not optimize.</comment>
                                <return>return
                                    <expr>
                                        <name>FC_ANY</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>STRING</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>cha</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>charAt</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>ch2</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>isHighSurrogate</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cha</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 2
                                            &amp;&amp;
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>isLowSurrogate</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>ch2</name> =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getString</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>charAt</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            )
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>cha</name>
                                                =
                                                <call>
                                                    <name><name>REUtil</name>.
                                                        <name>composeFromSurrogates</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>cha</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>ch2</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>cha</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cha</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>cha</name>
                                            &lt; 0x10000 &amp;&amp;
                                            <call>
                                                <name>isSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>options</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RegularExpression</name>.
                                                                <name>IGNORE_CASE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>cha</name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toUpperCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>char</name>)
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>addRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>cha</name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toLowerCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>char</name>)
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>addRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>cha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>FC_TERMINAL</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKBEHIND</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKBEHIND</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>FC_CONTINUE</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Token#analyzeHeadCharacter(): Invalid Type: "+
                                                        <name><name>this</name>.
                                                            <name>type</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isShorterThan</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>tok</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <comment type="block">/*
                        int mylength;
                        if (this.type == STRING) mylength = this.getString().length();
                        else if (this.type == CHAR) mylength = this.getChar() &gt;= 0x10000 ? 2 : 1;
                        else throw new RuntimeException("Internal Error: Illegal type: "+this.type);
                        int otherlength;
                        if (tok.type == STRING) otherlength = tok.getString().length();
                        else if (tok.type == CHAR) otherlength = tok.getChar() &gt;= 0x10000 ? 2 : 1;
                        else throw new RuntimeException("Internal Error: Illegal type: "+tok.type);
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>mylength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>type</name>
                                </name>
                                ==
                                <name>STRING</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>mylength</name>
                                    =
                                    <call>
                                        <name><name>this</name>.
                                            <name>getString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>length</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Internal Error: Illegal type: "+
                                                    <name><name>this</name>.
                                                        <name>type</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>otherlength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>tok</name>.
                                    <name>type</name>
                                </name>
                                ==
                                <name>STRING</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>otherlength</name>
                                    =
                                    <call>
                                        <name><name>tok</name>.
                                            <name>getString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>length</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Internal Error: Illegal type: "+
                                                    <name><name>tok</name>.
                                                        <name>type</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>mylength</name>
                            &lt;
                            <name>otherlength</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>static</specifier>
                class <name>FixedStringContainer</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>token</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>FixedStringContainer</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>findFixedString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FixedStringContainer</name>
                            </type>
                            <name>container</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>type</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CONCAT</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Token</name>
                                        </type>
                                        <name>prevToken</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>prevOptions</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>this</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            ++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>findFixedString</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>container</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>prevToken</name>
                                                    == <name>null</name> ||
                                                    <call>
                                                        <name><name>prevToken</name>.
                                                            <name>isShorterThan</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>container</name>.
                                                                        <name>token</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>prevToken</name>
                                                            =
                                                            <name><name>container</name>.
                                                                <name>token</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>prevOptions</name>
                                                            =
                                                            <name><name>container</name>.
                                                                <name>options</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>token</name>
                                        </name>
                                        =
                                        <name>prevToken</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>options</name>
                                        </name>
                                        =
                                        <name>prevOptions</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>

                            </case>
                            <case>case
                                <expr>
                                    <name>UNION</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>CLOSURE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NONGREEDYCLOSURE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>EMPTY</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>ANCHOR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>RANGE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>DOT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NRANGE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>BACKREFERENCE</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKAHEAD</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>LOOKBEHIND</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>NEGATIVELOOKBEHIND</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>CONDITION</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>token</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CHAR</name>
                                </expr>
                                :
                                <comment type="line">// Ignore CHAR tokens.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>token</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// **</comment>
                                <return>return;</return>
                                <comment type="line">// **</comment>

                            </case>
                            <case>case
                                <expr>
                                    <name>STRING</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>token</name>
                                        </name>
                                        =
                                        <name>this</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>container</name>.
                                            <name>options</name>
                                        </name>
                                        =
                                        <name>options</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>

                            </case>
                            <case>case
                                <expr>
                                    <name>INDEPENDENT</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>PAREN</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>findFixedString</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>container</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>options</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>

                            </case>
                            <case>case
                                <expr>
                                    <name>MODIFIERGROUP</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>options</name>
                                        |= ((<name>ModifierToken</name>)<name>this</name>).
                                        <call>
                                            <name>getOptions</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>options</name>
                                        &amp;= ~((<name>ModifierToken</name>)<name>this</name>).
                                        <call>
                                            <name>getOptionsMask</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>findFixedString</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>container</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>options</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Token#findFixedString(): Invalid Type: "+
                                                        <name><name>this</name>.
                                                            <name>type</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>match</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"NFAArrow#match(): Internal error: "+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// ------------------------------------------------------</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>categories</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>categories2</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>categoryNames</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>"Cn"</expr>, <expr>"Lu"</expr>, <expr>"Ll"</expr>, <expr>"Lt"</expr>, <expr>
                                    "Lm"</expr>, <expr>"Lo"</expr>, <expr>"Mn"</expr>, <expr>"Me"</expr>, <expr>
                                    "Mc"</expr>, <expr>"Nd"</expr>,
                                <expr>"Nl"</expr>, <expr>"No"</expr>, <expr>"Zs"</expr>, <expr>"Zl"</expr>, <expr>
                                    "Zp"</expr>, <expr>"Cc"</expr>, <expr>"Cf"</expr>,
                                <expr>
                                    <name>null</name>
                                </expr>
                                , <expr>"Co"</expr>, <expr>"Cs"</expr>,
                                <expr>"Pd"</expr>, <expr>"Ps"</expr>, <expr>"Pe"</expr>, <expr>"Pc"</expr>, <expr>
                                    "Po"</expr>, <expr>"Sm"</expr>, <expr>"Sc"</expr>, <expr>"Sk"</expr>, <expr>
                                    "So"</expr>,
                                <comment type="line">// 28</comment>
                                <expr>"Pi"</expr>, <expr>"Pf"</expr>,
                                <comment type="line">// 29, 30</comment>
                                <expr>"L"</expr>, <expr>"M"</expr>, <expr>"N"</expr>, <expr>"Z"</expr>, <expr>"C"</expr>, <expr>
                                    "P"</expr>, <expr>"S"</expr>,
                                <comment type="line">// 31-37</comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Schema Rec. {Datatypes} - Punctuation</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_INIT_QUOTE</name>  =
                    <init>
                        <expr>29</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Pi - initial quote</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_FINAL_QUOTE</name> =
                    <init>
                        <expr>30</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Pf - final quote</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_LETTER</name> =
                    <init>
                        <expr>31</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_MARK</name> =
                    <init>
                        <expr>32</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_NUMBER</name> =
                    <init>
                        <expr>33</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_SEPARATOR</name> =
                    <init>
                        <expr>34</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_OTHER</name> =
                    <init>
                        <expr>35</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_PUNCTUATION</name> =
                    <init>
                        <expr>36</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR_SYMBOL</name> =
                    <init>
                        <expr>37</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//blockNames in UNICODE 3.1 that supported by XML Schema REC</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>blockNames</name> =
                    <init>
                        <expr>
                            <block>{
                                <comment type="block">/*0000..007F;*/</comment>
                                <expr>"Basic Latin"</expr>,
                                <comment type="block">/*0080..00FF;*/</comment>
                                <expr>"Latin-1 Supplement"</expr>,
                                <comment type="block">/*0100..017F;*/</comment>
                                <expr>"Latin Extended-A"</expr>,
                                <comment type="block">/*0180..024F;*/</comment>
                                <expr>"Latin Extended-B"</expr>,
                                <comment type="block">/*0250..02AF;*/</comment>
                                <expr>"IPA Extensions"</expr>,
                                <comment type="block">/*02B0..02FF;*/</comment>
                                <expr>"Spacing Modifier Letters"</expr>,
                                <comment type="block">/*0300..036F;*/</comment>
                                <expr>"Combining Diacritical Marks"</expr>,
                                <comment type="block">/*0370..03FF;*/</comment>
                                <expr>"Greek"</expr>,
                                <comment type="block">/*0400..04FF;*/</comment>
                                <expr>"Cyrillic"</expr>,
                                <comment type="block">/*0530..058F;*/</comment>
                                <expr>"Armenian"</expr>,
                                <comment type="block">/*0590..05FF;*/</comment>
                                <expr>"Hebrew"</expr>,
                                <comment type="block">/*0600..06FF;*/</comment>
                                <expr>"Arabic"</expr>,
                                <comment type="block">/*0700..074F;*/</comment>
                                <expr>"Syriac"</expr>,
                                <comment type="block">/*0780..07BF;*/</comment>
                                <expr>"Thaana"</expr>,
                                <comment type="block">/*0900..097F;*/</comment>
                                <expr>"Devanagari"</expr>,
                                <comment type="block">/*0980..09FF;*/</comment>
                                <expr>"Bengali"</expr>,
                                <comment type="block">/*0A00..0A7F;*/</comment>
                                <expr>"Gurmukhi"</expr>,
                                <comment type="block">/*0A80..0AFF;*/</comment>
                                <expr>"Gujarati"</expr>,
                                <comment type="block">/*0B00..0B7F;*/</comment>
                                <expr>"Oriya"</expr>,
                                <comment type="block">/*0B80..0BFF;*/</comment>
                                <expr>"Tamil"</expr>,
                                <comment type="block">/*0C00..0C7F;*/</comment>
                                <expr>"Telugu"</expr>,
                                <comment type="block">/*0C80..0CFF;*/</comment>
                                <expr>"Kannada"</expr>,
                                <comment type="block">/*0D00..0D7F;*/</comment>
                                <expr>"Malayalam"</expr>,
                                <comment type="block">/*0D80..0DFF;*/</comment>
                                <expr>"Sinhala"</expr>,
                                <comment type="block">/*0E00..0E7F;*/</comment>
                                <expr>"Thai"</expr>,
                                <comment type="block">/*0E80..0EFF;*/</comment>
                                <expr>"Lao"</expr>,
                                <comment type="block">/*0F00..0FFF;*/</comment>
                                <expr>"Tibetan"</expr>,
                                <comment type="block">/*1000..109F;*/</comment>
                                <expr>"Myanmar"</expr>,
                                <comment type="block">/*10A0..10FF;*/</comment>
                                <expr>"Georgian"</expr>,
                                <comment type="block">/*1100..11FF;*/</comment>
                                <expr>"Hangul Jamo"</expr>,
                                <comment type="block">/*1200..137F;*/</comment>
                                <expr>"Ethiopic"</expr>,
                                <comment type="block">/*13A0..13FF;*/</comment>
                                <expr>"Cherokee"</expr>,
                                <comment type="block">/*1400..167F;*/</comment>
                                <expr>"Unified Canadian Aboriginal Syllabics"</expr>,
                                <comment type="block">/*1680..169F;*/</comment>
                                <expr>"Ogham"</expr>,
                                <comment type="block">/*16A0..16FF;*/</comment>
                                <expr>"Runic"</expr>,
                                <comment type="block">/*1780..17FF;*/</comment>
                                <expr>"Khmer"</expr>,
                                <comment type="block">/*1800..18AF;*/</comment>
                                <expr>"Mongolian"</expr>,
                                <comment type="block">/*1E00..1EFF;*/</comment>
                                <expr>"Latin Extended Additional"</expr>,
                                <comment type="block">/*1F00..1FFF;*/</comment>
                                <expr>"Greek Extended"</expr>,
                                <comment type="block">/*2000..206F;*/</comment>
                                <expr>"General Punctuation"</expr>,
                                <comment type="block">/*2070..209F;*/</comment>
                                <expr>"Superscripts and Subscripts"</expr>,
                                <comment type="block">/*20A0..20CF;*/</comment>
                                <expr>"Currency Symbols"</expr>,
                                <comment type="block">/*20D0..20FF;*/</comment>
                                <expr>"Combining Marks for Symbols"</expr>,
                                <comment type="block">/*2100..214F;*/</comment>
                                <expr>"Letterlike Symbols"</expr>,
                                <comment type="block">/*2150..218F;*/</comment>
                                <expr>"Number Forms"</expr>,
                                <comment type="block">/*2190..21FF;*/</comment>
                                <expr>"Arrows"</expr>,
                                <comment type="block">/*2200..22FF;*/</comment>
                                <expr>"Mathematical Operators"</expr>,
                                <comment type="block">/*2300..23FF;*/</comment>
                                <expr>"Miscellaneous Technical"</expr>,
                                <comment type="block">/*2400..243F;*/</comment>
                                <expr>"Control Pictures"</expr>,
                                <comment type="block">/*2440..245F;*/</comment>
                                <expr>"Optical Character Recognition"</expr>,
                                <comment type="block">/*2460..24FF;*/</comment>
                                <expr>"Enclosed Alphanumerics"</expr>,
                                <comment type="block">/*2500..257F;*/</comment>
                                <expr>"Box Drawing"</expr>,
                                <comment type="block">/*2580..259F;*/</comment>
                                <expr>"Block Elements"</expr>,
                                <comment type="block">/*25A0..25FF;*/</comment>
                                <expr>"Geometric Shapes"</expr>,
                                <comment type="block">/*2600..26FF;*/</comment>
                                <expr>"Miscellaneous Symbols"</expr>,
                                <comment type="block">/*2700..27BF;*/</comment>
                                <expr>"Dingbats"</expr>,
                                <comment type="block">/*2800..28FF;*/</comment>
                                <expr>"Braille Patterns"</expr>,
                                <comment type="block">/*2E80..2EFF;*/</comment>
                                <expr>"CJK Radicals Supplement"</expr>,
                                <comment type="block">/*2F00..2FDF;*/</comment>
                                <expr>"Kangxi Radicals"</expr>,
                                <comment type="block">/*2FF0..2FFF;*/</comment>
                                <expr>"Ideographic Description Characters"</expr>,
                                <comment type="block">/*3000..303F;*/</comment>
                                <expr>"CJK Symbols and Punctuation"</expr>,
                                <comment type="block">/*3040..309F;*/</comment>
                                <expr>"Hiragana"</expr>,
                                <comment type="block">/*30A0..30FF;*/</comment>
                                <expr>"Katakana"</expr>,
                                <comment type="block">/*3100..312F;*/</comment>
                                <expr>"Bopomofo"</expr>,
                                <comment type="block">/*3130..318F;*/</comment>
                                <expr>"Hangul Compatibility Jamo"</expr>,
                                <comment type="block">/*3190..319F;*/</comment>
                                <expr>"Kanbun"</expr>,
                                <comment type="block">/*31A0..31BF;*/</comment>
                                <expr>"Bopomofo Extended"</expr>,
                                <comment type="block">/*3200..32FF;*/</comment>
                                <expr>"Enclosed CJK Letters and Months"</expr>,
                                <comment type="block">/*3300..33FF;*/</comment>
                                <expr>"CJK Compatibility"</expr>,
                                <comment type="block">/*3400..4DB5;*/</comment>
                                <expr>"CJK Unified Ideographs Extension A"</expr>,
                                <comment type="block">/*4E00..9FFF;*/</comment>
                                <expr>"CJK Unified Ideographs"</expr>,
                                <comment type="block">/*A000..A48F;*/</comment>
                                <expr>"Yi Syllables"</expr>,
                                <comment type="block">/*A490..A4CF;*/</comment>
                                <expr>"Yi Radicals"</expr>,
                                <comment type="block">/*AC00..D7A3;*/</comment>
                                <expr>"Hangul Syllables"</expr>,
                                <comment type="block">/*E000..F8FF;*/</comment>
                                <expr>"Private Use"</expr>,
                                <comment type="block">/*F900..FAFF;*/</comment>
                                <expr>"CJK Compatibility Ideographs"</expr>,
                                <comment type="block">/*FB00..FB4F;*/</comment>
                                <expr>"Alphabetic Presentation Forms"</expr>,
                                <comment type="block">/*FB50..FDFF;*/</comment>
                                <expr>"Arabic Presentation Forms-A"</expr>,
                                <comment type="block">/*FE20..FE2F;*/</comment>
                                <expr>"Combining Half Marks"</expr>,
                                <comment type="block">/*FE30..FE4F;*/</comment>
                                <expr>"CJK Compatibility Forms"</expr>,
                                <comment type="block">/*FE50..FE6F;*/</comment>
                                <expr>"Small Form Variants"</expr>,
                                <comment type="block">/*FE70..FEFE;*/</comment>
                                <expr>"Arabic Presentation Forms-B"</expr>,
                                <comment type="block">/*FEFF..FEFF;*/</comment>
                                <expr>"Specials"</expr>,
                                <comment type="block">/*FF00..FFEF;*/</comment>
                                <expr>"Halfwidth and Fullwidth Forms"</expr>,
                                <comment type="line">//missing Specials add manually</comment>
                                <comment type="block">/*10300..1032F;*/</comment>
                                <expr>"Old Italic"</expr>,
                                <comment type="line">// 84</comment>
                                <comment type="block">/*10330..1034F;*/</comment>
                                <expr>"Gothic"</expr>,
                                <comment type="block">/*10400..1044F;*/</comment>
                                <expr>"Deseret"</expr>,
                                <comment type="block">/*1D000..1D0FF;*/</comment>
                                <expr>"Byzantine Musical Symbols"</expr>,
                                <comment type="block">/*1D100..1D1FF;*/</comment>
                                <expr>"Musical Symbols"</expr>,
                                <comment type="block">/*1D400..1D7FF;*/</comment>
                                <expr>"Mathematical Alphanumeric Symbols"</expr>,
                                <comment type="block">/*20000..2A6D6;*/</comment>
                                <expr>"CJK Unified Ideographs Extension B"</expr>,
                                <comment type="block">/*2F800..2FA1F;*/</comment>
                                <expr>"CJK Compatibility Ideographs Supplement"</expr>,
                                <comment type="block">/*E0000..E007F;*/</comment>
                                <expr>"Tags"</expr>,
                                <comment type="line">//missing 2 private use add manually</comment>

                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//ADD THOSE MANUALLY</comment>
            <comment type="line">//F0000..FFFFD; "Private Use",</comment>
            <comment type="line">//100000..10FFFD; "Private Use"</comment>
            <comment type="line">//FFF0..FFFD; "Specials",</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>blockRanges</name> =
                    <init>
                        <expr>"\u0000\u007F\u0080\u00FF\u0100\u017F\u0180\u024F\u0250\u02AF\u02B0\u02FF\u0300\u036F"
                            +"\u0370\u03FF\u0400\u04FF\u0530\u058F\u0590\u05FF\u0600\u06FF\u0700\u074F\u0780\u07BF"
                            +"\u0900\u097F\u0980\u09FF\u0A00\u0A7F\u0A80\u0AFF\u0B00\u0B7F\u0B80\u0BFF\u0C00\u0C7F\u0C80\u0CFF"
                            +"\u0D00\u0D7F\u0D80\u0DFF\u0E00\u0E7F\u0E80\u0EFF\u0F00\u0FFF\u1000\u109F\u10A0\u10FF\u1100\u11FF"
                            +"\u1200\u137F\u13A0\u13FF\u1400\u167F\u1680\u169F\u16A0\u16FF\u1780\u17FF\u1800\u18AF\u1E00\u1EFF"
                            +"\u1F00\u1FFF\u2000\u206F\u2070\u209F\u20A0\u20CF\u20D0\u20FF\u2100\u214F\u2150\u218F\u2190\u21FF\u2200\u22FF"
                            +"\u2300\u23FF\u2400\u243F\u2440\u245F\u2460\u24FF\u2500\u257F\u2580\u259F\u25A0\u25FF\u2600\u26FF\u2700\u27BF"
                            +"\u2800\u28FF\u2E80\u2EFF\u2F00\u2FDF\u2FF0\u2FFF\u3000\u303F\u3040\u309F\u30A0\u30FF\u3100\u312F\u3130\u318F"
                            +"\u3190\u319F\u31A0\u31BF\u3200\u32FF\u3300\u33FF\u3400\u4DB5\u4E00\u9FFF\uA000\uA48F\uA490\uA4CF"
                            +"\uAC00\uD7A3\uE000\uF8FF\uF900\uFAFF\uFB00\uFB4F\uFB50\uFDFF"
                            +"\uFE20\uFE2F\uFE30\uFE4F\uFE50\uFE6F\uFE70\uFEFE\uFEFF\uFEFF\uFF00\uFFEF"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>nonBMPBlockRanges</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>0x10300</expr>, <expr>0x1032F</expr>,
                                <comment type="line">// 84</comment>
                                <expr>0x10330</expr>, <expr>0x1034F</expr>,
                                <expr>0x10400</expr>, <expr>0x1044F</expr>,
                                <expr>0x1D000</expr>, <expr>0x1D0FF</expr>,
                                <expr>0x1D100</expr>, <expr>0x1D1FF</expr>,
                                <expr>0x1D400</expr>, <expr>0x1D7FF</expr>,
                                <expr>0x20000</expr>, <expr>0x2A6D6</expr>,
                                <expr>0x2F800</expr>, <expr>0x2FA1F</expr>,
                                <expr>0xE0000</expr>,
                                <expr>0xE007F</expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NONBMP_BLOCK_START</name> =
                    <init>
                        <expr>84</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>getRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>positive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Token</name>.<name>categories</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <synchronized>synchronized (
                                    <expr>
                                        <name><name>Token</name>.
                                            <name>categories</name>
                                        </name>
                                    </expr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>ranges</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>Token</name>
                                                            <index>[
                                                                <expr>
                                                                    <name><name>Token</name>.<name>categoryNames</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name><name>ranges</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>i</name>
                                                    ++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>ranges</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>type</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt; 0x10000
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>i</name>
                                                    ++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>type</name>
                                                        =
                                                        <call>
                                                            <name><name>Character</name>.
                                                                <name>getType</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>char</name>)
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>type</name>
                                                            ==
                                                            <name><name>Character</name>.
                                                                <name>START_PUNCTUATION</name>
                                                            </name>
                                                            ||
                                                            <name>type</name>
                                                            ==
                                                            <name><name>Character</name>.
                                                                <name>END_PUNCTUATION</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">//build table of Pi values</comment>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        == 0x00AB || <name>i</name> == 0x2018 || <name>
                                                                        i
                                                                    </name> == 0x201B || <name>i</name> == 0x201C ||
                                                                        <name>i</name>
                                                                        == 0x201F || <name>i</name> == 0x2039
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>type</name>
                                                                                =
                                                                                <name>CHAR_INIT_QUOTE</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <comment type="line">//build table of Pf values</comment>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        == 0x00BB || <name>i</name> == 0x2019 || <name>
                                                                        i
                                                                    </name> == 0x201D || <name>i</name> == 0x203A
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>type</name>
                                                                                =
                                                                                <name>CHAR_FINAL_QUOTE</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>ranges</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>type</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .
                                                        <call>
                                                            <name>addRange</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <switch>switch
                                                    <condition>(
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>UPPERCASE_LETTER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>LOWERCASE_LETTER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>TITLECASE_LETTER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>MODIFIER_LETTER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>OTHER_LETTER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_LETTER</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>NON_SPACING_MARK</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>COMBINING_SPACING_MARK</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>ENCLOSING_MARK</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_MARK</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>DECIMAL_DIGIT_NUMBER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>LETTER_NUMBER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>OTHER_NUMBER</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_NUMBER</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>SPACE_SEPARATOR</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>LINE_SEPARATOR</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>PARAGRAPH_SEPARATOR</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_SEPARATOR</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>CONTROL</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>FORMAT</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>SURROGATE</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>PRIVATE_USE</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>UNASSIGNED</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_OTHER</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>CONNECTOR_PUNCTUATION</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>DASH_PUNCTUATION</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>START_PUNCTUATION</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>END_PUNCTUATION</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name>CHAR_INIT_QUOTE</name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name>CHAR_FINAL_QUOTE</name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>OTHER_PUNCTUATION</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_PUNCTUATION</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>MATH_SYMBOL</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>CURRENCY_SYMBOL</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>MODIFIER_SYMBOL</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                        </case>
                                                        <case>case
                                                            <expr>
                                                                <name><name>Character</name>.
                                                                    <name>OTHER_SYMBOL</name>
                                                                </name>
                                                            </expr>
                                                            :
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>type</name>
                                                                    =
                                                                    <name>CHAR_SYMBOL</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <break>break;</break>
                                                        </case>
                                                        <default>default:
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name>RuntimeException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    "org.apache.xerces.utils.regex.Token#getRange():
                                                                                    Unknown Unicode category: "+
                                                                                    <name>type</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </default>
                                                        }
                                                    </block>
                                                </switch>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>ranges</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>type</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .
                                                        <call>
                                                            <name>addRange</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        <comment type="line">// for all characters</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ranges</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>Character</name>.
                                                                <name>UNASSIGNED</name>
                                                            </name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>addRange</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0x10000</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>Token</name>.
                                                                    <name>UTF16_MAX</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name><name>ranges</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>i</name>
                                                    ++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>Token</name>.
                                                                <name>categoryNames</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        ==
                                                                        <name><name>Character</name>.
                                                                            <name>UNASSIGNED</name>
                                                                        </name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <comment type="line">// Unassigned</comment>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>
                                                                                    <name>ranges</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                .
                                                                                <call>
                                                                                    <name>addRange</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>0x10000</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>Token</name>
                                                                                                    .
                                                                                                    <name>UTF16_MAX
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Token</name>.<name>categories</name>.
                                                                            <name>put</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Token</name>.
                                                                                        <name>categoryNames</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>ranges</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Token</name>.<name>
                                                                            categories2</name>.
                                                                            <name>put</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Token</name>.
                                                                                        <name>categoryNames</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>Token</name>.
                                                                                            <name>complementRanges
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        <name>ranges
                                                                                                        </name>
                                                                                                        <index>[
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    i
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                            ]
                                                                                                        </index>
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        <comment type="line">//REVISIT: do we really need to support block names as in
                                            Unicode 3.1
                                        </comment>
                                        <comment type="line">// or we can just create all the names in IsBLOCKNAME
                                            format (XML Schema REC)?
                                        </comment>
                                        <comment type="line">//</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>StringBuffer</name>
                                                </type>
                                                <name>buffer</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>StringBuffer</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>50</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name><name>Token</name>.<name>blockNames</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>i</name>
                                                    ++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>Token</name>
                                                        </type>
                                                        <name>r1</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>createRange</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>location</name>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>i</name>
                                                            &lt;
                                                            <name>NONBMP_BLOCK_START</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>location</name>
                                                                    = <name>i</name>*2
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>rstart</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>Token</name>.<name>
                                                                                    blockRanges</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>location</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>rend</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>Token</name>.<name>
                                                                                    blockRanges</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>location</name>+1
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <comment type="line">//DEBUGING</comment>
                                                            <comment type="line">//System.out.println(n+" "
                                                                +Integer.toHexString(rstart)
                                                            </comment>
                                                            <comment type="line">// +"-"+ Integer.toHexString(rend));
                                                            </comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>r1</name>.
                                                                            <name>addRange</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>rstart</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>rend</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>location</name>
                                                                    = (<name>i</name> - <name>NONBMP_BLOCK_START</name>)
                                                                    * 2
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>r1</name>.
                                                                            <name>addRange</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Token</name>.
                                                                                        <name>nonBMPBlockRanges</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>location</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Token</name>.
                                                                                        <name>nonBMPBlockRanges</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>location</name>
                                                                                                + 1
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>String</name>
                                                        </type>
                                                        <name>n</name> =
                                                        <init>
                                                            <expr>
                                                                <name><name>Token</name>.
                                                                    <name>blockNames</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>n</name>.
                                                                    <name>equals</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Specials"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>r1</name>.
                                                                        <name>addRange</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0xfff0</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>0xfffd</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                </if>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>n</name>.
                                                                    <name>equals</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Private Use"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>r1</name>.
                                                                            <name>addRange</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>0xF0000</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>0xFFFFD</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>r1</name>.
                                                                            <name>addRange</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>0x100000</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>0x10FFFD</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.<name>categories</name>.
                                                                <name>put</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>n</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>r1</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.<name>categories2</name>.
                                                                <name>put</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>n</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Token</name>.
                                                                                <name>complementRanges</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>r1</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>setLength</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Is"</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>n</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>' '</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &gt;= 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <for>for (
                                                                <init>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>ci</name> =
                                                                        <init>
                                                                            <expr>0</expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </init>
                                                                <condition>
                                                                    <expr>
                                                                        <name>ci</name>
                                                                        &lt;
                                                                        <call>
                                                                            <name><name>n</name>.
                                                                                <name>length</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </condition>
                                                                <incr>
                                                                    <expr>
                                                                        <name>ci</name>
                                                                        ++
                                                                    </expr>
                                                                </incr>
                                                                )
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>n</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>ci</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            != ' '
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>buffer</name>.
                                                                                        <name>append</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>(<name>char</name>)
                                                                                                <call>
                                                                                                    <name><name>n</name>
                                                                                                        .
                                                                                                        <name>charAt
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    ci
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </then>
                                                                </if>
                                                            </for>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>buffer</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>n</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>setAlias</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>buffer</name>.
                                                                                <name>toString</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>n</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>

                                        <comment type="line">// TR#18 1.2</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ASSIGNED"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"Cn"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"UNASSIGNED"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"Cn"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>all</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>all</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>Token</name>.
                                                                    <name>UTF16_MAX</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ALL"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>all</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ALL"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>all</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ASSIGNED"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"UNASSIGNED"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ALL"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isalpha</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isalpha</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name><name>Character</name>.
                                                                                <name>UPPERCASE_LETTER</name>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Lu</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isalpha</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name><name>Character</name>.
                                                                                <name>LOWERCASE_LETTER</name>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Ll</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isalpha</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name><name>Character</name>.
                                                                                <name>OTHER_LETTER</name>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Lo</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlpha"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isalpha</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlpha"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isalpha</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlpha"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isalnum</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isalnum</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>isalpha</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Lu Ll Lo</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isalnum</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name><name>Character</name>.
                                                                                <name>DECIMAL_DIGIT_NUMBER</name>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Nd</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlnum"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isalnum</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlnum"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isalnum</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsAlnum"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isspace</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isspace</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>Token</name>.
                                                                    <name>token_spaces</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isspace</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>CHAR_SEPARATOR</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Z</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsSpace"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isspace</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsSpace"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isspace</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsSpace"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isword</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isword</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>isalnum</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Lu Ll Lo Nd</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isword</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'_'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'_'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsWord"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isword</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsWord"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isword</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsWord"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isascii</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isascii</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>127</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsASCII"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isascii</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsASCII"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isascii</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsASCII"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isnotgraph</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isnotgraph</name>.
                                                        <name>mergeRanges</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>ranges</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>CHAR_OTHER</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isnotgraph</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>' '</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>' '</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsGraph"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isnotgraph</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsGraph"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isnotgraph</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsGraph"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Token</name>
                                                </type>
                                                <name>isxdigit</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>createRange</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isxdigit</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'0'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'9'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isxdigit</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'A'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'F'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>isxdigit</name>.
                                                        <name>addRange</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'a'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'f'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsXDigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Token</name>.
                                                                        <name>complementRanges</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>isxdigit</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.<name>categories2</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsXDigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>isxdigit</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsXDigit"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsDigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"Nd"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsUpper"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"Lu"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsLower"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"Ll"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsCntrl"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"C"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsPrint"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"C"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsPunct"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"P"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsDigit"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsUpper"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsLower"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsCntrl"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsPrint"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"IsPunct"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"alpha"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsAlpha"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"alnum"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsAlnum"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ascii"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsASCII"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cntrl"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsCntrl"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"digit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsDigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"graph"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsGraph"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"lower"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsLower"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"print"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsPrint"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"punct"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsPunct"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"space"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsSpace"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"upper"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsUpper"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"word"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsWord"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Perl extension</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>setAlias</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"xdigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"IsXDigit"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"alpha"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"alnum"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"ascii"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cntrl"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"digit"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"graph"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"lower"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"print"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"punct"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"space"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"upper"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"word"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>registerNonXS</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"xdigit"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </synchronized>
                                <comment type="line">// synchronized</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if null</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <name>positive</name>
                                    ? (<name>RangeToken</name>)
                                    <call>
                                        <name><name>Token</name>.<name>categories</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    : (<name>RangeToken</name>)
                                    <call>
                                        <name><name>Token</name>.<name>categories2</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//if (tok == null) System.out.println(name);</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>getRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>positive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>xs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>range</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>getRange</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>positive</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>xs</name>
                                &amp;&amp; <name>range</name> != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>Token</name>.
                                        <name>isRegisterNonXS</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>name</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>range</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>range</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>nonxs</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This method is called by only getRange().
                * So this method need not MT-safe.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>registerNonXS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Token</name>.
                                    <name>nonxs</name>
                                </name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Token</name>.
                                        <name>nonxs</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Token</name>.<name>nonxs</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isRegisterNonXS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Token</name>.
                                    <name>nonxs</name>
                                </name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <comment type="line">//DEBUG</comment>
                    <comment type="line">//System.err.println("isRegisterNonXS: "+name);</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.<name>nonxs</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>setAlias</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>newName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>positive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>t1</name> =
                            <init>
                                <expr>(<name>Token</name>)
                                    <call>
                                        <name><name>Token</name>.<name>categories</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>t2</name> =
                            <init>
                                <expr>(<name>Token</name>)
                                    <call>
                                        <name><name>Token</name>.<name>categories2</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>positive</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.<name>categories</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.<name>categories2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.<name>categories2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Token</name>.<name>categories</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// ------------------------------------------------------</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>viramaString</name> =
                    <init>
                        <expr>"\u094D"
                            <comment type="line">// ;DEVANAGARI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u09CD"
                            <comment type="line">//;BENGALI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0A4D"
                            <comment type="line">//;GURMUKHI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0ACD"
                            <comment type="line">//;GUJARATI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0B4D"
                            <comment type="line">//;ORIYA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0BCD"
                            <comment type="line">//;TAMIL SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0C4D"
                            <comment type="line">//;TELUGU SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0CCD"
                            <comment type="line">//;KANNADA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0D4D"
                            <comment type="line">//;MALAYALAM SIGN VIRAMA;Mn;9;ON;;;;;N;;;;;</comment>
                            +"\u0E3A"
                            <comment type="line">//;THAI CHARACTER PHINTHU;Mn;9;ON;;;;;N;THAI VOWEL SIGN PHINTHU;;;;
                            </comment>
                            +"\u0F84"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//;TIBETAN MARK HALANTA;Mn;9;ON;;;;;N;TIBETAN VIRAMA;;;;</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_grapheme</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <name>Token</name>
                </type>
                <name>getGraphemePattern</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Token</name>.
                                    <name>token_grapheme</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name><name>Token</name>.
                                        <name>token_grapheme</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>base_char</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createRange</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// [{ASSIGNED}]-[{M},{C}]</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>base_char</name>.
                                    <name>mergeRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>getRange</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"ASSIGNED"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>base_char</name>.
                                    <name>subtractRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>getRange</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"M"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>base_char</name>.
                                    <name>subtractRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>getRange</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"C"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>virama</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createRange</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>Token</name>.<name>viramaString</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                ++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>viramaString</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>virama</name>.
                                            <name>addRange</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>combiner_wo_virama</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createRange</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>combiner_wo_virama</name>.
                                    <name>mergeRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>getRange</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"M"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>combiner_wo_virama</name>.
                                    <name>addRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0x1160</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x11ff</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// hangul_medial and hangul_final</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>combiner_wo_virama</name>.
                                    <name>addRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0xff9e</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xff9f</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// extras</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>left</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createUnion</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// base_char?</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>left</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>base_char</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>left</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Token</name>.
                                                <name>token_empty</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>foo</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createUnion</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>foo</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>createConcat</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>virama</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Token</name>.
                                                                    <name>getRange</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"L"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>true</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>foo</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>combiner_wo_virama</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>foo</name>
                            =
                            <call>
                                <name><name>Token</name>.
                                    <name>createClosure</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>foo</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>foo</name>
                            =
                            <call>
                                <name><name>Token</name>.
                                    <name>createConcat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>foo</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>Token</name>.
                                <name>token_grapheme</name>
                            </name>
                            =
                            <name>foo</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_grapheme</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Combing Character Sequence in Perl 5.6.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <name>Token</name>
                    </type>
                    <name>token_ccs</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <name>Token</name>
                </type>
                <name>getCombiningCharacterSequence</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Token</name>.
                                    <name>token_ccs</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name><name>Token</name>.
                                        <name>token_ccs</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>foo</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createClosure</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Token</name>.
                                                            <name>getRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"M"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// \pM*</comment>
                    <expr_stmt>
                        <expr>
                            <name>foo</name>
                            =
                            <call>
                                <name><name>Token</name>.
                                    <name>createConcat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>getRange</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"M"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>foo</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// \PM + \pM*</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>Token</name>.
                                <name>token_ccs</name>
                            </name>
                            =
                            <name>foo</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>Token</name>.
                                <name>token_ccs</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ------------------------------------------------------</comment>

            <comment type="line">// ------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>StringToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3257288015452780086L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refNumber</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>StringToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>str</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>n</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>string</name>
                                    </name>
                                    =
                                    <name>str</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>refNumber</name>
                                    </name>
                                    =
                                    <name>n</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getReferenceNumber</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// for STRING</comment>
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>refNumber</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>String</name>
                        </type>
                        <name>getString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// for STRING</comment>
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>string</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>BACKREFERENCE</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>"\\"+
                                            <name><name>this</name>.
                                                <name>refNumber</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                                <else>else
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>REUtil</name>.
                                                    <name>quoteMeta</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>string</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                </else>
                            </if>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ConcatToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>4050760502994940212L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child2</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ConcatToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>t1</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>t2</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>CONCAT</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    =
                                    <name>t1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child2</name>
                                    </name>
                                    =
                                    <name>t2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>2</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>index</name>
                                    == 0 ?
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    :
                                    <name><name>this</name>.
                                        <name>child2</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.<name>child2</name>.
                                            <name>type</name>
                                        </name>
                                        == <name>CLOSURE</name> &amp;&amp;
                                        <call>
                                            <name><name>this</name>.<name>child2</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <name><name>this</name>.
                                            <name>child</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                =
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +"+"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>this</name>.<name>child2</name>.
                                                    <name>type</name>
                                                </name>
                                                == <name>NONGREEDYCLOSURE</name> &amp;&amp;
                                                <call>
                                                    <name><name>this</name>.<name>child2</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                ==
                                                <name><name>this</name>.
                                                    <name>child</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        =
                                                        <call>
                                                            <name><name>this</name>.<name>child</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>options</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        +"+?"
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <expr_stmt>
                                                <expr>
                                                    <name>ret</name>
                                                    =
                                                    <call>
                                                        <name><name>this</name>.<name>child</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>options</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    +
                                                    <call>
                                                        <name><name>this</name>.<name>child2</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>options</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>CharToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3257284751277569842L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chardata</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>CharToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chardata</name>
                                    </name>
                                    =
                                    <name>ch</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getChar</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>chardata</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>CHAR</name>
                                        </expr>
                                        :
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case <expr>'|'</expr>:
                                                </case>
                                                <case>case <expr>'*'</expr>:
                                                </case>
                                                <case>case <expr>'+'</expr>:
                                                </case>
                                                <case>case <expr>'?'</expr>:
                                                </case>
                                                <case>case <expr>'('</expr>:
                                                </case>
                                                <case>case <expr>')'</expr>:
                                                </case>
                                                <case>case <expr>'.'</expr>:
                                                </case>
                                                <case>case <expr>'['</expr>:
                                                </case>
                                                <case>case <expr>'{'</expr>:
                                                </case>
                                                <case>case <expr>'\\'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\"+(<name>char</name>)
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case <expr>'\f'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\f"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case <expr>'\n'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\n"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case <expr>'\r'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\r"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case <expr>'\t'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\t"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case <expr>0x1b</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "\\e"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                    <comment type="line">//case 0x0b: ret = "\\v"; break;</comment>
                                                </case>
                                                <default>default:
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>chardata</name>
                                                                </name>
                                                                &gt;= 0x10000
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>String</name>
                                                                        </type>
                                                                        <name>pre</name> =
                                                                        <init>
                                                                            <expr>"0"+
                                                                                <call>
                                                                                    <name><name>Integer</name>.
                                                                                        <name>toHexString</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>this</name>.
                                                                                                    <name>chardata
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ret</name>
                                                                        = "\\v"+
                                                                        <call>
                                                                            <name><name>pre</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>pre</name>.
                                                                                                <name>length</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        -6
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>pre</name>.
                                                                                                <name>length</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ret</name>
                                                                    = ""+(<name>char</name>)
                                                                    <name><name>this</name>.
                                                                        <name>chardata</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </else>
                                                    </if>
                                                </default>
                                                }
                                            </block>
                                        </switch>
                                        <break>break;</break>

                                    </case>
                                    <case>case
                                        <expr>
                                            <name>ANCHOR</name>
                                        </expr>
                                        :
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>this</name>
                                                    ==
                                                    <name><name>Token</name>.
                                                        <name>token_linebeginning</name>
                                                    </name>
                                                    || <name>this</name> ==
                                                    <name><name>Token</name>.
                                                        <name>token_lineend</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        = ""+(<name>char</name>)
                                                        <name><name>this</name>.
                                                            <name>chardata</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        = "\\"+(<name>char</name>)
                                                        <name><name>this</name>.
                                                            <name>chardata</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </else>
                                        </if>
                                        <break>break;</break>

                                    </case>
                                    <default>default:
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </default>
                                    }
                                </block>
                            </switch>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>boolean</name>
                        </type>
                        <name>match</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CHAR</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>ch</name>
                                                ==
                                                <name><name>this</name>.
                                                    <name>chardata</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>RuntimeException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"NFAArrow#match(): Internal error: "+
                                                            <name><name>this</name>.
                                                                <name>type</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                </else>
                            </if>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ClosureToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3545230349706932537L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>min</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ClosureToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>tok</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    =
                                    <name>tok</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>setMin</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>-1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>setMax</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>-1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>1</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>setMin</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>min</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>min</name>
                                    </name>
                                    =
                                    <name>min</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>setMax</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>max</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>max</name>
                                    </name>
                                    =
                                    <name>max</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>int</name>
                        </type>
                        <name>getMin</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>min</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>int</name>
                        </type>
                        <name>getMax</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>max</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CLOSURE</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getMin</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt; 0 &amp;&amp;
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getMax</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.<name>child</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>options</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            +"*"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getMin</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            ==
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getMax</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ret</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>this</name>.<name>child</name>.
                                                                            <name>toString</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>options</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    +"{"+
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMin</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    +"}"
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMin</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    &gt;= 0 &amp;&amp;
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMax</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    &gt;= 0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>ret</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>this</name>.<name>
                                                                                    child</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>options</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            +"{"+
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMin</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            +","+
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMax</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            +"}"
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMin</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &gt;= 0 &amp;&amp;
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMax</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &lt; 0
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>ret</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>this</name>.<name>
                                                                                            child</name>.
                                                                                            <name>toString</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>options</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    +"{"+
                                                                                    <call>
                                                                                        <name><name>this</name>.
                                                                                            <name>getMin</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    +",}"
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <throw>throw
                                                                            <expr>new
                                                                                <call>
                                                                                    <name>RuntimeException</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Token#toString():
                                                                                                CLOSURE "
                                                                                                +
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        this</name>.
                                                                                                        <name>getMin
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                                +", "+
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        this</name>.
                                                                                                        <name>getMax
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getMin</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt; 0 &amp;&amp;
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getMax</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.<name>child</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>options</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            +"*?"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getMin</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            ==
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getMax</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ret</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>this</name>.<name>child</name>.
                                                                            <name>toString</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>options</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    +"{"+
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMin</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    +"}?"
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMin</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    &gt;= 0 &amp;&amp;
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getMax</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    &gt;= 0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>ret</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>this</name>.<name>
                                                                                    child</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>options</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            +"{"+
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMin</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            +","+
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMax</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            +"}?"
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMin</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &gt;= 0 &amp;&amp;
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getMax</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &lt; 0
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>ret</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>this</name>.<name>
                                                                                            child</name>.
                                                                                            <name>toString</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>options</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    +"{"+
                                                                                    <call>
                                                                                        <name><name>this</name>.
                                                                                            <name>getMin</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    +",}?"
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <throw>throw
                                                                            <expr>new
                                                                                <call>
                                                                                    <name>RuntimeException</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Token#toString():
                                                                                                NONGREEDYCLOSURE "
                                                                                                +
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        this</name>.
                                                                                                        <name>getMin
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                                +", "+
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        this</name>.
                                                                                                        <name>getMax
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ParenToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3257572797621219636L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>parennumber</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ParenToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>tok</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>paren</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    =
                                    <name>tok</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>parennumber</name>
                                    </name>
                                    =
                                    <name>paren</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>1</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getParenNumber</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>parennumber</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>PAREN</name>
                                        </expr>
                                        :
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>parennumber</name>
                                                    </name>
                                                    == 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "(?:"+
                                                            <call>
                                                                <name><name>this</name>.<name>child</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>options</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            +")"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = "("+
                                                            <call>
                                                                <name><name>this</name>.<name>child</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>options</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            +")"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <break>break;</break>

                                    </case>
                                    <case>case
                                        <expr>
                                            <name>LOOKAHEAD</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?="+
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>NEGATIVELOOKAHEAD</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?!"+
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>LOOKBEHIND</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?&lt;="+
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>NEGATIVELOOKBEHIND</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?&lt;!"+
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>INDEPENDENT</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?&gt;"+
                                                <call>
                                                    <name><name>this</name>.<name>child</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    }
                                </block>
                            </switch>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * (?(condition)yes-pattern|no-pattern)
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ConditionToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3761408607870399794L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refNumber</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>condition</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>yes</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>no</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>ConditionToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>refno</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>cond</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>yespat</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>nopat</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>CONDITION</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>refNumber</name>
                                    </name>
                                    =
                                    <name>refno</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>condition</name>
                                    </name>
                                    =
                                    <name>cond</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>yes</name>
                                    </name>
                                    =
                                    <name>yespat</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>no</name>
                                    </name>
                                    =
                                    <name>nopat</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>no</name>
                                    </name>
                                    == <name>null</name> ? 1 : 2
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name><name>this</name>.
                                                <name>yes</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        == 1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name><name>this</name>.
                                                <name>no</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Internal Error: "+
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>refNumber</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                = "(?("+<name>refNumber</name>+")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>this</name>.<name>condition</name>.
                                                    <name>type</name>
                                                </name>
                                                ==
                                                <name><name>Token</name>.
                                                    <name>ANCHOR</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        = "(?("+
                                                        <name><name>this</name>.
                                                            <name>condition</name>
                                                        </name>
                                                        +")"
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        = "(?"+
                                                        <name><name>this</name>.
                                                            <name>condition</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>no</name>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                +=
                                                <name><name>this</name>.
                                                    <name>yes</name>
                                                </name>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                +=
                                                <name><name>this</name>.
                                                    <name>yes</name>
                                                </name>
                                                +"|"+
                                                <name><name>this</name>.
                                                    <name>no</name>
                                                </name>
                                                +")"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * (ims-ims: .... )
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ModifierToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3258689892778324790L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>add</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>mask</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ModifierToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>tok</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>add</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>mask</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Token</name>.
                                                        <name>MODIFIERGROUP</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    =
                                    <name>tok</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>add</name>
                                    </name>
                                    =
                                    <name>add</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>mask</name>
                                    </name>
                                    =
                                    <name>mask</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>1</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getOptions</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>add</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getOptionsMask</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>mask</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>"(?"
                                    +(
                                    <name><name>this</name>.
                                        <name>add</name>
                                    </name>
                                    == 0 ? "" :
                                    <call>
                                        <name><name>REUtil</name>.
                                            <name>createOptionString</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>add</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                    +(
                                    <name><name>this</name>.
                                        <name>mask</name>
                                    </name>
                                    == 0 ? "" :
                                    <call>
                                        <name><name>REUtil</name>.
                                            <name>createOptionString</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>mask</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                    +":"
                                    +
                                    <call>
                                        <name><name>this</name>.<name>child</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>options</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +")"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This class represents a node in parse tree.
                * for UNION or CONCAT.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>UnionToken</name>
                <super>
                    <extends>extends
                        <name>Token</name>
                    </extends>
                    <implements>implements <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3256723987530003507L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>children</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>UnionToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>void</name>
                        </type>
                        <name>addChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>tok</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tok</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return;</return>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>children</name>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>children</name>
                                            </name>
                                            = new
                                            <call>
                                                <name>Vector</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>UNION</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>children</name>.
                                                        <name>addElement</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tok</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// This is CONCAT, and new child is CONCAT.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>tok</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CONCAT</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <call>
                                                        <name><name>tok</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>
                                                    <name>i</name>
                                                    ++
                                                </expr>
                                            </incr>
                                            )
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>addChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>tok</name>.
                                                                            <name>getChild</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </for>
                                        <comment type="line">// Recursion</comment>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>children</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>children</name>.
                                                        <name>addElement</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tok</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>previous</name> =
                                    <init>
                                        <expr>(<name>Token</name>)
                                            <call>
                                                <name><name>this</name>.<name>children</name>.
                                                    <name>elementAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>size</name>-1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!((
                                        <name><name>previous</name>.
                                            <name>type</name>
                                        </name>
                                        == <name>CHAR</name> ||
                                        <name><name>previous</name>.
                                            <name>type</name>
                                        </name>
                                        == <name>STRING</name>)
                                        &amp;&amp; (
                                        <name><name>tok</name>.
                                            <name>type</name>
                                        </name>
                                        == <name>CHAR</name> ||
                                        <name><name>tok</name>.
                                            <name>type</name>
                                        </name>
                                        == <name>STRING</name>))
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>children</name>.
                                                        <name>addElement</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tok</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">//System.err.println("Merge '"+previous+"' and '"+tok+"'.");</comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>StringBuffer</name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>nextMaxLength</name> =
                                    <init>
                                        <expr>(
                                            <name><name>tok</name>.
                                                <name>type</name>
                                            </name>
                                            == <name>CHAR</name> ? 2 :
                                            <call>
                                                <name><name>tok</name>.
                                                    <name>getString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            )
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>previous</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CHAR</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Replace previous token by STRING</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>buffer</name>
                                                = new
                                                <call>
                                                    <name>StringBuffer</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2 +
                                                                <name>nextMaxLength</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>ch</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>previous</name>.
                                                                <name>getChar</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ch</name>
                                                    &gt;= 0x10000
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>REUtil</name>.
                                                                                <name>decomposeToSurrogates</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>ch</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>char</name>)
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>previous</name>
                                                =
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>createString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>children</name>.
                                                        <name>setElementAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr><name>size</name>-1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// STRING</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>buffer</name>
                                                = new
                                                <call>
                                                    <name>StringBuffer</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>previous</name>.
                                                                        <name>getString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>length</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                +
                                                                <name>nextMaxLength</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>previous</name>.
                                                                        <name>getString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>tok</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CHAR</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>ch</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>tok</name>.
                                                                <name>getChar</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ch</name>
                                                    &gt;= 0x10000
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>REUtil</name>.
                                                                                <name>decomposeToSurrogates</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>ch</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>char</name>)
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>tok</name>.
                                                                        <name>getString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>((<name>StringToken</name>)<name>previous</name>).<name>string</name> = new
                                    <call>
                                        <name>String</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>buffer</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>children</name>
                                    </name>
                                    == <name>null</name> ? 0 :
                                    <call>
                                        <name><name>this</name>.<name>children</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Token</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>Token</name>)
                                    <call>
                                        <name><name>this</name>.<name>children</name>.
                                            <name>elementAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ret</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>type</name>
                                        </name>
                                        ==
                                        <name>CONCAT</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.<name>children</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    == 2
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Token</name>
                                                            </type>
                                                            <name>ch</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getChild</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>0</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Token</name>
                                                            </type>
                                                            <name>ch2</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>getChild</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>1</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name><name>ch2</name>.
                                                                    <name>type</name>
                                                                </name>
                                                                == <name>CLOSURE</name> &amp;&amp;
                                                                <call>
                                                                    <name><name>ch2</name>.
                                                                        <name>getChild</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ==
                                                                <name>ch</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ret</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>ch</name>.
                                                                                <name>toString</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>options</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                        +"+"
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name><name>ch2</name>.
                                                                            <name>type</name>
                                                                        </name>
                                                                        == <name>NONGREEDYCLOSURE</name> &amp;&amp;
                                                                        <call>
                                                                            <name><name>ch2</name>.
                                                                                <name>getChild</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                        ==
                                                                        <name>ch</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>ret</name>
                                                                                =
                                                                                <call>
                                                                                    <name><name>ch</name>.
                                                                                        <name>toString</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>options</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                                +"+?"
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>ret</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>ch</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>options</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            +
                                                                            <call>
                                                                                <name><name>ch2</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>options</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                </else>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>StringBuffer</name>
                                                            </type>
                                                            <name>sb</name> =
                                                            <init>
                                                                <expr>new
                                                                    <call>
                                                                        <name>StringBuffer</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt;
                                                                <call>
                                                                    <name><name>this</name>.<name>children</name>.
                                                                        <name>size</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr>
                                                                <name>i</name>
                                                                ++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>sb</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>((<name>Token</name>)
                                                                                    <call>
                                                                                        <name><name>this</name>.<name>
                                                                                            children</name>.
                                                                                            <name>elementAt</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    ).
                                                                                    <call>
                                                                                        <name>toString</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>options</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </for>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ret</name>
                                                            = new
                                                            <call>
                                                                <name>String</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>sb</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>ret</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>children</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 2 &amp;&amp;
                                        <call>
                                            <name><name>this</name>.
                                                <name>getChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .<name>type</name> ==
                                        <name>EMPTY</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                =
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>toString</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>options</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                +"?"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>children</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == 2
                                                &amp;&amp;
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .<name>type</name> ==
                                                <name>EMPTY</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        =
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>getChild</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>1</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>toString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>options</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        +"??"
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>StringBuffer</name>
                                                        </type>
                                                        <name>sb</name> =
                                                        <init>
                                                            <expr>new
                                                                <call>
                                                                    <name>StringBuffer</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>sb</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>((<name>Token</name>)
                                                                        <call>
                                                                            <name><name>this</name>.<name>
                                                                                children</name>.
                                                                                <name>elementAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                        ).
                                                                        <call>
                                                                            <name>toString</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>options</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <for>for (
                                                    <init>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>i</name> =
                                                            <init>
                                                                <expr>1</expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </init>
                                                    <condition>
                                                        <expr>
                                                            <name>i</name>
                                                            &lt;
                                                            <call>
                                                                <name><name>this</name>.<name>children</name>.
                                                                    <name>size</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </condition>
                                                    <incr>
                                                        <expr>
                                                            <name>i</name>
                                                            ++
                                                        </expr>
                                                    </incr>
                                                    )
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>sb</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>char</name>)'|'
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>sb</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>((<name>Token</name>)
                                                                                <call>
                                                                                    <name><name>this</name>.<name>
                                                                                        children</name>.
                                                                                        <name>elementAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                                ).
                                                                                <call>
                                                                                    <name>toString</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>options</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </for>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ret</name>
                                                        = new
                                                        <call>
                                                            <name>String</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>sb</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
