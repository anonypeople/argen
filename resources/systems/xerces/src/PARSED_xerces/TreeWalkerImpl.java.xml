<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\TreeWalkerImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>traversal</name>.
            <name>NodeFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>traversal</name>.
            <name>TreeWalker</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/** This class implements the TreeWalker interface.
        *
        * @xerces.internal
        *
        * @version $Id: TreeWalkerImpl.java,v 1.10 2004/10/05 17:12:51 mrglavas Exp $
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>TreeWalkerImpl</name>
        <super>
            <implements>implements
                <name>TreeWalker</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** When TRUE, the children of entites references are returned in the iterator. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fEntityReferenceExpansion</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The whatToShow mask. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fWhatToShow</name> =
                    <init>
                        <expr>
                            <name><name>NodeFilter</name>.
                                <name>SHOW_ALL</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The NodeFilter reference. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>NodeFilter</name>
                    </type>
                    <name>fNodeFilter</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The current Node. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fCurrentNode</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The root Node. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fRoot</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Implementation Note: No state is kept except the data above</comment>
            <comment type="line">// (fWhatToShow, fNodeFilter, fCurrentNode, fRoot) such that</comment>
            <comment type="line">// setters could be created for these data values and the</comment>
            <comment type="line">// implementation will still work.</comment>


            <comment type="line">//</comment>
            <comment type="line">// Constructor</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Public constructor */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>TreeWalkerImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>whatToShow</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>NodeFilter</name>
                            </type>
                            <name>nodeFilter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>entityReferenceExpansion</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fCurrentNode</name>
                            =
                            <name>root</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fRoot</name>
                            =
                            <name>root</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fWhatToShow</name>
                            =
                            <name>whatToShow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNodeFilter</name>
                            =
                            <name>nodeFilter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEntityReferenceExpansion</name>
                            =
                            <name>entityReferenceExpansion</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getRoot</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fRoot</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the whatToShow value */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getWhatToShow</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fWhatToShow</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setWhatShow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>whatToShow</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fWhatToShow</name>
                            =
                            <name>whatToShow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="javadoc">/** Return the NodeFilter */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>NodeFilter</name>
                </type>
                <name>getFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fNodeFilter</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return whether children entity references are included in the iterator. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getExpandEntityReferences</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fEntityReferenceExpansion</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the current Node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getCurrentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fCurrentNode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/** Return the current Node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCurrentNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>msg</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>DOMMessageFormatter</name>.
                                                        <name>formatMessage</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>DOMMessageFormatter</name>.
                                                                    <name>DOM_DOMAIN</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"NOT_SUPPORTED_ERR"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>NOT_SUPPORTED_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>msg</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>fCurrentNode</name>
                            =
                            <name>node</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the parent Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>parentNode</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getParentNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the first child Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>firstChild</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getFirstChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/** Return the last child Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>lastChild</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getLastChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the previous sibling Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>previousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPreviousSibling</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the next sibling Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>nextSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNextSibling</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the previous Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>previousNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// get sibling</comment>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>
                                <name>getPreviousSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fCurrentNode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name>getParentNode</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCurrentNode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>result</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                    =
                                                    <name>result</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get the lastChild of result.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>lastChild</name>  =
                            <init>
                                <expr>
                                    <call>
                                        <name>getLastChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>prev</name> =
                            <init>
                                <expr>
                                    <name>lastChild</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>lastChild</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>prev</name>
                                    =
                                    <name>lastChild</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>lastChild</name>
                                    =
                                    <call>
                                        <name>getLastChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prev</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <expr_stmt>
                        <expr>
                            <name>lastChild</name>
                            =
                            <name>prev</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// if there is a lastChild which passes filters return it.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastChild</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>lastChild</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>fCurrentNode</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// otherwise return the previous sibling.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>result</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>fCurrentNode</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// otherwise return null.</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the next Node from the current node,
                * after applying filter, whatToshow.
                * If result is not null, set the current Node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>nextNode</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getFirstChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>result</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>
                                <name>getNextSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fCurrentNode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <name>result</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// return parent's 1st sibling.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getParentNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>parent</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>result</name>
                                    =
                                    <call>
                                        <name>getNextSibling</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>parent</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>fCurrentNode</name>
                                                =
                                                <name>result</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>result</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>parent</name>
                                                =
                                                <call>
                                                    <name>getParentNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>parent</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>

                    <comment type="line">// end , return null</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * Return the parent Node, from the input node
                * after applying filter, whatToshow.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                == <name>null</name> || <name>node</name> ==
                                <name>fRoot</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>accept</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>accept</name>
                                ==
                                <name><name>NodeFilter</name>.
                                    <name>FILTER_ACCEPT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>newNode</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <comment type="line">//if (accept == NodeFilter.SKIP_NODE) // and REJECT too.</comment>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getParentNode</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newNode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>


                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * Return the nextSibling Node, from the input node
                * after applying filter, whatToshow.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getNextSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNextSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>node</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fRoot</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * Return the nextSibling Node, from the input node
                * after applying filter, whatToshow.
                * NEVER TRAVERSES ABOVE THE SPECIFIED ROOT NODE.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getNextSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                == <name>null</name> || <name>node</name> ==
                                <name>root</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <expr_stmt>
                                    <expr>
                                        <name>newNode</name>
                                        =
                                        <call>
                                            <name><name>node</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>newNode</name>
                                            == <name>null</name> || <name>newNode</name> ==
                                            <name>root</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>parentAccept</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>acceptNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr><name>parentAccept</name>==
                                            <name><name>NodeFilter</name>.
                                                <name>FILTER_SKIP</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>getNextSibling</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newNode</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>root</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>accept</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>accept</name>
                                ==
                                <name><name>NodeFilter</name>.
                                    <name>FILTER_ACCEPT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>newNode</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accept</name>
                                        ==
                                        <name><name>NodeFilter</name>.
                                            <name>FILTER_SKIP</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>fChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getFirstChild</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newNode</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>getNextSibling</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>newNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>root</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>fChild</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <comment type="line">//if (accept == NodeFilter.REJECT_NODE)</comment>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getNextSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>root</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// getNextSibling(Node node) {</comment>

            <comment type="javadoc">/** Internal function.
                * Return the previous sibling Node, from the input node
                * after applying filter, whatToshow.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getPreviousSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getPreviousSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>node</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fRoot</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * Return the previousSibling Node, from the input node
                * after applying filter, whatToshow.
                * NEVER TRAVERSES ABOVE THE SPECIFIED ROOT NODE.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getPreviousSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                == <name>null</name> || <name>node</name> ==
                                <name>root</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <expr_stmt>
                                    <expr>
                                        <name>newNode</name>
                                        =
                                        <call>
                                            <name><name>node</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>newNode</name>
                                            == <name>null</name> || <name>newNode</name> ==
                                            <name>root</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>parentAccept</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>acceptNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr><name>parentAccept</name>==
                                            <name><name>NodeFilter</name>.
                                                <name>FILTER_SKIP</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>getPreviousSibling</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newNode</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>root</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>accept</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>accept</name>
                                ==
                                <name><name>NodeFilter</name>.
                                    <name>FILTER_ACCEPT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>newNode</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accept</name>
                                        ==
                                        <name><name>NodeFilter</name>.
                                            <name>FILTER_SKIP</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>fChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getLastChild</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newNode</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>getPreviousSibling</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>newNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>root</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>fChild</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <comment type="line">//if (accept == NodeFilter.REJECT_NODE)</comment>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getPreviousSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>root</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// getPreviousSibling(Node node) {</comment>

            <comment type="javadoc">/** Internal function.
                * Return the first child Node, from the input node
                * after applying filter, whatToshow.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getFirstChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>!
                                <name>fEntityReferenceExpansion</name>
                                &amp;&amp;
                                <call>
                                    <name><name>node</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>ENTITY_REFERENCE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>accept</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>accept</name>
                                ==
                                <name><name>NodeFilter</name>.
                                    <name>FILTER_ACCEPT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>newNode</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accept</name>
                                        ==
                                        <name><name>NodeFilter</name>.
                                            <name>FILTER_SKIP</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>newNode</name>.
                                                <name>hasChildNodes</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>fChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getFirstChild</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newNode</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>getNextSibling</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>newNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>node</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>fChild</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <comment type="line">//if (accept == NodeFilter.REJECT_NODE)</comment>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getNextSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>


                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * Return the last child Node, from the input node
                * after applying filter, whatToshow.
                * The current node is not consulted or set.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getLastChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>!
                                <name>fEntityReferenceExpansion</name>
                                &amp;&amp;
                                <call>
                                    <name><name>node</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>ENTITY_REFERENCE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getLastChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>accept</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>accept</name>
                                ==
                                <name><name>NodeFilter</name>.
                                    <name>FILTER_ACCEPT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>newNode</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accept</name>
                                        ==
                                        <name><name>NodeFilter</name>.
                                            <name>FILTER_SKIP</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>newNode</name>.
                                                <name>hasChildNodes</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>lChild</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getLastChild</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newNode</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>lChild</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>getPreviousSibling</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>newNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>node</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>lChild</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <comment type="line">//if (accept == NodeFilter.REJECT_NODE)</comment>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getPreviousSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newNode</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>


                    }
                </block>
            </function>

            <comment type="javadoc">/** Internal function.
                * The node whatToShow and the filter are combined into one result. */
            </comment>
            <function>
                <type>
                    <name>short</name>
                </type>
                <name>acceptNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="javadoc">/***
                        7.1.2.4. Filters and whatToShow flags

                        Iterator and TreeWalker apply whatToShow flags before applying Filters. If a node is rejected by
                        the
                        active whatToShow flags, a Filter will not be called to evaluate that node. When a node is
                        rejected by
                        the active whatToShow flags, children of that node will still be considered, and Filters may be
                        called to
                        evaluate them.
                        ***/
                    </comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeFilter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>( <name>fWhatToShow</name> &amp; (1 &lt;&lt;
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -1)) != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>NodeFilter</name>.
                                                        <name>FILTER_ACCEPT</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>NodeFilter</name>.
                                                        <name>FILTER_SKIP</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>(<name>fWhatToShow</name> &amp; (1 &lt;&lt;
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -1)) != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>fNodeFilter</name>.
                                                            <name>acceptNode</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// What to show has failed. See above excerpt from
                                                spec.
                                            </comment>
                                            <comment type="line">// Equivalent to FILTER_SKIP.</comment>
                                            <return>return
                                                <expr>
                                                    <name><name>NodeFilter</name>.
                                                        <name>FILTER_SKIP</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
