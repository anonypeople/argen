<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\util\URI.java">
    <comment type="block">/*
        * Copyright 1999-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**********************************************************************
        * A class to represent a Uniform Resource Identifier (URI). This class
        * is designed to handle the parsing of URIs and provide access to
        * the various components (scheme, host, port, userinfo, path, query
        * string and fragment) that may constitute a URI.
        * &lt;p&gt;
        * Parsing of a URI specification is done according to the URI
        * syntax described in
        * &lt;a href="http://www.ietf.org/rfc/rfc2396.txt?number=2396"&gt;RFC 2396&lt;/a&gt;,
        * and amended by
        * &lt;a href="http://www.ietf.org/rfc/rfc2732.txt?number=2732"&gt;RFC 2732&lt;/a&gt;.
        * &lt;p&gt;
        * Every absolute URI consists of a scheme, followed by a colon (':'),
        * followed by a scheme-specific part. For URIs that follow the
        * "generic URI" syntax, the scheme-specific part begins with two
        * slashes ("//") and may be followed by an authority segment (comprised
        * of user information, host, and port), path segment, query segment
        * and fragment. Note that RFC 2396 no longer specifies the use of the
        * parameters segment and excludes the "user:password" syntax as part of
        * the authority segment. If "user:password" appears in a URI, the entire
        * user/password string is stored as userinfo.
        * &lt;p&gt;
        * For URIs that do not follow the "generic URI" syntax (e.g. mailto),
        * the entire scheme-specific part is treated as the "path" portion
        * of the URI.
        * &lt;p&gt;
        * Note that, unlike the java.net.URL class, this class does not provide
        * any built-in network access functionality nor does it provide any
        * scheme-specific functionality (for example, it does not know a
        * default port for a specific scheme). Rather, it only knows the
        * grammar and basic set of operations that can be applied to a URI.
        *
        * @version $Id: URI.java,v 1.23 2005/06/24 01:06:07 mrglavas Exp $
        *
        **********************************************************************/
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>URI</name>
        <super>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/*******************************************************************
                * MalformedURIExceptions are thrown in the process of building a URI
                * or setting fields on a URI when an operation would result in an
                * invalid URI specification.
                *
                ********************************************************************/
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>MalformedURIException</name>
                <super>
                    <extends>extends
                        <name>IOException</name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/** Serialization version. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>-6695054834342951930L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/******************************************************************
                        * Constructs a &lt;code&gt;MalformedURIException&lt;/code&gt; with no specified
                        * detail message.
                        ******************************************************************/
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>MalformedURIException</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/*****************************************************************
                        * Constructs a &lt;code&gt;MalformedURIException&lt;/code&gt; with the
                        * specified detail message.
                        *
                        * @param p_msg the detail message.
                        ******************************************************************/
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>MalformedURIException</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>p_msg</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>p_msg</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1601921774685357214L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>fgLookupTable</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>byte</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Character Classes
                */
            </comment>

            <comment type="javadoc">/** reserved characters ;/?:@&amp;=+$,[] */</comment>
            <comment type="line">//RFC 2732 added '[' and ']' as reserved characters</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>RESERVED_CHARACTERS</name> =
                    <init>
                        <expr>0x01</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** URI punctuation mark characters: -_.!~*'() - these, combined with
                alphanumerics, constitute the "unreserved" characters */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MARK_CHARACTERS</name> =
                    <init>
                        <expr>0x02</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** scheme can be composed of alphanumerics and these characters: +-. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SCHEME_CHARACTERS</name> =
                    <init>
                        <expr>0x04</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** userinfo can be composed of unreserved, escaped and these
                characters: ;:&amp;=+$, */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>USERINFO_CHARACTERS</name> =
                    <init>
                        <expr>0x08</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** ASCII letter characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ASCII_ALPHA_CHARACTERS</name> =
                    <init>
                        <expr>0x10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** ASCII digit characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ASCII_DIGIT_CHARACTERS</name> =
                    <init>
                        <expr>0x20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** ASCII hex characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ASCII_HEX_CHARACTERS</name> =
                    <init>
                        <expr>0x40</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Path characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>PATH_CHARACTERS</name> =
                    <init>
                        <expr>0x80</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for alpha-numeric characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_ALPHA_NUMERIC</name> =
                    <init>
                        <expr>
                            <name>ASCII_ALPHA_CHARACTERS</name>
                            |
                            <name>ASCII_DIGIT_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for unreserved characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_UNRESERVED_MASK</name> =
                    <init>
                        <expr>
                            <name>MASK_ALPHA_NUMERIC</name>
                            |
                            <name>MARK_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for URI allowable characters except for % */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_URI_CHARACTER</name> =
                    <init>
                        <expr>
                            <name>MASK_UNRESERVED_MASK</name>
                            |
                            <name>RESERVED_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for scheme characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_SCHEME_CHARACTER</name> =
                    <init>
                        <expr>
                            <name>MASK_ALPHA_NUMERIC</name>
                            |
                            <name>SCHEME_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for userinfo characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_USERINFO_CHARACTER</name> =
                    <init>
                        <expr>
                            <name>MASK_UNRESERVED_MASK</name>
                            |
                            <name>USERINFO_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mask for path characters */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MASK_PATH_CHARACTER</name> =
                    <init>
                        <expr>
                            <name>MASK_UNRESERVED_MASK</name>
                            |
                            <name>PATH_CHARACTERS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <comment type="line">// Add ASCII Digits and ASCII Hex Numbers</comment>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'0'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;= '9'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr>++
                            <name>i</name>
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>fgLookupTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                |= <name>ASCII_DIGIT_CHARACTERS</name> |
                                <name>ASCII_HEX_CHARACTERS</name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <comment type="line">// Add ASCII Letters and ASCII Hex Numbers</comment>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'A'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;= 'F'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr>++
                            <name>i</name>
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>fgLookupTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                |= <name>ASCII_ALPHA_CHARACTERS</name> |
                                <name>ASCII_HEX_CHARACTERS</name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>fgLookupTable</name>
                                    <index>[
                                        <expr><name>i</name>+0x00000020
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                |= <name>ASCII_ALPHA_CHARACTERS</name> |
                                <name>ASCII_HEX_CHARACTERS</name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <comment type="line">// Add ASCII Letters</comment>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'G'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;= 'Z'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr>++
                            <name>i</name>
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>fgLookupTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                |=
                                <name>ASCII_ALPHA_CHARACTERS</name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>fgLookupTable</name>
                                    <index>[
                                        <expr><name>i</name>+0x00000020
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                |=
                                <name>ASCII_ALPHA_CHARACTERS</name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <comment type="line">// Add Reserved Characters</comment>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>';'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'/'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'?'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>':'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'@'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'&amp;'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'='</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'+'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'$'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>','</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'['</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>']'</expr>]
                            </index>
                        </name>
                        |=
                        <name>RESERVED_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>

                <comment type="line">// Add Mark Characters</comment>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'-'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'_'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'.'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'!'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'~'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'*'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'\''</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'('</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>')'</expr>]
                            </index>
                        </name>
                        |=
                        <name>MARK_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>

                <comment type="line">// Add Scheme Characters</comment>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'+'</expr>]
                            </index>
                        </name>
                        |=
                        <name>SCHEME_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'-'</expr>]
                            </index>
                        </name>
                        |=
                        <name>SCHEME_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'.'</expr>]
                            </index>
                        </name>
                        |=
                        <name>SCHEME_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>

                <comment type="line">// Add Userinfo Characters</comment>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>';'</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>':'</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'&amp;'</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'='</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'+'</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'$'</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>','</expr>]
                            </index>
                        </name>
                        |=
                        <name>USERINFO_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>

                <comment type="line">// Add Path Characters</comment>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>';'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'/'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>':'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'@'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'&amp;'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'='</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'+'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>'$'</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>fgLookupTable</name>
                            <index>[<expr>','</expr>]
                            </index>
                        </name>
                        |=
                        <name>PATH_CHARACTERS</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/** Stores the scheme (usually the protocol) for this URI. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_scheme</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the userinfo for this URI; otherwise null */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_userinfo</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the host for this URI; otherwise null */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_host</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the port for this URI; otherwise -1 */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>m_port</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the registry based authority for this URI; otherwise -1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_regAuthority</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the path for this URI; otherwise null */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_path</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the query string for this URI; otherwise
                null. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_queryString</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If specified, stores the fragment for this URI; otherwise null */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>m_fragment</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Construct a new and uninitialized URI.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI from another URI. All fields for this URI are
                * set equal to the fields of the URI passed in.
                *
                * @param p_other the URI to copy (cannot be null)
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_other</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI from a URI specification string. If the
                * specification follows the "generic URI" syntax, (two slashes
                * following the first colon), the specification will be parsed
                * accordingly - setting the scheme, userinfo, host,port, path, query
                * string and fragment fields as necessary. If the specification does
                * not follow the "generic URI" syntax, the specification is parsed
                * into a scheme and scheme-specific part (stored as the path) only.
                *
                * @param p_uriSpec the URI specification string (cannot be null or
                * empty)
                *
                * @exception MalformedURIException if p_uriSpec violates any syntax
                * rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>URI</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_uriSpec</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI from a URI specification string. If the
                * specification follows the "generic URI" syntax, (two slashes
                * following the first colon), the specification will be parsed
                * accordingly - setting the scheme, userinfo, host,port, path, query
                * string and fragment fields as necessary. If the specification does
                * not follow the "generic URI" syntax, the specification is parsed
                * into a scheme and scheme-specific part (stored as the path) only.
                * Construct a relative URI if boolean is assigned to "true"
                * and p_uriSpec is not valid absolute URI, instead of throwing an exception.
                *
                * @param p_uriSpec the URI specification string (cannot be null or
                * empty)
                * @param allowNonAbsoluteURI true to permit non-absolute URIs,
                * false otherwise.
                *
                * @exception MalformedURIException if p_uriSpec violates any syntax
                * rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allowNonAbsoluteURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>URI</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_uriSpec</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>allowNonAbsoluteURI</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI from a base URI and a URI specification string.
                * The URI specification string may be a relative URI.
                *
                * @param p_base the base URI (cannot be null if p_uriSpec is null or
                * empty)
                * @param p_uriSpec the URI specification string (cannot be null or
                * empty if p_base is null)
                *
                * @exception MalformedURIException if p_uriSpec violates any syntax
                * rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_base</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_base</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_uriSpec</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI from a base URI and a URI specification string.
                * The URI specification string may be a relative URI.
                * Construct a relative URI if boolean is assigned to "true"
                * and p_uriSpec is not valid absolute URI and p_base is null
                * instead of throwing an exception.
                *
                * @param p_base the base URI (cannot be null if p_uriSpec is null or
                * empty)
                * @param p_uriSpec the URI specification string (cannot be null or
                * empty if p_base is null)
                * @param allowNonAbsoluteURI true to permit non-absolute URIs,
                * false otherwise.
                *
                * @exception MalformedURIException if p_uriSpec violates any syntax
                * rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_base</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allowNonAbsoluteURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_base</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_uriSpec</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>allowNonAbsoluteURI</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI that does not follow the generic URI syntax.
                * Only the scheme and scheme-specific part (stored as the path) are
                * initialized.
                *
                * @param p_scheme the URI scheme (cannot be null or empty)
                * @param p_schemeSpecificPart the scheme-specific part (cannot be
                * null or empty)
                *
                * @exception MalformedURIException if p_scheme violates any
                * syntax rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_scheme</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_schemeSpecificPart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_scheme</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_scheme</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot construct URI with null/empty scheme!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_schemeSpecificPart</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_schemeSpecificPart</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot construct URI with null/empty scheme-specific part!"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setScheme</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_scheme</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_schemeSpecificPart</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI that follows the generic URI syntax from its
                * component parts. Each component is validated for syntax and some
                * basic semantic checks are performed as well. See the individual
                * setter methods for specifics.
                *
                * @param p_scheme the URI scheme (cannot be null or empty)
                * @param p_host the hostname, IPv4 address or IPv6 reference for the URI
                * @param p_path the URI path - if the path contains '?' or '#',
                * then the query string and/or fragment will be
                * set from the path; however, if the query and
                * fragment are specified both in the path and as
                * separate parameters, an exception is thrown
                * @param p_queryString the URI query string (cannot be specified
                * if path is null)
                * @param p_fragment the URI fragment (cannot be specified if path
                * is null)
                *
                * @exception MalformedURIException if any of the parameters violates
                * syntax rules or semantic rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_scheme</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_host</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_queryString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_fragment</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_scheme</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_host</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_queryString</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p_fragment</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new URI that follows the generic URI syntax from its
                * component parts. Each component is validated for syntax and some
                * basic semantic checks are performed as well. See the individual
                * setter methods for specifics.
                *
                * @param p_scheme the URI scheme (cannot be null or empty)
                * @param p_userinfo the URI userinfo (cannot be specified if host
                * is null)
                * @param p_host the hostname, IPv4 address or IPv6 reference for the URI
                * @param p_port the URI port (may be -1 for "unspecified"; cannot
                * be specified if host is null)
                * @param p_path the URI path - if the path contains '?' or '#',
                * then the query string and/or fragment will be
                * set from the path; however, if the query and
                * fragment are specified both in the path and as
                * separate parameters, an exception is thrown
                * @param p_queryString the URI query string (cannot be specified
                * if path is null)
                * @param p_fragment the URI fragment (cannot be specified if path
                * is null)
                *
                * @exception MalformedURIException if any of the parameters violates
                * syntax rules or semantic rules
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>URI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_scheme</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_userinfo</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_host</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>p_port</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_queryString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_fragment</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_scheme</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_scheme</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Scheme is required!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_host</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p_userinfo</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Userinfo may not be specified if host is not
                                                                    specified!"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p_port</name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Port may not be specified if host is not
                                                                    specified!"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_path</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>p_path</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'?'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 &amp;&amp; <name>p_queryString</name> !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Query string cannot be specified in path and
                                                                    query string!"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>p_path</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'#'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 &amp;&amp; <name>p_fragment</name> !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Fragment cannot be specified in both the path and
                                                                    fragment!"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setScheme</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_scheme</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setHost</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_host</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setPort</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_port</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setUserinfo</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_userinfo</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_path</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setQueryString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_queryString</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setFragment</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p_fragment</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Initialize all fields of this URI from another URI.
                *
                * @param p_other the URI to copy (cannot be null)
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>m_scheme</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getScheme</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_userinfo</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getUserinfo</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_host</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getHost</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_port</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getPort</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_regAuthority</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getRegBasedAuthority</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_path</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getPath</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_queryString</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getQueryString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_fragment</name>
                            =
                            <call>
                                <name><name>p_other</name>.
                                    <name>getFragment</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initializes this URI from a base URI and a URI specification string.
                * See RFC 2396 Section 4 and Appendix B for specifications on parsing
                * the URI and Section 5 for specifications on resolving relative URIs
                * and relative paths.
                *
                * @param p_base the base URI (may be null if p_uriSpec is an absolute
                * URI)
                * @param p_uriSpec the URI spec string which may be an absolute or
                * relative URI (can only be null/empty if p_base
                * is not null)
                * @param allowNonAbsoluteURI true to permit non-absolute URIs,
                * in case of relative URI, false otherwise.
                *
                * @exception MalformedURIException if p_base is null and p_uriSpec
                * is not an absolute URI or if
                * p_uriSpec violates syntax rules
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_base</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allowNonAbsoluteURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uriSpec</name> =
                            <init>
                                <expr>
                                    <name>p_uriSpec</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>uriSpecLen</name> =
                            <init>
                                <expr>(<name>uriSpec</name> != <name>null</name>) ?
                                    <call>
                                        <name><name>uriSpec</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_base</name>
                                == <name>null</name> &amp;&amp; <name>uriSpecLen</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>allowNonAbsoluteURI</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_path</name>
                                                    = ""
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot initialize URI with empty parameters."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// just make a copy of the base if spec is empty</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>uriSpecLen</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>initialize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_base</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Check for scheme, which must be before '/', '?' or '#'.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>colonIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>uriSpec</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>':'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colonIdx</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>searchFrom</name> =
                                        <init>
                                            <expr>
                                                <name>colonIdx</name>
                                                - 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// search backwards starting from character before ':'.</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>slashIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'/'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>queryIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'?'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>fragmentIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'#'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>colonIdx</name>
                                            == 0 || <name>slashIdx</name> != -1 ||
                                            <name>queryIdx</name>
                                            != -1 || <name>fragmentIdx</name> != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// A standalone base is a valid URI according to spec
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>colonIdx</name>
                                                        == 0 || (<name>p_base</name> == <name>null</name> &amp;&amp; <name>
                                                        fragmentIdx
                                                    </name> != 0 &amp;&amp; !<name>allowNonAbsoluteURI</name>)
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"No scheme found in URI."</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>initializeScheme</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>uriSpec</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    =
                                                    <call>
                                                        <name><name>m_scheme</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    +1
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <comment type="line">// Neither 'scheme:' or 'scheme:#fragment' are valid
                                                URIs.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>colonIdx</name>
                                                        == <name>uriSpecLen</name> - 1 ||
                                                        <call>
                                                            <name><name>uriSpec</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>colonIdx</name>+1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == '#'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Scheme specific part cannot be
                                                                                empty."
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p_base</name>
                                        == <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>uriSpec</name>.
                                                <name>indexOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'#'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != 0 &amp;&amp; !
                                        <name>allowNonAbsoluteURI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"No scheme found in URI."</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// Two slashes means we may have authority, but definitely means we're either
                    </comment>
                    <comment type="line">// matching net_path or abs_path. These two productions are ambiguous in that
                    </comment>
                    <comment type="line">// every net_path (except those containing an IPv6Reference) is an abs_path.
                    </comment>
                    <comment type="line">// RFC 2396 resolves this ambiguity by applying a greedy left most matching
                        rule.
                    </comment>
                    <comment type="line">// Try matching net_path first, and if that fails we don't have authority so
                    </comment>
                    <comment type="line">// then attempt to match abs_path.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// net_path = "//" authority [ abs_path ]</comment>
                    <comment type="line">// abs_path = "/" path_segments</comment>
                    <if>if
                        <condition>(
                            <expr>((<name>index</name>+1) &lt; <name>uriSpecLen</name>) &amp;&amp;
                                (
                                <call>
                                    <name><name>uriSpec</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '/' &amp;&amp;
                                <call>
                                    <name><name>uriSpec</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr><name>index</name>+1
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '/')
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>index</name>
                                        += 2
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>startPos</name> =
                                        <init>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// Authority will be everything up to path, query or fragment
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>testChar</name> =
                                        <init>
                                            <expr>'\0'</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>uriSpecLen</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '/' || <name>testChar</name> == '?' || <name>testChar</name> ==
                                                    '#'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>

                                <comment type="line">// Attempt to parse authority. If the section is an empty string
                                </comment>
                                <comment type="line">// this is a valid server based authority, so set the host to
                                    this
                                </comment>
                                <comment type="line">// value.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &gt;
                                            <name>startPos</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// If we didn't find authority we need to back up.
                                                Attempt to
                                            </comment>
                                            <comment type="line">// match against abs_path next.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name>initializeAuthority</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>uriSpec</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>startPos</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>index</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>index</name>
                                                                = <name>startPos</name> - 2
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_host</name>
                                                    = ""
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initializePath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>uriSpec</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Resolve relative URI to base URI - see RFC 2396 Section 5.2</comment>
                    <comment type="line">// In some cases, it might make more sense to throw an exception</comment>
                    <comment type="line">// (when scheme is specified is the string spec and the base URI</comment>
                    <comment type="line">// is also specified, for example), but we're just following the</comment>
                    <comment type="line">// RFC specifications</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_base</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>absolutize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_base</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initializes this URI from a base URI and a URI specification string.
                * See RFC 2396 Section 4 and Appendix B for specifications on parsing
                * the URI and Section 5 for specifications on resolving relative URIs
                * and relative paths.
                *
                * @param p_base the base URI (may be null if p_uriSpec is an absolute
                * URI)
                * @param p_uriSpec the URI spec string which may be an absolute or
                * relative URI (can only be null/empty if p_base
                * is not null)
                *
                * @exception MalformedURIException if p_base is null and p_uriSpec
                * is not an absolute URI or if
                * p_uriSpec violates syntax rules
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_base</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uriSpec</name> =
                            <init>
                                <expr>
                                    <name>p_uriSpec</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>uriSpecLen</name> =
                            <init>
                                <expr>(<name>uriSpec</name> != <name>null</name>) ?
                                    <call>
                                        <name><name>uriSpec</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_base</name>
                                == <name>null</name> &amp;&amp; <name>uriSpecLen</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot initialize URI with empty parameters."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// just make a copy of the base if spec is empty</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>uriSpecLen</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>initialize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_base</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Check for scheme, which must be before '/', '?' or '#'.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>colonIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>uriSpec</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>':'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colonIdx</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>searchFrom</name> =
                                        <init>
                                            <expr>
                                                <name>colonIdx</name>
                                                - 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// search backwards starting from character before ':'.</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>slashIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'/'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>queryIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'?'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>fragmentIdx</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'#'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>searchFrom</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>colonIdx</name>
                                            == 0 || <name>slashIdx</name> != -1 ||
                                            <name>queryIdx</name>
                                            != -1 || <name>fragmentIdx</name> != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// A standalone base is a valid URI according to spec
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>colonIdx</name>
                                                        == 0 || (<name>p_base</name> == <name>null</name> &amp;&amp; <name>
                                                        fragmentIdx
                                                    </name> != 0)
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"No scheme found in URI."</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>initializeScheme</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>uriSpec</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    =
                                                    <call>
                                                        <name><name>m_scheme</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    +1
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <comment type="line">// Neither 'scheme:' or 'scheme:#fragment' are valid
                                                URIs.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>colonIdx</name>
                                                        == <name>uriSpecLen</name> - 1 ||
                                                        <call>
                                                            <name><name>uriSpec</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>colonIdx</name>+1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == '#'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Scheme specific part cannot be
                                                                                empty."
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p_base</name>
                                        == <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>uriSpec</name>.
                                                <name>indexOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'#'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"No scheme found in URI."</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// Two slashes means we may have authority, but definitely means we're either
                    </comment>
                    <comment type="line">// matching net_path or abs_path. These two productions are ambiguous in that
                    </comment>
                    <comment type="line">// every net_path (except those containing an IPv6Reference) is an abs_path.
                    </comment>
                    <comment type="line">// RFC 2396 resolves this ambiguity by applying a greedy left most matching
                        rule.
                    </comment>
                    <comment type="line">// Try matching net_path first, and if that fails we don't have authority so
                    </comment>
                    <comment type="line">// then attempt to match abs_path.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// net_path = "//" authority [ abs_path ]</comment>
                    <comment type="line">// abs_path = "/" path_segments</comment>
                    <if>if
                        <condition>(
                            <expr>((<name>index</name>+1) &lt; <name>uriSpecLen</name>) &amp;&amp;
                                (
                                <call>
                                    <name><name>uriSpec</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '/' &amp;&amp;
                                <call>
                                    <name><name>uriSpec</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr><name>index</name>+1
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '/')
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>index</name>
                                        += 2
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>startPos</name> =
                                        <init>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// Authority will be everything up to path, query or fragment
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>testChar</name> =
                                        <init>
                                            <expr>'\0'</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>uriSpecLen</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>uriSpec</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '/' || <name>testChar</name> == '?' || <name>testChar</name> ==
                                                    '#'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>

                                <comment type="line">// Attempt to parse authority. If the section is an empty string
                                </comment>
                                <comment type="line">// this is a valid server based authority, so set the host to
                                    this
                                </comment>
                                <comment type="line">// value.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &gt;
                                            <name>startPos</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// If we didn't find authority we need to back up.
                                                Attempt to
                                            </comment>
                                            <comment type="line">// match against abs_path next.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name>initializeAuthority</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>uriSpec</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>startPos</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>index</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>index</name>
                                                                = <name>startPos</name> - 2
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_host</name>
                                                    = ""
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initializePath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>uriSpec</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Resolve relative URI to base URI - see RFC 2396 Section 5.2</comment>
                    <comment type="line">// In some cases, it might make more sense to throw an exception</comment>
                    <comment type="line">// (when scheme is specified is the string spec and the base URI</comment>
                    <comment type="line">// is also specified, for example), but we're just following the</comment>
                    <comment type="line">// RFC specifications</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_base</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>absolutize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_base</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Absolutize URI with given base URI.
                *
                * @param p_base base URI for absolutization
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>absolutize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URI</name>
                            </type>
                            <name>p_base</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// check to see if this is the current doc - RFC 2396 5.2 #2</comment>
                    <comment type="line">// note that this is slightly different from the RFC spec in that</comment>
                    <comment type="line">// we don't include the check for query string being null</comment>
                    <comment type="line">// - this handles cases where the urispec is just a query</comment>
                    <comment type="line">// string or a fragment (e.g. "?y" or "#s") -</comment>
                    <comment type="line">// see &lt;http://www.ics.uci.edu/~fielding/url/test1.html&gt; which</comment>
                    <comment type="line">// identified this as a bug in the RFC</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>m_path</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0 &amp;&amp; <name>m_scheme</name> == <name>null</name> &amp;&amp;
                                <name>m_host</name>
                                == <name>null</name> &amp;&amp; <name>m_regAuthority</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_scheme</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getScheme</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_userinfo</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getUserinfo</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_host</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getHost</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_port</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getPort</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_regAuthority</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getRegBasedAuthority</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_path</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getPath</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>m_queryString</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_queryString</name>
                                                    =
                                                    <call>
                                                        <name><name>p_base</name>.
                                                            <name>getQueryString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>m_fragment</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>m_fragment</name>
                                                                =
                                                                <call>
                                                                    <name><name>p_base</name>.
                                                                        <name>getFragment</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// check for scheme - RFC 2396 5.2 #3</comment>
                    <comment type="line">// if we found a scheme, it means absolute URI, so we're done</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>m_scheme</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_scheme</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getScheme</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// check for authority - RFC 2396 5.2 #4</comment>
                    <comment type="line">// if we found a host, then we've got a network path, so we're done</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>m_host</name>
                                == <name>null</name> &amp;&amp; <name>m_regAuthority</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_userinfo</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getUserinfo</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_host</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getHost</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_port</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getPort</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_regAuthority</name>
                                        =
                                        <call>
                                            <name><name>p_base</name>.
                                                <name>getRegBasedAuthority</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// check for absolute path - RFC 2396 5.2 #5</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>m_path</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0 &amp;&amp;
                                <call>
                                    <name><name>m_path</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"/"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if we get to this point, we need to resolve relative path</comment>
                    <comment type="line">// RFC 2396 5.2 #6</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name> =
                            <init>
                                <expr>""</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>basePath</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_base</name>.
                                            <name>getPath</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// 6a - get all but the last segment of the base URI path</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>basePath</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>basePath</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>lastSlash</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>basePath</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'/'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>lastSlash</name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>path</name>
                                                    =
                                                    <call>
                                                        <name><name>basePath</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr><name>lastSlash</name>+1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>m_path</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>path</name>
                                                = "/"
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// 6b - append the relative URI path</comment>
                    <expr_stmt>
                        <expr>
                            <name>path</name>
                            =
                            <call>
                                <name><name>path</name>.
                                    <name>concat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>m_path</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// 6c - remove all "./" where "." is a complete path segment</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>index</name> =
                                <call>
                                    <name><name>path</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"/./"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ) != -1
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>path</name>
                                    =
                                    <call>
                                        <name><name>path</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>index</name>+1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>concat</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>path</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr><name>index</name>+3
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// 6d - remove "." if path ends with "." as a complete path segment</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>path</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"/."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>path</name>
                                        =
                                        <call>
                                            <name><name>path</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>path</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// 6e - remove all "&lt;segment&gt;/../" where "&lt;segment&gt;" is a
                        complete
                    </comment>
                    <comment type="line">// path segment not equal to ".."</comment>
                    <expr_stmt>
                        <expr>
                            <name>index</name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>segIndex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tempString</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>(<name>index</name> =
                                <call>
                                    <name><name>path</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"/../"</expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ) &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tempString</name>
                                    =
                                    <call>
                                        <name><name>path</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>path</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"/../"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>segIndex</name>
                                    =
                                    <call>
                                        <name><name>tempString</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'/'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>segIndex</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <call>
                                                        <name><name>tempString</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>segIndex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>equals</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>".."</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>path</name>
                                                            =
                                                            <call>
                                                                <name><name>path</name>.
                                                                    <name>substring</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr><name>segIndex</name>+1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>concat</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>path</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>index</name>+4
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            =
                                                            <name>segIndex</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            += 4
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>index</name>
                                                += 4
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>

                    <comment type="line">// 6f - remove ending "&lt;segment&gt;/.." where "&lt;segment&gt;" is a
                    </comment>
                    <comment type="line">// complete path segment</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>path</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"/.."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>tempString</name>
                                        =
                                        <call>
                                            <name><name>path</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>path</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -3
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>segIndex</name>
                                        =
                                        <call>
                                            <name><name>tempString</name>.
                                                <name>lastIndexOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'/'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>segIndex</name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>path</name>
                                                    =
                                                    <call>
                                                        <name><name>path</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr><name>segIndex</name>+1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_path</name>
                            =
                            <name>path</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initialize the scheme for this URI from a URI string spec.
                *
                * @param p_uriSpec the URI specification (cannot be null)
                *
                * @exception MalformedURIException if URI does not have a conformant
                * scheme
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initializeScheme</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>uriSpecLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_uriSpec</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name> =
                            <init>
                                <expr>'\0'</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>uriSpecLen</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>p_uriSpec</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>testChar</name>
                                        == ':' || <name>testChar</name> == '/' ||
                                        <name>testChar</name>
                                        == '?' || <name>testChar</name> == '#'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr><name>index</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <name>scheme</name>
                            =
                            <call>
                                <name><name>p_uriSpec</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>scheme</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No scheme found in URI."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setScheme</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>scheme</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initialize the authority (either server or registry based)
                * for this URI from a URI string spec.
                *
                * @param p_uriSpec the URI specification (cannot be null)
                *
                * @return true if the given string matched server or registry
                * based authority
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>initializeAuthority</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_uriSpec</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name> =
                            <init>
                                <expr>'\0'</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>userinfo</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// userinfo is everything up to @</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>p_uriSpec</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>'@'</expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>start</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>p_uriSpec</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '@'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <name>userinfo</name>
                                        =
                                        <call>
                                            <name><name>p_uriSpec</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>index</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// host is everything up to last ':', or up to</comment>
                    <comment type="line">// and including ']' if followed by ':'.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>host</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>start</name>
                            =
                            <name>index</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>hasPort</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>p_uriSpec</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == '['
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>bracketIndex</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>p_uriSpec</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>']'</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    = (<name>bracketIndex</name> != -1) ? <name>bracketIndex</name> :
                                                    <name>end</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr><name>index</name>+1 &lt; <name>end</name> &amp;&amp;
                                                        <call>
                                                            <name><name>p_uriSpec</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>index</name>+1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == ':'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>++
                                                                <name>index</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>hasPort</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>index</name>
                                                                =
                                                                <name>end</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>colonIndex</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>p_uriSpec</name>.
                                                                    <name>lastIndexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>':'</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>end</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    = (<name>colonIndex</name> &gt; <name>start</name>) ? <name>
                                                    colonIndex
                                                </name> :
                                                    <name>end</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>hasPort</name>
                                                    = (<name>index</name> != <name>end</name>)
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>host</name>
                            =
                            <call>
                                <name><name>p_uriSpec</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>port</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>host</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// port</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>hasPort</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>index</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>start</name>
                                                    =
                                                    <name>index</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <while>while
                                                <condition>(
                                                    <expr>
                                                        <name>index</name>
                                                        &lt;
                                                        <name>end</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>index</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>portStr</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>p_uriSpec</name>.
                                                                    <name>substring</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>portStr</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        &gt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// REVISIT: Remove this code.</comment>
                                                        <comment type="javadoc">/** for (int i = 0; i &lt;
                                                            portStr.length(); i++) {
                                                            if (!isDigit(portStr.charAt(i))) {
                                                            throw new MalformedURIException(
                                                            portStr +
                                                            " is invalid. Port should only contain digits!");
                                                            }
                                                            }**/
                                                        </comment>
                                                        <comment type="line">// REVISIT: Remove this code.</comment>
                                                        <comment type="line">// Store port value as string instead of
                                                            integer.
                                                        </comment>
                                                        <try>try
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>port</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>Integer</name>.
                                                                                <name>parseInt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>portStr</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>port</name>
                                                                            == -1
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <expr_stmt>
                                                                            <expr>--
                                                                                <name>port</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                            <catch>catch (
                                                                <param>
                                                                    <decl>
                                                                        <type>
                                                                            <name>NumberFormatException</name>
                                                                        </type>
                                                                        <name>nfe</name>
                                                                    </decl>
                                                                </param>
                                                                )
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>port</name>
                                                                            = -2
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </catch>
                                                        </try>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isValidServerBasedAuthority</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>host</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>port</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>userinfo</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_host</name>
                                        =
                                        <name>host</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_port</name>
                                        =
                                        <name>port</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_userinfo</name>
                                        =
                                        <name>userinfo</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <comment type="line">// Note: Registry based authority is being removed from a</comment>
                        <comment type="line">// new spec for URI which would obsolete RFC 2396. If the</comment>
                        <comment type="line">// spec is added to XML errata, processing of reg_name</comment>
                        <comment type="line">// needs to be removed. - mrglavas.</comment>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isValidRegistryBasedAuthority</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_uriSpec</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>m_regAuthority</name>
                                                =
                                                <name>p_uriSpec</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines whether the components host, port, and user info
                * are valid as a server authority.
                *
                * @param host the host component of authority
                * @param port the port number component of authority
                * @param userinfo the user info component of authority
                *
                * @return true if the given host, port, and userinfo compose
                * a valid server authority
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidServerBasedAuthority</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>host</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>port</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>userinfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// Check if the host is well formed.</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isWellFormedAddress</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>host</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Check that port is well formed if it exists.</comment>
                    <comment type="line">// REVISIT: There's no restriction on port value ranges, but</comment>
                    <comment type="line">// perform the same check as in setPort to be consistent. Pass</comment>
                    <comment type="line">// in a string to this method instead of an integer.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>port</name>
                                &lt; -1 || <name>port</name> &gt; 65535
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Check that userinfo is well formed if it exists.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>userinfo</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Userinfo can contain alphanumerics, mark characters, escaped
                                </comment>
                                <comment type="line">// and ';',':','&amp;','=','+','$',','</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>end</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>userinfo</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>testChar</name> =
                                        <init>
                                            <expr>'\0'</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>userinfo</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '%'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>index</name>+2 &gt;= <name>end</name> ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>userinfo</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>userinfo</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+2
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            += 2
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>isUserinfoCharacter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>testChar</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr>++
                                                <name>index</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines whether the given string is a registry based authority.
                *
                * @param authority the authority component of a URI
                *
                * @return true if the given string is a registry based authority
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidRegistryBasedAuthority</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>authority</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>authority</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>authority</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// check for valid escape sequence</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>testChar</name>
                                        == '%'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr><name>index</name>+2 &gt;= <name>end</name> ||
                                                    !
                                                    <call>
                                                        <name>isHex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>authority</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>index</name>+1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    !
                                                    <call>
                                                        <name>isHex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>authority</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>index</name>+2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>index</name>
                                                += 2
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// can check against path characters because the set</comment>
                                <comment type="line">// is the same except for '/' which we've already excluded.
                                </comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>isPathCharacter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>testChar</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>++
                                    <name>index</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initialize the path for this URI from a URI string spec.
                *
                * @param p_uriSpec the URI specification (cannot be null)
                * @param p_nStartIndex the index to begin scanning from
                *
                * @exception MalformedURIException if p_uriSpec violates syntax rules
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initializePath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uriSpec</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>p_nStartIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_uriSpec</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot initialize path from null string!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>p_nStartIndex</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>
                                    <name>p_nStartIndex</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_uriSpec</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name> =
                            <init>
                                <expr>'\0'</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// path - everything up to query string or fragment</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// RFC 2732 only allows '[' and ']' to appear in the opaque part.
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>getScheme</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == <name>null</name> ||
                                            <call>
                                                <name><name>p_uriSpec</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == '/'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <comment type="line">// Scan path.</comment>
                                            <comment type="line">// abs_path = "/" path_segments</comment>
                                            <comment type="line">// rel_path = rel_segment [ abs_path ]</comment>
                                            <while>while
                                                <condition>(
                                                    <expr>
                                                        <name>index</name>
                                                        &lt;
                                                        <name>end</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>testChar</name>
                                                            =
                                                            <call>
                                                                <name><name>p_uriSpec</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <comment type="line">// check for valid escape sequence</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>testChar</name>
                                                                == '%'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr><name>index</name>+2 &gt;= <name>end
                                                                        </name> ||
                                                                            !
                                                                            <call>
                                                                                <name>isHex</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    p_uriSpec</name>.
                                                                                                    <name>charAt</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr><name>
                                                                                                            index</name>
                                                                                                            +1
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            ||
                                                                            !
                                                                            <call>
                                                                                <name>isHex</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    p_uriSpec</name>.
                                                                                                    <name>charAt</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr><name>
                                                                                                            index</name>
                                                                                                            +2
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <throw>throw
                                                                                <expr>new
                                                                                    <call>
                                                                                        <name>MalformedURIException
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>"Path contains
                                                                                                    invalid escape
                                                                                                    sequence!"
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </throw>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>index</name>
                                                                        += 2
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <comment type="line">// Path segments cannot contain '[' or ']'
                                                            since pchar
                                                        </comment>
                                                        <comment type="line">// production was not changed by RFC
                                                            2732.
                                                        </comment>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>!
                                                                        <call>
                                                                            <name>isPathCharacter</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>testChar</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>
                                                                                    <name>testChar</name>
                                                                                    == '?' || <name>testChar</name> ==
                                                                                    '#'
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <block>{
                                                                                    <break>break;</break>
                                                                                    }
                                                                                </block>
                                                                            </then>
                                                                        </if>
                                                                        <throw>throw
                                                                            <expr>new
                                                                                <call>
                                                                                    <name>MalformedURIException</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Path contains invalid
                                                                                                character: " +
                                                                                                <name>testChar</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>++
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{

                                            <comment type="line">// Scan opaque part.</comment>
                                            <comment type="line">// opaque_part = uric_no_slash *uric</comment>
                                            <while>while
                                                <condition>(
                                                    <expr>
                                                        <name>index</name>
                                                        &lt;
                                                        <name>end</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>testChar</name>
                                                            =
                                                            <call>
                                                                <name><name>p_uriSpec</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>testChar</name>
                                                                == '?' || <name>testChar</name> == '#'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <break>break;</break>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>

                                                    <comment type="line">// check for valid escape sequence</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>testChar</name>
                                                                == '%'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr><name>index</name>+2 &gt;= <name>end
                                                                        </name> ||
                                                                            !
                                                                            <call>
                                                                                <name>isHex</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    p_uriSpec</name>.
                                                                                                    <name>charAt</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr><name>
                                                                                                            index</name>
                                                                                                            +1
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            ||
                                                                            !
                                                                            <call>
                                                                                <name>isHex</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    p_uriSpec</name>.
                                                                                                    <name>charAt</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr><name>
                                                                                                            index</name>
                                                                                                            +2
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <throw>throw
                                                                                <expr>new
                                                                                    <call>
                                                                                        <name>MalformedURIException
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>"Opaque part
                                                                                                    contains invalid
                                                                                                    escape sequence!"
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </throw>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>index</name>
                                                                        += 2
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <comment type="line">// If the scheme specific part is opaque,
                                                            it can contain '['
                                                        </comment>
                                                        <comment type="line">// and ']'. uric_no_slash wasn't modified
                                                            by RFC 2732, which
                                                        </comment>
                                                        <comment type="line">// I've interpreted as an error in the
                                                            spec, since the
                                                        </comment>
                                                        <comment type="line">// production should be equivalent to (uric
                                                            - '/'), and uric
                                                        </comment>
                                                        <comment type="line">// contains '[' and ']'. - mrglavas
                                                        </comment>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>!
                                                                        <call>
                                                                            <name>isURICharacter</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>testChar</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <throw>throw
                                                                            <expr>new
                                                                                <call>
                                                                                    <name>MalformedURIException</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Opaque part contains
                                                                                                invalid character: " +
                                                                                                <name>testChar</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>++
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_path</name>
                            =
                            <call>
                                <name><name>p_uriSpec</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// query - starts with ? and up to fragment or end</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>testChar</name>
                                == '?'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>index</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <name>index</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>p_uriSpec</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '#'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '%'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>index</name>+2 &gt;= <name>end</name> ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_uriSpec</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_uriSpec</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+2
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <throw>throw
                                                                    <expr>new
                                                                        <call>
                                                                            <name>MalformedURIException</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"Query string contains invalid
                                                                                        escape sequence!"
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </throw>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            += 2
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>isURICharacter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>testChar</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name>MalformedURIException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"Query string contains invalid
                                                                                    character: " +
                                                                                    <name>testChar</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <name>m_queryString</name>
                                        =
                                        <call>
                                            <name><name>p_uriSpec</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// fragment - starts with #</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>testChar</name>
                                == '#'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>index</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <name>index</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>p_uriSpec</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '%'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>index</name>+2 &gt;= <name>end</name> ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_uriSpec</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_uriSpec</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+2
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <throw>throw
                                                                    <expr>new
                                                                        <call>
                                                                            <name>MalformedURIException</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"Fragment contains invalid
                                                                                        escape sequence!"
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </throw>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            += 2
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>isURICharacter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>testChar</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name>MalformedURIException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"Fragment contains invalid
                                                                                    character: "+
                                                                                    <name>testChar</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <name>m_fragment</name>
                                        =
                                        <call>
                                            <name><name>p_uriSpec</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the scheme for this URI.
                *
                * @return the scheme for this URI
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getScheme</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_scheme</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the scheme-specific part for this URI (everything following the
                * scheme and the first colon). See RFC 2396 Section 5.2 for spec.
                *
                * @return the scheme-specific part for this URI
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemeSpecificPart</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>schemespec</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_host</name>
                                != <name>null</name> || <name>m_regAuthority</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"//"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// Server based authority.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>m_host</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>m_userinfo</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>schemespec</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>m_userinfo</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>schemespec</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>'@'</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>schemespec</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>m_host</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>m_port</name>
                                                        != -1
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>schemespec</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>':'</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>schemespec</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>m_port</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// Registry based authority.</comment>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>schemespec</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>m_regAuthority</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_path</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>m_path</name>)
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_queryString</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'?'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>m_queryString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_fragment</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'#'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>schemespec</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>m_fragment</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>schemespec</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the userinfo for this URI.
                *
                * @return the userinfo for this URI (null if not specified).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getUserinfo</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_userinfo</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the host for this URI.
                *
                * @return the host for this URI (null if not specified).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getHost</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_host</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the port for this URI.
                *
                * @return the port for this URI (-1 if not specified).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getPort</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_port</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the registry based authority for this URI.
                *
                * @return the registry based authority (null if not specified).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getRegBasedAuthority</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_regAuthority</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the authority for this URI.
                *
                * @return the authority
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAuthority</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>authority</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>m_host</name>
                                != <name>null</name> || <name>m_regAuthority</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>authority</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"//"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// Server based authority.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>m_host</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>m_userinfo</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>authority</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>m_userinfo</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>authority</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>'@'</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>authority</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>m_host</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>m_port</name>
                                                        != -1
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>authority</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>':'</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>authority</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>m_port</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// Registry based authority.</comment>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>authority</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>m_regAuthority</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>authority</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the path for this URI (optionally with the query string and
                * fragment).
                *
                * @param p_includeQueryString if true (and query string is not null),
                * then a "?" followed by the query string
                * will be appended
                * @param p_includeFragment if true (and fragment is not null),
                * then a "#" followed by the fragment
                * will be appended
                *
                * @return the path for this URI possibly including the query string
                * and fragment
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p_includeQueryString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p_includeFragment</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>pathString</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>m_path</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_includeQueryString</name>
                                &amp;&amp; <name>m_queryString</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>pathString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'?'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>pathString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>m_queryString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>p_includeFragment</name>
                                &amp;&amp; <name>m_fragment</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>pathString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'#'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>pathString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>m_fragment</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>pathString</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the path for this URI. Note that the value returned is the path
                * only and does not include the query string or fragment.
                *
                * @return the path for this URI.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPath</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_path</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the query string for this URI.
                *
                * @return the query string for this URI. Null is returned if there
                * was no "?" in the URI spec, empty string if there was a
                * "?" but no query string following it.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getQueryString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_queryString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the fragment for this URI.
                *
                * @return the fragment for this URI. Null is returned if there
                * was no "#" in the URI spec, empty string if there was a
                * "#" but no fragment following it.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getFragment</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>m_fragment</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the scheme for this URI. The scheme is converted to lowercase
                * before it is set.
                *
                * @param p_scheme the scheme for this URI (cannot be null)
                *
                * @exception MalformedURIException if p_scheme is not a conformant
                * scheme name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setScheme</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_scheme</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot set scheme from null string!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isConformantSchemeName</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>p_scheme</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The scheme is not conformant."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>m_scheme</name>
                            =
                            <call>
                                <name><name>p_scheme</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the userinfo for this URI. If a non-null value is passed in and
                * the host value is null, then an exception is thrown.
                *
                * @param p_userinfo the userinfo for this URI
                *
                * @exception MalformedURIException if p_userinfo contains invalid
                * characters
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUserinfo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_userinfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_userinfo</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_userinfo</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>m_host</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Userinfo cannot be set when host is null!"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// userinfo can contain alphanumerics, mark characters, escaped
                                </comment>
                                <comment type="line">// and ';',':','&amp;','=','+','$',','</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>end</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>p_userinfo</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>testChar</name> =
                                        <init>
                                            <expr>'\0'</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>p_userinfo</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '%'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>index</name>+2 &gt;= <name>end</name> ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_userinfo</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ||
                                                                !
                                                                <call>
                                                                    <name>isHex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>p_userinfo</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>index</name>+2
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <throw>throw
                                                                    <expr>new
                                                                        <call>
                                                                            <name>MalformedURIException</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"Userinfo contains invalid
                                                                                        escape sequence!"
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </throw>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>isUserinfoCharacter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>testChar</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name>MalformedURIException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"Userinfo contains invalid
                                                                                    character:"+
                                                                                    <name>testChar</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>index</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_userinfo</name>
                            =
                            <name>p_userinfo</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Set the host for this URI. If null is passed in, the userinfo
                * field is also set to null and the port is set to -1.&lt;/p&gt;
                *
                * &lt;p&gt;Note: This method overwrites registry based authority if it
                * previously existed in this URI.&lt;/p&gt;
                *
                * @param p_host the host for this URI
                *
                * @exception MalformedURIException if p_host is not a valid IP
                * address or DNS hostname.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setHost</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_host</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_host</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_host</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p_host</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_regAuthority</name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>m_host</name>
                                        =
                                        <name>p_host</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_userinfo</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_port</name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isWellFormedAddress</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_host</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Host is not a well formed address!"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_host</name>
                            =
                            <name>p_host</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_regAuthority</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the port for this URI. -1 is used to indicate that the port is
                * not specified, otherwise valid port numbers are between 0 and 65535.
                * If a valid port number is passed in and the host field is null,
                * an exception is thrown.
                *
                * @param p_port the port number for this URI
                *
                * @exception MalformedURIException if p_port is not -1 and not a
                * valid port number
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>p_port</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_port</name>
                                &gt;= 0 &amp;&amp; <name>p_port</name> &lt;= 65535
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>m_host</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>MalformedURIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Port cannot be set when host is null!"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p_port</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Invalid port number!"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_port</name>
                            =
                            <name>p_port</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the registry based authority for this URI.&lt;/p&gt;
                *
                * &lt;p&gt;Note: This method overwrites server based authority
                * if it previously existed in this URI.&lt;/p&gt;
                *
                * @param authority the registry based authority for this URI
                *
                * @exception MalformedURIException it authority is not a
                * well formed registry based authority
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setRegBasedAuthority</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>authority</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>authority</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_regAuthority</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                        <comment type="line">// reg_name = 1*( unreserved | escaped | "$" | "," |</comment>
                        <comment type="line">// ";" | ":" | "@" | "&amp;" | "=" | "+" )</comment>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>authority</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt; 1 ||
                                        !
                                        <call>
                                            <name>isValidRegistryBasedAuthority</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>authority</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        <call>
                                            <name><name>authority</name>.
                                                <name>indexOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'/'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Registry based authority is not well formed."</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>m_regAuthority</name>
                            =
                            <name>authority</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_host</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_userinfo</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>m_port</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the path for this URI. If the supplied path is null, then the
                * query string and fragment are set to null as well. If the supplied
                * path includes a query string and/or fragment, these fields will be
                * parsed and set as well. Note that, for URIs following the "generic
                * URI" syntax, the path specified should start with a slash.
                * For URIs that do not follow the generic URI syntax, this method
                * sets the scheme-specific part.
                *
                * @param p_path the path for this URI (may be null)
                *
                * @exception MalformedURIException if p_path contains invalid
                * characters
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_path</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_path</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_queryString</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m_fragment</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>initializePath</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p_path</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Append to the end of the path of this URI. If the current path does
                * not end in a slash and the path to be appended does not begin with
                * a slash, a slash will be appended to the current path before the
                * new segment is added. Also, if the current path ends in a slash
                * and the new segment begins with a slash, the extra slash will be
                * removed before the new segment is appended.
                *
                * @param p_addToPath the new segment to be added to the current path
                *
                * @exception MalformedURIException if p_addToPath contains syntax
                * errors
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>appendPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_addToPath</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_addToPath</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_addToPath</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isURIString</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>p_addToPath</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedURIException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Path contains invalid character!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_path</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>m_path</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>p_addToPath</name>.
                                                    <name>startsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"/"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_path</name>
                                                    =
                                                    <name>p_addToPath</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>m_path</name>
                                                    = "/" +
                                                    <name>p_addToPath</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>m_path</name>.
                                                <name>endsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"/"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>p_addToPath</name>.
                                                            <name>startsWith</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"/"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>m_path</name>
                                                            =
                                                            <call>
                                                                <name><name>m_path</name>.
                                                                    <name>concat</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>p_addToPath</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>1</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>m_path</name>
                                                            =
                                                            <call>
                                                                <name><name>m_path</name>.
                                                                    <name>concat</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>p_addToPath</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>p_addToPath</name>.
                                                            <name>startsWith</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"/"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>m_path</name>
                                                            =
                                                            <call>
                                                                <name><name>m_path</name>.
                                                                    <name>concat</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>p_addToPath</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>m_path</name>
                                                            =
                                                            <call>
                                                                <name><name>m_path</name>.
                                                                    <name>concat</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"/" +
                                                                            <name>p_addToPath</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the query string for this URI. A non-null value is valid only
                * if this is an URI conforming to the generic URI syntax and
                * the path value is not null.
                *
                * @param p_queryString the query string for this URI
                *
                * @exception MalformedURIException if p_queryString is not null and this
                * URI does not conform to the generic
                * URI syntax or if the path is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setQueryString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_queryString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_queryString</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_queryString</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isGenericURI</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Query string can only be set for a generic URI!"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>getPath</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>MalformedURIException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Query string cannot be set when path is
                                                                        null!"
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name>isURIString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>p_queryString</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Query string contains invalid
                                                                                character!"
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>m_queryString</name>
                                                                =
                                                                <name>p_queryString</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the fragment for this URI. A non-null value is valid only
                * if this is a URI conforming to the generic URI syntax and
                * the path value is not null.
                *
                * @param p_fragment the fragment for this URI
                *
                * @exception MalformedURIException if p_fragment is not null and this
                * URI does not conform to the generic
                * URI syntax or if the path is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFragment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_fragment</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_fragment</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>m_fragment</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isGenericURI</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedURIException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Fragment can only be set for a generic URI!"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>getPath</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>MalformedURIException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Fragment cannot be set when path is null!"
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name>isURIString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>p_fragment</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>MalformedURIException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Fragment contains invalid
                                                                                character!"
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>m_fragment</name>
                                                                =
                                                                <name>p_fragment</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines if the passed-in Object is equivalent to this URI.
                *
                * @param p_test the Object to test for equality.
                *
                * @return true if p_test is a URI with all values equal to this
                * URI, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>p_test</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_test</name>
                                <name>instanceof</name>
                                <name>URI</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>URI</name>
                                        </type>
                                        <name>testURI</name> =
                                        <init>
                                            <expr>(<name>URI</name>)
                                                <name>p_test</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>((<name>m_scheme</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_scheme</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_scheme</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_scheme</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_scheme</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_scheme</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )) &amp;&amp;
                                            ((<name>m_userinfo</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_userinfo</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_userinfo</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_userinfo</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_userinfo</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_userinfo</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )) &amp;&amp;
                                            ((<name>m_host</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_host</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_host</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_host</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_host</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_host</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )) &amp;&amp;
                                            <name>m_port</name>
                                            ==
                                            <name><name>testURI</name>.
                                                <name>m_port</name>
                                            </name>
                                            &amp;&amp;
                                            ((<name>m_path</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_path</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_path</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_path</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_path</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_path</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )) &amp;&amp;
                                            ((<name>m_queryString</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_queryString</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_queryString</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_queryString</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_queryString</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_queryString</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )) &amp;&amp;
                                            ((<name>m_fragment</name> == <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_fragment</name>
                                            </name>
                                            == <name>null</name>) ||
                                            (<name>m_fragment</name> != <name>null</name> &amp;&amp;
                                            <name><name>testURI</name>.
                                                <name>m_fragment</name>
                                            </name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>m_fragment</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>testURI</name>.
                                                                <name>m_fragment</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ))
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the URI as a string specification. See RFC 2396 Section 5.2.
                *
                * @return the URI string specification
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>uriSpecString</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>m_scheme</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>uriSpecString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>m_scheme</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>uriSpecString</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>':'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>uriSpecString</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getSchemeSpecificPart</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>uriSpecString</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the indicator as to whether this URI uses the "generic URI"
                * syntax.
                *
                * @return true if this URI uses the "generic URI" syntax, false
                * otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isGenericURI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// presence of the host (whether valid or empty) means</comment>
                    <comment type="line">// double-slashes which means generic uri</comment>
                    <return>return
                        <expr>(<name>m_host</name> != <name>null</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether this URI represents an absolute URI.
                *
                * @return true if this URI represents an absolute URI, false
                * otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isAbsoluteURI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// presence of the scheme means absolute uri</comment>
                    <return>return
                        <expr>(<name>m_scheme</name> != <name>null</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a scheme conforms to the rules for a scheme name.
                * A scheme is conformant if it starts with an alphanumeric, and
                * contains only alphanumerics, '+','-' and '.'.
                *
                * @return true if the scheme is conformant, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isConformantSchemeName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_scheme</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>p_scheme</name>.
                                        <name>trim</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isAlpha</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>p_scheme</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>schemeLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_scheme</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>schemeLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>p_scheme</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isSchemeCharacter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>testChar</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a string is syntactically capable of representing
                * a valid IPv4 address, IPv6 reference or the domain name of a network host.
                * A valid IPv4 address consists of four decimal digit groups separated by a
                * '.'. Each group must consist of one to three digits. See RFC 2732 Section 3,
                * and RFC 2373 Section 2.2, for the definition of IPv6 references. A hostname
                * consists of domain labels (each of which must begin and end with an alphanumeric
                * but may contain '-') separated &amp; by a '.'. See RFC 2396 Section 3.2.2.
                *
                * @return true if the string is a syntactically valid IPv4 address,
                * IPv6 reference or hostname
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isWellFormedAddress</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>address</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>address</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>addrLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>address</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>addrLength</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Check if the host is a valid IPv6reference.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>address</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"["</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>isWellFormedIPv6Reference</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>address</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Cannot start with a '.', '-', or end with a '-'.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>address</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>address</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"-"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>address</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"-"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// rightmost domain label starting with digit indicates IP address</comment>
                    <comment type="line">// since top level domain label can only start with an alpha</comment>
                    <comment type="line">// see RFC 2396 Section 3.2.2</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>address</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'.'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>address</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>index</name>
                                        =
                                        <call>
                                            <name><name>address</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>lastIndexOf</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'.'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr><name>index</name>+1 &lt; <name>addrLength</name> &amp;&amp;
                                <call>
                                    <name>isDigit</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>address</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>index</name>+1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>isWellFormedIPv4Address</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>address</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// hostname = *( domainlabel "." ) toplabel [ "." ]</comment>
                                <comment type="line">// domainlabel = alphanum | alphanum *( alphanum | "-" ) alphanum
                                </comment>
                                <comment type="line">// toplabel = alpha | alpha *( alphanum | "-" ) alphanum</comment>

                                <comment type="line">// RFC 2396 states that hostnames take the form described in
                                </comment>
                                <comment type="line">// RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According
                                </comment>
                                <comment type="line">// to RFC 1034, hostnames are limited to 255 characters.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>addrLength</name>
                                            &gt; 255
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// domain labels can contain alphanumerics and '-"</comment>
                                <comment type="line">// but must start and end with an alphanumeric</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>testChar</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>labelCharCount</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>addrLength</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testChar</name>
                                                =
                                                <call>
                                                    <name><name>address</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>testChar</name>
                                                    == '.'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>!
                                                                <call>
                                                                    <name>isAlphanum</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>address</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>i</name>-1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>i</name>+1 &lt; <name>addrLength</name> &amp;&amp;
                                                                !
                                                                <call>
                                                                    <name>isAlphanum</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>address</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>i</name>+1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>labelCharCount</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>isAlphanum</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>testChar</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &amp;&amp; <name>testChar</name> != '-'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <comment type="line">// RFC 1034: Labels must be 63 characters or
                                                        less.
                                                    </comment>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>++<name>labelCharCount</name> &gt; 63
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Determines whether a string is an IPv4 address as defined by
                * RFC 2373, and under the further constraint that it must be a 32-bit
                * address. Though not expressed in the grammar, in order to satisfy
                * the 32-bit address constraint, each segment of the address cannot
                * be greater than 255 (8 bits of information).&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT&lt;/code&gt;&lt;/p&gt;
                *
                * @return true if the string is a syntactically valid IPv4 address
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isWellFormedIPv4Address</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>address</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>addrLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>address</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numDots</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numDigits</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// make sure that 1) we see only digits and dot separators, 2) that</comment>
                    <comment type="line">// any dot separator is preceded and followed by a digit and</comment>
                    <comment type="line">// 3) that we find 3 dots</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// RFC 2732 amended RFC 2396 by replacing the definition</comment>
                    <comment type="line">// of IPv4address with the one defined by RFC 2373. - mrglavas</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// One to three digits must be in each segment.</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>addrLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>address</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>testChar</name>
                                        == '.'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>(<name>i</name> &gt; 0 &amp;&amp; !
                                                    <call>
                                                        <name>isDigit</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>address</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>i</name>-1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ) ||
                                                    (<name>i</name>+1 &lt; <name>addrLength</name> &amp;&amp; !
                                                    <call>
                                                        <name>isDigit</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>address</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>i</name>+1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    )
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>numDigits</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>numDots</name> &gt; 3
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>isDigit</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>testChar</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <comment type="line">// Check that that there are no more than three digits
                                        </comment>
                                        <comment type="line">// in this segment.</comment>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>++<name>numDigits</name> &gt; 3
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <comment type="line">// Check that this segment is not greater than
                                                    255.
                                                </comment>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>numDigits</name>
                                                                == 3
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>char</name>
                                                                        </type>
                                                                        <name>first</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>address</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>i</name>-2
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>char</name>
                                                                        </type>
                                                                        <name>second</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>address</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr><name>i</name>-1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>!(<name>first</name> &lt; '2' ||
                                                                            (<name>first</name> == '2' &amp;&amp;
                                                                            (<name>second</name> &lt; '5' ||
                                                                            (<name>second</name> == '5' &amp;&amp; <name>
                                                                                testChar
                                                                            </name> &lt;= '5'))))
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <return>return <expr>false</expr>;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(<name>numDots</name> == 3)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Determines whether a string is an IPv6 reference as defined
                * by RFC 2732, where IPv6address is defined in RFC 2373. The
                * IPv6 address is parsed according to Section 2.2 of RFC 2373,
                * with the additional constraint that the address be composed of
                * 128 bits of information.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;IPv6reference = "[" IPv6address "]"&lt;/code&gt;&lt;/p&gt;
                *
                * &lt;p&gt;Note: The BNF expressed in RFC 2373 Appendix B does not
                * accurately describe section 2.2, and was in fact removed from
                * RFC 3513, the successor of RFC 2373.&lt;/p&gt;
                *
                * @return true if the string is a syntactically valid IPv6 reference
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isWellFormedIPv6Reference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>address</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>addrLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>address</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr><name>addrLength</name>-1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Check if string is a potential match for IPv6reference.</comment>
                    <if>if
                        <condition>(
                            <expr>!(<name>addrLength</name> &gt; 2 &amp;&amp;
                                <call>
                                    <name><name>address</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>0</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '['
                                &amp;&amp;
                                <call>
                                    <name><name>address</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>end</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == ']')
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Counter for the number of 16-bit sections read in the address.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>counter</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Scan hex sequence before possible '::' or IPv4 address.</comment>
                    <expr_stmt>
                        <expr>
                            <name>index</name>
                            =
                            <call>
                                <name>scanHexSequence</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>address</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>counter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <comment type="line">// Address must contain 128-bits of information.</comment>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        ==
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>(
                                                <name>
                                                    <name>counter</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                == 8)
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr><name>index</name>+1 &lt; <name>end</name> &amp;&amp;
                                <call>
                                    <name><name>address</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == ':'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>address</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>index</name>+1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == ':'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// '::' represents at least one 16-bit group of
                                                zeros.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>++
                                                        <name>
                                                            <name>counter</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                        &gt; 8
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    += 2
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// Trailing zeros will fill out the rest of the
                                                address.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>index</name>
                                                        ==
                                                        <name>end</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// If the second character wasn't ':', in order to be valid,
                                    </comment>
                                    <comment type="line">// the remainder of the string must match IPv4Address,
                                    </comment>
                                    <comment type="line">// and we must have read exactly 6 16-bit groups.</comment>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>(
                                                    <name>
                                                        <name>counter</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    == 6) &amp;&amp;
                                                    <call>
                                                        <name>isWellFormedIPv4Address</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>address</name>.
                                                                            <name>substring</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>index</name>+1
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>end</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// 3. Scan hex sequence after '::'.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prevCount</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>counter</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>index</name>
                            =
                            <call>
                                <name>scanHexSequence</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>address</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>counter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// We've either reached the end of the string, the address ends in</comment>
                    <comment type="line">// an IPv4 address, or it is invalid. scanHexSequence has already</comment>
                    <comment type="line">// made sure that we have the right number of bits.</comment>
                    <return>return
                        <expr>(<name>index</name> == <name>end</name>) ||
                            (<name>index</name> != -1 &amp;&amp;
                            <call>
                                <name>isWellFormedIPv4Address</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>address</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(
                                                            <name>
                                                                <name>counter</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            &gt; <name>prevCount</name>) ? <name>index</name>+1 :
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>end</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Helper method for isWellFormedIPv6Reference which scans the
                * hex sequences of an IPv6 address. It returns the index of the
                * next character to scan in the address, or -1 if the string
                * cannot match a valid IPv6 address.
                *
                * @param address the string to be scanned
                * @param index the beginning index (inclusive)
                * @param end the ending index (exclusive)
                * @param counter a counter for the number of 16-bit sections read
                * in the address
                *
                * @return the index of the next character to scan, or -1 if the
                * string cannot match a valid IPv6 address
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>scanHexSequence</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>address</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>counter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numDigits</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>
                                    <name>index</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Trying to match the following productions:</comment>
                    <comment type="line">// hexseq = hex4 *( ":" hex4)</comment>
                    <comment type="line">// hex4 = 1*4HEXDIG</comment>
                    <for>for (<init>;</init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>index</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>address</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>testChar</name>
                                        == ':'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// IPv6 addresses are 128-bit, so there can be at most
                                            eight sections.
                                        </comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>numDigits</name>
                                                    &gt; 0 &amp;&amp; ++
                                                    <name>
                                                        <name>counter</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    &gt; 8
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <comment type="line">// This could be '::'.</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>numDigits</name>
                                                    == 0 || ((<name>index</name>+1 &lt; <name>end</name>) &amp;&amp;
                                                    <call>
                                                        <name><name>address</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr><name>index</name>+1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    == ':')
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>numDigits</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// This might be invalid or an IPv4address. If it's potentially an
                                    IPv4address,
                                </comment>
                                <comment type="line">// backup to just after the last valid character that matches
                                    hexseq.
                                </comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>isHex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>testChar</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>testChar</name>
                                                            == '.' &amp;&amp; <name>numDigits</name> &lt; 4 &amp;&amp; <name>
                                                            numDigits
                                                        </name> &gt; 0 &amp;&amp;
                                                            <name>
                                                                <name>counter</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            &lt;= 6
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>back</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <name>index</name>
                                                                            - <name>numDigits</name> - 1
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <return>return
                                                                <expr>(<name>back</name> &gt;= <name>start</name>) ? <name>
                                                                    back
                                                                </name> : (<name>back</name>+1)
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return <expr>-1</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <comment type="line">// There can be at most 4 hex digits per group.</comment>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>++<name>numDigits</name> &gt; 4
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>-1</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(<name>numDigits</name> &gt; 0 &amp;&amp; ++
                            <name>
                                <name>counter</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            &lt;= 8) ? <name>end</name> : -1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determine whether a char is a digit.
                *
                * @return true if the char is betweeen '0' and '9', false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isDigit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>p_char</name>
                            &gt;= '0' &amp;&amp; <name>p_char</name> &lt;= '9'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a character is a hexadecimal character.
                *
                * @return true if the char is betweeen '0' and '9', 'a' and 'f'
                * or 'A' and 'F', false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isHex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= 'f' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>ASCII_HEX_CHARACTERS</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is an alphabetic character: a-z or A-Z
                *
                * @return true if the char is alphabetic, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>p_char</name> &gt;= 'a' &amp;&amp; <name>p_char</name> &lt;= 'z') || (<name>
                            p_char
                        </name> &gt;= 'A' &amp;&amp; <name>p_char</name> &lt;= 'Z' ))
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is an alphanumeric: 0-9, a-z or A-Z
                *
                * @return true if the char is alphanumeric, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlphanum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= 'z' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_ALPHA_NUMERIC</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a character is a reserved character:
                * ';', '/', '?', ':', '@', '&amp;', '=', '+', '$', ',', '[', or ']'
                *
                * @return true if the string contains any reserved characters
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isReservedCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= ']' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>RESERVED_CHARACTERS</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is an unreserved character.
                *
                * @return true if the char is unreserved, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isUnreservedCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= '~' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_UNRESERVED_MASK</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is a URI character (reserved or
                * unreserved, not including '%' for escaped octets).
                *
                * @return true if the char is a URI character, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isURICharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= '~' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_URI_CHARACTER</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is a scheme character.
                *
                * @return true if the char is a scheme character, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSchemeCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= 'z' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_SCHEME_CHARACTER</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is a userinfo character.
                *
                * @return true if the char is a userinfo character, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isUserinfoCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= 'z' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_USERINFO_CHARACTER</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine whether a char is a path character.
                *
                * @return true if the char is a path character, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPathCharacter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>p_char</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>p_char</name> &lt;= '~' &amp;&amp; (
                            <name>
                                <name>fgLookupTable</name>
                                <index>[
                                    <expr>
                                        <name>p_char</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; <name>MASK_PATH_CHARACTER</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determine whether a given string contains only URI characters (also
                * called "uric" in RFC 2396). uric consist of all reserved
                * characters, unreserved characters and escaped characters.
                *
                * @return true if the string is comprised of uric, false otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isURIString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>p_uric</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p_uric</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>p_uric</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>testChar</name> =
                            <init>
                                <expr>'\0'</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>testChar</name>
                                    =
                                    <call>
                                        <name><name>p_uric</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>testChar</name>
                                        == '%'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr><name>i</name>+2 &gt;= <name>end</name> ||
                                                    !
                                                    <call>
                                                        <name>isHex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>p_uric</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>i</name>+1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    !
                                                    <call>
                                                        <name>isHex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>p_uric</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>i</name>+2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>i</name>
                                                            += 2
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isURICharacter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>testChar</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
