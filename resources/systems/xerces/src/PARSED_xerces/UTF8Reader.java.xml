<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\io\UTF8Reader.java">
    <comment type="block">/*
        * Copyright 2000-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>MessageFormatter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>msg</name>.
            <name>XMLMessageFormatter</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;A UTF-8 reader.&lt;/p&gt;
        *
        * @xerces.internal
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: UTF8Reader.java,v 1.11 2004/10/04 22:07:41 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>UTF8Reader</name>
        <super>
            <extends>extends
                <name>Reader</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default byte buffer size (2048). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DEFAULT_BUFFER_SIZE</name> =
                    <init>
                        <expr>2048</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// debugging</comment>

            <comment type="javadoc">/** Debug read. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG_READ</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Input stream. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>InputStream</name>
                    </type>
                    <name>fInputStream</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Byte buffer. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>fBuffer</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Offset into buffer. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>fOffset</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Surrogate character. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fSurrogate</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// message formatter; used to produce localized</comment>
            <comment type="line">// exception messages</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>MessageFormatter</name>
                    </type>
                    <name>fFormatter</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//Locale to use for messages</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Locale</name>
                    </type>
                    <name>fLocale</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Constructs a UTF-8 reader from the specified input stream
                * using the default buffer size. Primarily for testing.
                *
                * @param inputStream The input stream.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>UTF8Reader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>inputStream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>DEFAULT_BUFFER_SIZE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>XMLMessageFormatter</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Locale</name>.
                                                    <name>getDefault</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(InputStream, MessageFormatter)</comment>

            <comment type="javadoc">/**
                * Constructs a UTF-8 reader from the specified input stream
                * using the default buffer size and the given MessageFormatter.
                *
                * @param inputStream The input stream.
                * @param messageFormatter given MessageFormatter
                * @param locale Locale to use for messages
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>UTF8Reader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>inputStream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>DEFAULT_BUFFER_SIZE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>messageFormatter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>locale</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(InputStream, MessageFormatter, Locale)</comment>

            <comment type="javadoc">/**
                * Constructs a UTF-8 reader from the specified input stream,
                * buffer size and MessageFormatter.
                *
                * @param inputStream The input stream.
                * @param size The initial buffer size.
                * @param messageFormatter the formatter for localizing/formatting errors.
                * @param locale the Locale to use for messages
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>UTF8Reader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fInputStream</name>
                            =
                            <name>inputStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBuffer</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>
                                        <name>size</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fFormatter</name>
                            =
                            <name>messageFormatter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fLocale</name>
                            =
                            <name>locale</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(InputStream, int, MessageFormatter, Locale)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Reader methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Read a single character. This method will block until a character is
                * available, an I/O error occurs, or the end of the stream is reached.
                *
                * &lt;p&gt; Subclasses that intend to support efficient single-character input
                * should override this method.
                *
                * @return The character read, as an integer in the range 0 to 16383
                * (&lt;tt&gt;0x00-0xffff&lt;/tt&gt;), or -1 if the end of the stream has
                * been reached
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// decode character</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <name>fSurrogate</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSurrogate</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// NOTE: We use the index into the buffer if there are remaining
                                </comment>
                                <comment type="line">// bytes from the last block read. -Ac</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// get first byte</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>b0</name> =
                                        <init>
                                            <expr>
                                                <name>index</name>
                                                ==
                                                <name>fOffset</name>
                                                ?
                                                <call>
                                                    <name><name>fInputStream</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                :
                                                <name>
                                                    <name>fBuffer</name>
                                                    <index>[
                                                        <expr><name>index</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                &amp; 0x00FF
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>b0</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>-1</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// UTF-8: [0xxx xxxx]</comment>
                                <comment type="line">// Unicode: [0000 0000] [0xxx xxxx]</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>b0</name>
                                            &lt; 0x80
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>c</name>
                                                    = (<name>char</name>)
                                                    <name>b0</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>

                                    <comment type="line">// UTF-8: [110y yyyy] [10xx xxxx]</comment>
                                    <comment type="line">// Unicode: [0000 0yyy] [yyxx xxxx]</comment>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b0</name> &amp; 0xE0) == 0xC0 &amp;&amp; (<name>b0</name> &amp;
                                                    0x1E) != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>b1</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>index</name>
                                                                    ==
                                                                    <name>fOffset</name>
                                                                    ?
                                                                    <call>
                                                                        <name><name>fInputStream</name>.
                                                                            <name>read</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    :
                                                                    <name>
                                                                        <name>fBuffer</name>
                                                                        <index>[
                                                                            <expr><name>index</name>++
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    &amp; 0x00FF
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b1</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>invalidByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b1</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            = ((<name>b0</name> &lt;&lt; 6) &amp; 0x07C0) | (<name>b1
                                                        </name> &amp; 0x003F)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>

                                            <comment type="line">// UTF-8: [1110 zzzz] [10yy yyyy] [10xx xxxx]</comment>
                                            <comment type="line">// Unicode: [zzzz yyyy] [yyxx xxxx]</comment>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>(<name>b0</name> &amp; 0xF0) == 0xE0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>b1</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <name>index</name>
                                                                            ==
                                                                            <name>fOffset</name>
                                                                            ?
                                                                            <call>
                                                                                <name><name>fInputStream</name>.
                                                                                    <name>read</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            :
                                                                            <name>
                                                                                <name>fBuffer</name>
                                                                                <index>[
                                                                                    <expr><name>index</name>++
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            &amp; 0x00FF
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>b1</name>
                                                                        == -1
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>expectedByte</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>2</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                                        || (<name>b0</name> == 0xED &amp;&amp; <name>
                                                                            b1
                                                                        </name> &gt;= 0xA0)
                                                                        || ((<name>b0</name> &amp; 0x0F) == 0 &amp;&amp;
                                                                        (<name>b1</name> &amp; 0x20) == 0)
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>invalidByte</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>2</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>b1</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>b2</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <name>index</name>
                                                                            ==
                                                                            <name>fOffset</name>
                                                                            ?
                                                                            <call>
                                                                                <name><name>fInputStream</name>.
                                                                                    <name>read</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            :
                                                                            <name>
                                                                                <name>fBuffer</name>
                                                                                <index>[
                                                                                    <expr><name>index</name>++
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            &amp; 0x00FF
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>b2</name>
                                                                        == -1
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>expectedByte</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>(<name>b2</name> &amp; 0xC0) != 0x80
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>invalidByte</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>3</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>b2</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>c</name>
                                                                    = ((<name>b0</name> &lt;&lt; 12) &amp; 0xF000) | ((<name>
                                                                    b1
                                                                </name> &lt;&lt; 6) &amp; 0x0FC0) |
                                                                    (<name>b2</name> &amp; 0x003F)
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>

                                                    <comment type="line">// UTF-8: [1111 0uuu] [10uu zzzz] [10yy yyyy]
                                                        [10xx xxxx]*
                                                    </comment>
                                                    <comment type="line">// Unicode: [1101 10ww] [wwzz zzyy] (high
                                                        surrogate)
                                                    </comment>
                                                    <comment type="line">// [1101 11yy] [yyxx xxxx] (low surrogate)
                                                    </comment>
                                                    <comment type="line">// * uuuuu = wwww + 1</comment>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>(<name>b0</name> &amp; 0xF8) == 0xF0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>b1</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                    ==
                                                                                    <name>fOffset</name>
                                                                                    ?
                                                                                    <call>
                                                                                        <name><name>fInputStream</name>.
                                                                                            <name>read</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    :
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[
                                                                                            <expr><name>index</name>++
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                    &amp; 0x00FF
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>b1</name>
                                                                                == -1
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>expectedByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>2</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                                                || ((<name>b1</name> &amp; 0x30) == 0
                                                                                &amp;&amp; (<name>b0</name> &amp; 0x07)
                                                                                == 0)
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>invalidByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>2</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>3</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>b1</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>b2</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                    ==
                                                                                    <name>fOffset</name>
                                                                                    ?
                                                                                    <call>
                                                                                        <name><name>fInputStream</name>.
                                                                                            <name>read</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    :
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[
                                                                                            <expr><name>index</name>++
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                    &amp; 0x00FF
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>b2</name>
                                                                                == -1
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>expectedByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>3</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>(<name>b2</name> &amp; 0xC0) != 0x80
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>invalidByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>3</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>3</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>b2</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>b3</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                    ==
                                                                                    <name>fOffset</name>
                                                                                    ?
                                                                                    <call>
                                                                                        <name><name>fInputStream</name>.
                                                                                            <name>read</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    :
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[
                                                                                            <expr><name>index</name>++
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                    &amp; 0x00FF
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>b3</name>
                                                                                == -1
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>expectedByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>(<name>b3</name> &amp; 0xC0) != 0x80
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>invalidByte</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>4</expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>b3</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>uuuuu</name> =
                                                                            <init>
                                                                                <expr>((<name>b0</name> &lt;&lt; 2)
                                                                                    &amp; 0x001C) | ((<name>b1</name> &gt;&gt;
                                                                                    4) &amp; 0x0003)
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>uuuuu</name>
                                                                                &gt; 0x10
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>invalidSurrogate
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>uuuuu
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>wwww</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <name>uuuuu</name>
                                                                                    - 1
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>hs</name> =
                                                                            <init>
                                                                                <expr>0xD800 |
                                                                                    ((<name>wwww</name> &lt;&lt; 6)
                                                                                    &amp; 0x03C0) | ((<name>b1</name> &lt;&lt;
                                                                                    2) &amp; 0x003C) |
                                                                                    ((<name>b2</name> &gt;&gt; 4) &amp;
                                                                                    0x0003)
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>ls</name> =
                                                                            <init>
                                                                                <expr>0xDC00 | ((<name>b2</name> &lt;&lt;
                                                                                    6) &amp; 0x03C0) | (<name>b3</name> &amp;
                                                                                    0x003F)
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>c</name>
                                                                            =
                                                                            <name>hs</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fSurrogate</name>
                                                                            =
                                                                            <name>ls</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>

                                                            <comment type="line">// error</comment>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>invalidByte</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>1</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>1</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>b0</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>

                        <comment type="line">// use surrogate</comment>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSurrogate</name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// return character</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_READ</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"read(): 0x"+
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>toHexString</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>c</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>c</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// read():int</comment>

            <comment type="javadoc">/**
                * Read characters into a portion of an array. This method will block
                * until some input is available, an I/O error occurs, or the end of the
                * stream is reached.
                *
                * @param ch Destination buffer
                * @param offset Offset at which to start storing characters
                * @param length Maximum number of characters to read
                *
                * @return The number of characters read, or -1 if the end of the
                * stream has been reached
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>
                                <name>ch</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// handle surrogate</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>
                                    <name>offset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSurrogate</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>ch</name>
                                            <index>[
                                                <expr>
                                                    <name>offset</name>
                                                    + 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        = (<name>char</name>)
                                        <name>fSurrogate</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSurrogate</name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>length</name>--
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>out</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// read bytes</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fOffset</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// adjust length to read</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>length</name>
                                            &gt;
                                            <name><name>fBuffer</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>length</name>
                                                    =
                                                    <name><name>fBuffer</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// perform read operation</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>count</name>
                                        =
                                        <call>
                                            <name><name>fInputStream</name>.
                                                <name>read</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fBuffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>count</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>-1</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>count</name>
                                        += <name>out</name> -
                                        <name>offset</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>

                        <comment type="line">// skip read; last character was in error</comment>
                        <comment type="line">// NOTE: Having an offset value other than zero means that there was
                        </comment>
                        <comment type="line">// an error in the last character read. In this case, we have</comment>
                        <comment type="line">// skipped the read so we don't consume any bytes past the</comment>
                        <comment type="line">// error. By signalling the error on the next block read we</comment>
                        <comment type="line">// allow the method to return the most valid characters that</comment>
                        <comment type="line">// it can on the previous block read. -Ac</comment>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>count</name>
                                        =
                                        <name>fOffset</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fOffset</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// convert bytes to characters</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>total</name> =
                            <init>
                                <expr>
                                    <name>count</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>in</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>byte1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                            </type>
                            <name>byte0</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr>
                                <name>in</name>
                                = 0
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>in</name>
                                &lt;
                                <name>total</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>in</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>byte1</name>
                                    =
                                    <name>
                                        <name>fBuffer</name>
                                        <index>[
                                            <expr>
                                                <name>in</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>byte1</name>
                                        &gt;=
                                        <name>byte0</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>byte1</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <for>for ( <init>;</init>
                        <condition>
                            <expr>
                                <name>in</name>
                                &lt;
                                <name>total</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>in</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>byte1</name>
                                    =
                                    <name>
                                        <name>fBuffer</name>
                                        <index>[
                                            <expr>
                                                <name>in</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// UTF-8: [0xxx xxxx]</comment>
                            <comment type="line">// Unicode: [0000 0000] [0xxx xxxx]</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>byte1</name>
                                        &gt;=
                                        <name>byte0</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>byte1</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// UTF-8: [110y yyyy] [10xx xxxx]</comment>
                            <comment type="line">// Unicode: [0000 0yyy] [yyxx xxxx]</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>b0</name> =
                                    <init>
                                        <expr>
                                            <name>byte1</name>
                                            &amp; 0x0FF
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>(<name>b0</name> &amp; 0xE0) == 0xC0 &amp;&amp; (<name>b0</name> &amp; 0x1E)
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b1</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b1</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 1
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 2
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b1</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>c</name> =
                                                <init>
                                                    <expr>((<name>b0</name> &lt;&lt; 6) &amp; 0x07C0) | (<name>b1</name> &amp;
                                                        0x003F)
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>c</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>count</name>
                                                -= 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// UTF-8: [1110 zzzz] [10yy yyyy] [10xx xxxx]</comment>
                            <comment type="line">// Unicode: [zzzz yyyy] [yyxx xxxx]</comment>
                            <if>if
                                <condition>(
                                    <expr>(<name>b0</name> &amp; 0xF0) == 0xE0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b1</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b1</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 1
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>3</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                    || (<name>b0</name> == 0xED &amp;&amp; <name>b1</name> &gt;= 0xA0)
                                                    || ((<name>b0</name> &amp; 0x0F) == 0 &amp;&amp; (<name>b1</name> &amp;
                                                    0x20) == 0)
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 2
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>3</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b1</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b2</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b2</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b2</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b2</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>1</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b1</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 2
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>3</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>3</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b2</name> &amp; 0xC0) != 0x80
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>2</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b2</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 3
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>3</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>3</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>c</name> =
                                                <init>
                                                    <expr>((<name>b0</name> &lt;&lt; 12) &amp; 0xF000) | ((<name>b1
                                                    </name> &lt;&lt; 6) &amp; 0x0FC0) |
                                                        (<name>b2</name> &amp; 0x003F)
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>c</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>count</name>
                                                -= 2
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// UTF-8: [1111 0uuu] [10uu zzzz] [10yy yyyy] [10xx xxxx]*</comment>
                            <comment type="line">// Unicode: [1101 10ww] [wwzz zzyy] (high surrogate)</comment>
                            <comment type="line">// [1101 11yy] [yyxx xxxx] (low surrogate)</comment>
                            <comment type="line">// * uuuuu = wwww + 1</comment>
                            <if>if
                                <condition>(
                                    <expr>(<name>b0</name> &amp; 0xF8) == 0xF0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b1</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b1</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b1</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 1
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>2</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>4</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b1</name> &amp; 0xC0) != 0x80
                                                    || ((<name>b1</name> &amp; 0x30) == 0 &amp;&amp; (<name>b0</name> &amp;
                                                    0x07) == 0)
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 2
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>4</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b1</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b2</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b2</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b2</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b2</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>1</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b1</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 2
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>3</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>4</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b2</name> &amp; 0xC0) != 0x80
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>2</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b2</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 3
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>3</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>4</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>b3</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>++<name>in</name> &lt;
                                                    <name>total</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b3</name>
                                                            =
                                                            <name>
                                                                <name>fBuffer</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>in</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            &amp; 0x00FF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b3</name>
                                                            =
                                                            <call>
                                                                <name><name>fInputStream</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b3</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>out</name>
                                                                            &gt;
                                                                            <name>offset</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b0</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>1</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b1</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>fBuffer</name>
                                                                                        <index>[<expr>2</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                    = (<name>byte</name>)
                                                                                    <name>b2</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fOffset</name>
                                                                                    = 3
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>out</name>
                                                                                    -
                                                                                    <name>offset</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedByte</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>4</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>4</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>b3</name> &amp; 0xC0) != 0x80
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>out</name>
                                                                &gt;
                                                                <name>offset</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b0</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b1</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>2</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b2</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fBuffer</name>
                                                                            <index>[<expr>3</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = (<name>byte</name>)
                                                                        <name>b3</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fOffset</name>
                                                                        = 4
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return
                                                                    <expr>
                                                                        <name>out</name>
                                                                        -
                                                                        <name>offset</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidByte</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>4</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>4</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// decode bytes into surrogate characters</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>uuuuu</name> =
                                                <init>
                                                    <expr>((<name>b0</name> &lt;&lt; 2) &amp; 0x001C) | ((<name>b1
                                                    </name> &gt;&gt; 4) &amp; 0x0003)
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>uuuuu</name>
                                                    &gt; 0x10
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>invalidSurrogate</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>uuuuu</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>wwww</name> =
                                                <init>
                                                    <expr>
                                                        <name>uuuuu</name>
                                                        - 1
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>zzzz</name> =
                                                <init>
                                                    <expr>
                                                        <name>b1</name>
                                                        &amp; 0x000F
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>yyyyyy</name> =
                                                <init>
                                                    <expr>
                                                        <name>b2</name>
                                                        &amp; 0x003F
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>xxxxxx</name> =
                                                <init>
                                                    <expr>
                                                        <name>b3</name>
                                                        &amp; 0x003F
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>hs</name> =
                                                <init>
                                                    <expr>0xD800 | ((<name>wwww</name> &lt;&lt; 6) &amp; 0x03C0) | (<name>
                                                        zzzz
                                                    </name> &lt;&lt; 2) | (<name>yyyyyy</name> &gt;&gt; 4)
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>ls</name> =
                                                <init>
                                                    <expr>0xDC00 | ((<name>yyyyyy</name> &lt;&lt; 6) &amp; 0x03C0) |
                                                        <name>xxxxxx</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <comment type="line">// set characters</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>hs</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr><name>out</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>char</name>)
                                                <name>ls</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>count</name>
                                                -= 2
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// error</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>out</name>
                                        &gt;
                                        <name>offset</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fBuffer</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                = (<name>byte</name>)
                                                <name>b0</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fOffset</name>
                                                = 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>out</name>
                                                -
                                                <name>offset</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>invalidByte</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>b0</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// return number of characters converted</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_READ</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"read(char[],"+<name>offset</name>+','+<name>length</name>+"):
                                                        count="+
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// read(char[],int,int)</comment>

            <comment type="javadoc">/**
                * Skip characters. This method will block until some characters are
                * available, an I/O error occurs, or the end of the stream is reached.
                *
                * @param n The number of characters to skip
                *
                * @return The number of characters actually skipped
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>skip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>remaining</name> =
                            <init>
                                <expr>
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name><name>fBuffer</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <do>do
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name> =
                                    <init>
                                        <expr>
                                            <name><name>ch</name>.
                                                <name>length</name>
                                            </name>
                                            &lt; <name>remaining</name> ?
                                            <name><name>ch</name>.
                                                <name>length</name>
                                            </name>
                                            : (<name>int</name>)
                                            <name>remaining</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>count</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>read</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ch</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>length</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>count</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>remaining</name>
                                                -=
                                                <name>count</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <name>remaining</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        ;
                    </do>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>skipped</name> =
                            <init>
                                <expr>
                                    <name>n</name>
                                    -
                                    <name>remaining</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>skipped</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// skip(long):long</comment>

            <comment type="javadoc">/**
                * Tell whether this stream is ready to be read.
                *
                * @return True if the next read() is guaranteed not to block for input,
                * false otherwise. Note that returning false does not guarantee that the
                * next read will block.
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>ready</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// ready()</comment>

            <comment type="javadoc">/**
                * Tell whether this stream supports the mark() operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>markSupported</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// markSupported()</comment>

            <comment type="javadoc">/**
                * Mark the present position in the stream. Subsequent calls to reset()
                * will attempt to reposition the stream to this point. Not all
                * character-input streams support the mark() operation.
                *
                * @param readAheadLimit Limit on the number of characters that may be
                * read while still preserving the mark. After
                * reading this many characters, attempting to
                * reset the stream may fail.
                *
                * @exception IOException If the stream does not support mark(),
                * or if some other I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>mark</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>readAheadLimit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IOException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fFormatter</name>.
                                                    <name>formatMessage</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fLocale</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"OperationNotSupported"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>new
                                                            <name>
                                                                <name>Object</name>
                                                                <index>[]</index>
                                                            </name>
                                                            <block>{<expr>"mark()"</expr>, <expr>"UTF-8"</expr>}
                                                            </block>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <comment type="line">// mark(int)</comment>

            <comment type="javadoc">/**
                * Reset the stream. If the stream has been marked, then attempt to
                * reposition it at the mark. If the stream has not been marked, then
                * attempt to reset it in some way appropriate to the particular stream,
                * for example by repositioning it to its starting point. Not all
                * character-input streams support the reset() operation, and some support
                * reset() without supporting mark().
                *
                * @exception IOException If the stream has not been marked,
                * or if the mark has been invalidated,
                * or if the stream does not support reset(),
                * or if some other I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fOffset</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSurrogate</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// reset()</comment>

            <comment type="javadoc">/**
                * Close the stream. Once a stream has been closed, further read(),
                * ready(), mark(), or reset() invocations will throw an IOException.
                * Closing a previously-closed stream, however, has no effect.
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// close()</comment>

            <comment type="line">//</comment>
            <comment type="line">// Private methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Throws an exception for expected byte. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>expectedByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedByteSequenceException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <throw>throw
                        <expr>new
                            <call>
                                <name>MalformedByteSequenceException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fFormatter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fLocale</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>XMLMessageFormatter</name>.
                                                <name>XML_DOMAIN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"ExpectedByte"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>position</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ,
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>count</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>

                    }
                </block>
            </function>
            <comment type="line">// expectedByte(int,int)</comment>

            <comment type="javadoc">/** Throws an exception for invalid byte. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>invalidByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedByteSequenceException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <throw>throw
                        <expr>new
                            <call>
                                <name>MalformedByteSequenceException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fFormatter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fLocale</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>XMLMessageFormatter</name>.
                                                <name>XML_DOMAIN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"InvalidByte"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>position</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ,
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>count</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>

                    }
                </block>
            </function>
            <comment type="line">// invalidByte(int,int,int)</comment>

            <comment type="javadoc">/** Throws an exception for invalid surrogate bits. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>invalidSurrogate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>uuuuu</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedByteSequenceException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <throw>throw
                        <expr>new
                            <call>
                                <name>MalformedByteSequenceException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fFormatter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fLocale</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>XMLMessageFormatter</name>.
                                                <name>XML_DOMAIN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"InvalidHighSurrogate"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>toHexString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>uuuuu</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>

                    }
                </block>
            </function>
            <comment type="line">// invalidSurrogate(int)</comment>

            }
        </block>
    </class>
    <comment type="line">// class UTF8Reader</comment>
</unit>
