<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\ValidatedInfo.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>dv</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>ShortList</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Class to get the information back after content is validated. This info
        * would be filled by validate().
        *
        * @xerces.internal
        *
        * @author Neeraj Bajaj, Sun Microsystems, inc.
        *
        * @version $Id: ValidatedInfo.java,v 1.8 2004/10/06 14:56:50 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ValidatedInfo</name>
        <block>{

            <comment type="javadoc">/**
                * The normalized value of a string value
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>String</name>
                    </type>
                    <name>normalizedValue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The actual value from a string value (QName, Boolean, etc.)
                * An array of Objects if the type is a list.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>Object</name>
                    </type>
                    <name>actualValue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The type of the actual value. It's one of the _DT constants
                * defined in XSConstants.java. The value is used to indicate
                * the most specific built-in type.
                * (i.e. short instead of decimal or integer).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>short</name>
                    </type>
                    <name>actualValueType</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * If the type is a union type, then the member type which
                * actually validated the string value.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>XSSimpleType</name>
                    </type>
                    <name>memberType</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * If
                * 1. the type is a union type where one of the member types is a list, or
                * if the type is a list; and
                * 2. the item type of the list is a union type
                * then an array of member types used to validate the values.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>XSSimpleType</name>
                        <index>[]</index>
                    </type>
                    <name>memberTypes</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * In the case the value is a list or a list of unions, this value
                * indicates the type(s) of the items in the list.
                * For a normal list, the length of the array is 1; for list of unions,
                * the length of the array is the same as the length of the list.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>ShortList</name>
                    </type>
                    <name>itemValueTypes</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * reset the state of this object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>normalizedValue</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>actualValue</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>memberType</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>memberTypes</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return a string representation of the value. If there is an actual
                * value, use toString; otherwise, use the normalized value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>stringValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>actualValue</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>normalizedValue</name>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>actualValue</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
