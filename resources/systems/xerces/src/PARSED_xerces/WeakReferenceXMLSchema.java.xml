<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\jaxp\validation\WeakReferenceXMLSchema.java">
    <comment type="block">/*
        * Copyright 2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>jaxp</name>.
            <name>validation</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>WeakReference</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarPool</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;An implementation of Schema for W3C XML Schemas
        * that keeps a weak reference to its grammar pool. If
        * no validators currently have a reference to the
        * grammar pool, the garbage collector is free to reclaim
        * its memory.&lt;/p&gt;
        *
        * @author Michael Glavassevich, IBM
        * @version $Id: WeakReferenceXMLSchema.java,v 1.1 2005/05/14 20:37:18 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>WeakReferenceXMLSchema</name>
        <super>
            <extends>extends
                <name>AbstractXMLSchema</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Weak reference to grammar pool. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>WeakReference</name>
                    </type>
                    <name>fGrammarPool</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>WeakReference</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>WeakReferenceXMLSchema</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="block">/*
                * XSGrammarPoolContainer methods
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>XMLGrammarPool</name>
                </type>
                <name>getGrammarPool</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLGrammarPool</name>
                            </type>
                            <name>grammarPool</name> =
                            <init>
                                <expr>(<name>XMLGrammarPool</name>)
                                    <call>
                                        <name><name>fGrammarPool</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// If there's no grammar pool then either we haven't created one</comment>
                    <comment type="line">// yet or the garbage collector has already cleaned out the previous one.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>grammarPool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>grammarPool</name>
                                        = new
                                        <call>
                                            <name>SoftReferenceGrammarPool</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fGrammarPool</name>
                                        = new
                                        <call>
                                            <name>WeakReference</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>grammarPool</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>grammarPool</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFullyComposed</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// WeakReferenceXMLSchema</comment>
</unit>
