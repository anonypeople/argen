<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xinclude\XIncludeNamespaceSupport.java">
    <comment type="block">/*
        * Copyright 2003-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xinclude</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>NamespaceContext</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This is an implementation of NamespaceContext which is intended to be used for
        * XInclude processing. It enables each context to be marked as invalid, if necessary,
        * to indicate that the namespaces recorded on those contexts won't be apparent in the
        * resulting infoset.
        *
        * @author Peter McCracken, IBM
        *
        * @version $Id: XIncludeNamespaceSupport.java,v 1.7 2005/01/11 13:40:29 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XIncludeNamespaceSupport</name>
        <super>
            <extends>extends
                <name>MultipleScopeNamespaceSupport</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * This stores whether or not the context at the matching depth was valid.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fValidContext</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[<expr>8</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XIncludeNamespaceSupport</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * @param context
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XIncludeNamespaceSupport</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>NamespaceContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>context</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Pushes a new context onto the stack.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>pushContext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>pushContext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentContext</name>
                                + 1 ==
                                <name><name>fValidContext</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                            <index>[]</index>
                                        </type>
                                        <name>contextarray</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>boolean</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>fValidContext</name>.
                                                                <name>length</name>
                                                            </name>
                                                            * 2
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fValidContext</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>contextarray</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fValidContext</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fValidContext</name>
                                        =
                                        <name>contextarray</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>
                                <name>fValidContext</name>
                                <index>[
                                    <expr>
                                        <name>fCurrentContext</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This method is used to set a context invalid for XInclude namespace processing.
                * Any context defined by an &amp;lt;include&amp;gt; or &amp;lt;fallback&amp;gt; element is not
                * valid for processing the include parent's [in-scope namespaces]. Thus, contexts
                * defined by these elements are set to invalid by the XInclude processor using
                * this method.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setContextInvalid</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>fValidContext</name>
                                <index>[
                                    <expr>
                                        <name>fCurrentContext</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This returns the namespace URI which was associated with the given pretext, in
                * the context that existed at the include parent of the current element. The
                * include parent is the last element, before the current one, which was not set
                * to an invalid context using setContextInvalid()
                *
                * @param prefix the prefix of the desired URI
                * @return the URI corresponding to the prefix in the context of the include parent
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getURIFromIncludeParent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastValidContext</name> =
                            <init>
                                <expr>
                                    <name>fCurrentContext</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>lastValidContext</name>
                                &gt; 0 &amp;&amp; !
                                <name>
                                    <name>fValidContext</name>
                                    <index>[
                                        <expr>
                                            <name>lastValidContext</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr><name>lastValidContext</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <call>
                                <name>getURI</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lastValidContext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
