<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\XML11DTDScannerImpl.java">
    <comment type="block">/*
        * Copyright 1999-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>impl</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XML11Char</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLChar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLStringBuffer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLString</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class is responsible for scanning the declarations found
        * in the internal and external subsets of a DTD in an XML document.
        * The scanner acts as the sources for the DTD information which is
        * communicated to the DTD handlers.
        * &lt;p&gt;
        * This component requires the following features and properties from the
        * component manager that uses it:
        * &lt;ul&gt;
        * &lt;li&gt;http://xml.org/sax/features/validation&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/features/scanner/notify-char-refs&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/symbol-table&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/error-reporter&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/entity-manager&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * @xerces.internal
        *
        * @author Arnaud Le Hors, IBM
        * @author Andy Clark, IBM
        * @author Glenn Marcy, IBM
        * @author Eric Ye, IBM
        *
        * @version $Id: XML11DTDScannerImpl.java,v 1.13 2004/10/04 21:45:48 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>XML11DTDScannerImpl</name>
        <super>
            <extends>extends
                <name>XMLDTDScannerImpl</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Array of 3 strings. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>fStrings</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>String</name>
                                <index>[<expr>3</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** String. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XMLString</name>
                    </type>
                    <name>fString</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** String buffer. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XMLStringBuffer</name>
                    </type>
                    <name>fStringBuffer</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLStringBuffer</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** String buffer. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XMLStringBuffer</name>
                    </type>
                    <name>fStringBuffer2</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLStringBuffer</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XMLStringBuffer</name>
                    </type>
                    <name>fStringBuffer3</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLStringBuffer</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XML11DTDScannerImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="javadoc">/** Constructor for he use of non-XMLComponentManagers. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XML11DTDScannerImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLErrorReporter</name>
                            </type>
                            <name>errorReporter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLEntityManager</name>
                            </type>
                            <name>entityManager</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbolTable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>errorReporter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entityManager</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// XMLDTDScanner methods</comment>
            <comment type="line">//</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLScanner methods</comment>
            <comment type="line">//</comment>
            <comment type="line">// NOTE: this is a carbon copy of the code in XML11DocumentScannerImpl;</comment>
            <comment type="line">// we need to override these methods in both places. Ah for</comment>
            <comment type="line">// multiple inheritance...</comment>
            <comment type="line">// This needs to be refactored!!! - NG</comment>
            <comment type="javadoc">/**
                * Scans public ID literal.
                *
                * [12] PubidLiteral ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"
                * [13] PubidChar::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]
                *
                * The returned string is normalized according to the following rule,
                * from http://www.w3.org/TR/REC-xml#dt-pubid:
                *
                * Before a match is attempted, all strings of white space in the public
                * identifier must be normalized to single space characters (#x20), and
                * leading and trailing white space must be removed.
                *
                * @param literal The string to fill in with the public ID literal.
                * @return True on success.
                *
                * &lt;strong&gt;Note:&lt;/strong&gt; This method uses fStringBuffer, anything in it at
                * the time of calling is lost.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>scanPubidLiteral</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>literal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quote</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fEntityScanner</name>.
                                            <name>scanChar</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>quote</name>
                                != '\'' &amp;&amp; <name>quote</name> != '"'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportFatalError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"QuoteRequiredInPublicID"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fStringBuffer</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// skip leading whitespace</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>skipSpace</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>dataok</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fEntityScanner</name>.
                                                    <name>scanChar</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// REVISIT: it could really only be \n or 0x20; all else is normalized,
                                no? - neilg
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>c</name>
                                        == ' ' || <name>c</name> == '\n' || <name>c</name> == '\r' || <name>c</name> ==
                                        0x85 || <name>c</name> == 0x2028
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>skipSpace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// take the first whitespace as a space and
                                                        skip the others
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fStringBuffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>' '</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>skipSpace</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>c</name>
                                                ==
                                                <name>quote</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>skipSpace</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// if we finished on a space let's trim
                                                                it
                                                            </comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>fStringBuffer</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    --
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>literal</name>.
                                                                <name>setValues</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fStringBuffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>XMLChar</name>.
                                                                <name>isPubid</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>c</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fStringBuffer</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>char</name>)
                                                                                <name>c</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>skipSpace</name>
                                                                = false
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>reportFatalError</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"PublicIDUnterminated"</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>null</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>dataok</name>
                                                                        = false
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>reportFatalError</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"InvalidCharInPublicID"</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>new
                                                                                        <name>
                                                                                            <name>Object</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                        <block>{
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        Integer</name>.
                                                                                                        <name>
                                                                                                            toHexString
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    c
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            }
                                                                                        </block>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>dataok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Normalize whitespace in an XMLString converting all whitespace
                * characters to space characters.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>normalizeWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <name><name>value</name>.
                                        <name>offset</name>
                                    </name>
                                    +
                                    <name><name>value</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>value</name>.
                                            <name>offset</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>value</name>.
                                                <name>ch</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>XMLChar</name>.
                                                <name>isSpace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>value</name>.
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = ' '
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Normalize whitespace in an XMLString converting all whitespace
                * characters to space characters.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>normalizeWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fromIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <name><name>value</name>.
                                        <name>offset</name>
                                    </name>
                                    +
                                    <name><name>value</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>value</name>.
                                            <name>offset</name>
                                        </name>
                                        +
                                        <name>fromIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>value</name>.
                                                <name>ch</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>XMLChar</name>.
                                                <name>isSpace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>value</name>.
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = ' '
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether this string would be unchanged by normalization.
                *
                * @return -1 if the value would be unchanged by normalization,
                * otherwise the index of the first whitespace character which
                * would be transformed.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>isUnchangedByNormalization</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <name><name>value</name>.
                                        <name>offset</name>
                                    </name>
                                    +
                                    <name><name>value</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>value</name>.
                                            <name>offset</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>end</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>value</name>.
                                                <name>ch</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>XMLChar</name>.
                                                <name>isSpace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                                -
                                                <name><name>value</name>.
                                                    <name>offset</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// returns true if the given character is not</comment>
            <comment type="line">// valid with respect to the version of</comment>
            <comment type="line">// XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isInvalid</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(!
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11Valid</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isInvalid(int): boolean</comment>

            <comment type="line">// returns true if the given character is not</comment>
            <comment type="line">// valid or may not be used outside a character reference</comment>
            <comment type="line">// with respect to the version of XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isInvalidLiteral</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(!
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11ValidLiteral</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isInvalidLiteral(int): boolean</comment>

            <comment type="line">// returns true if the given character is</comment>
            <comment type="line">// a valid nameChar with respect to the version of</comment>
            <comment type="line">// XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidNameChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11Name</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isValidNameChar(int): boolean</comment>

            <comment type="line">// returns true if the given character is</comment>
            <comment type="line">// a valid nameStartChar with respect to the version of</comment>
            <comment type="line">// XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidNameStartChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11NameStart</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isValidNameStartChar(int): boolean</comment>

            <comment type="line">// returns true if the given character is</comment>
            <comment type="line">// a valid NCName character with respect to the version of</comment>
            <comment type="line">// XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidNCName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11NCName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isValidNCName(int): boolean</comment>

            <comment type="line">// returns true if the given character is</comment>
            <comment type="line">// a valid high surrogate for a nameStartChar</comment>
            <comment type="line">// with respect to the version of XML understood</comment>
            <comment type="line">// by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidNameStartHighSurrogate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>XML11Char</name>.
                                    <name>isXML11NameHighSurrogate</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// isValidNameStartHighSurrogate(int): boolean</comment>

            <comment type="line">// note that, according to 4.3.4 of the XML 1.1 spec, XML 1.1</comment>
            <comment type="line">// documents may invoke 1.0 entities; thus either version decl (or none!)</comment>
            <comment type="line">// is allowed to appear in this context</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>versionSupported</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>version</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>version</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.0"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// versionSupported(String): boolean</comment>

            <comment type="line">// returns the error message key for unsupported</comment>
            <comment type="line">// versions of XML with respect to the version of</comment>
            <comment type="line">// XML understood by this scanner.</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>String</name>
                </type>
                <name>getVersionNotSupportedKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>"VersionNotSupported11"</expr>;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getVersionNotSupportedKey: String</comment>

            }
        </block>
    </class>
    <comment type="line">// class XML11DTDScannerImpl</comment>
</unit>
