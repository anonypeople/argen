<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\XMLAttributes.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xni</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * The XMLAttributes interface defines a collection of attributes for
        * an element. In the parser, the document source would scan the entire
        * start element and collect the attributes. The attributes are
        * communicated to the document handler in the startElement method.
        * &lt;p&gt;
        * The attributes are read-write so that subsequent stages in the document
        * pipeline can modify the values or change the attributes that are
        * propogated to the next stage.
        *
        * @see XMLDocumentHandler#startElement
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: XMLAttributes.java,v 1.11 2004/10/03 21:53:25 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XMLAttributes</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// XMLAttributes methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Adds an attribute. The attribute's non-normalized value of the
                * attribute will have the same value as the attribute value until
                * set using the &lt;code&gt;setNonNormalizedValue&lt;/code&gt; method. Also,
                * the added attribute will be marked as specified in the XML instance
                * document unless set otherwise using the &lt;code&gt;setSpecified&lt;/code&gt;
                * method.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; If an attribute of the same name already
                * exists, the old values for the attribute are replaced by the new
                * values.
                *
                * @param attrName The attribute name.
                * @param attrType The attribute type. The type name is determined by
                * the type specified for this attribute in the DTD.
                * For example: "CDATA", "ID", "NMTOKEN", etc. However,
                * attributes of type enumeration will have the type
                * value specified as the pipe ('|') separated list of
                * the enumeration values prefixed by an open
                * parenthesis and suffixed by a close parenthesis.
                * For example: "(true|false)".
                * @param attrValue The attribute value.
                *
                * @return Returns the attribute index.
                *
                * @see #setNonNormalizedValue
                * @see #setSpecified
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>addAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all of the attributes. This method will also remove all
                * entities associated to the attributes.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAllAttributes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Removes the attribute at the specified index.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This operation changes the indexes of all
                * attributes following the attribute at the specified index.
                *
                * @param attrIndex The attribute index.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAttributeAt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of attributes in the list.
                * &lt;p&gt;
                * Once you know the number of attributes, you can iterate
                * through the list.
                *
                * @see #getURI(int)
                * @see #getLocalName(int)
                * @see #getQName(int)
                * @see #getType(int)
                * @see #getValue(int)
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Look up the index of an attribute by XML 1.0 qualified name.
                *
                * @param qName The qualified (prefixed) name.
                *
                * @return The index of the attribute, or -1 if it does not
                * appear in the list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up the index of an attribute by Namespace name.
                *
                * @param uri The Namespace URI, or the empty string if
                * the name has no Namespace URI.
                * @param localPart The attribute's local name.
                *
                * @return The index of the attribute, or -1 if it does not
                * appear in the list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localPart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the name of the attribute at the specified index.
                *
                * @param attrIndex The attribute index.
                * @param attrName The new attribute name.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the fields in the given QName structure with the values
                * of the attribute name at the specified index.
                *
                * @param attrIndex The attribute index.
                * @param attrName The attribute name structure to fill in.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>getName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the prefix of the attribute at the specified index.
                *
                * @param index The index of the attribute.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's Namespace URI by index.
                *
                * @param index The attribute index (zero-based).
                *
                * @return The Namespace URI, or the empty string if none
                * is available, or null if the index is out of
                * range.
                *
                * @see #getLength
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's local name by index.
                *
                * @param index The attribute index (zero-based).
                *
                * @return The local name, or the empty string if Namespace
                * processing is not being performed, or null
                * if the index is out of range.
                *
                * @see #getLength
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getLocalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's XML 1.0 qualified name by index.
                *
                * @param index The attribute index (zero-based).
                *
                * @return The XML 1.0 qualified name, or the empty string
                * if none is available, or null if the index
                * is out of range.
                *
                * @see #getLength
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getQName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the type of the attribute at the specified index.
                *
                * @param attrIndex The attribute index.
                * @param attrType The attribute type. The type name is determined by
                * the type specified for this attribute in the DTD.
                * For example: "CDATA", "ID", "NMTOKEN", etc. However,
                * attributes of type enumeration will have the type
                * value specified as the pipe ('|') separated list of
                * the enumeration values prefixed by an open
                * parenthesis and suffixed by a close parenthesis.
                * For example: "(true|false)".
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's type by index.
                * &lt;p&gt;
                * The attribute type is one of the strings "CDATA", "ID",
                * "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES",
                * or "NOTATION" (always in upper case).
                * &lt;p&gt;
                * If the parser has not read a declaration for the attribute,
                * or if the parser does not report attribute types, then it must
                * return the value "CDATA" as stated in the XML 1.0 Recommentation
                * (clause 3.3.3, "Attribute-Value Normalization").
                * &lt;p&gt;
                * For an enumerated attribute that is not a notation, the
                * parser will report the type as "NMTOKEN".
                *
                * @param index The attribute index (zero-based).
                *
                * @return The attribute's type as a string, or null if the
                * index is out of range.
                *
                * @see #getLength
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's type by XML 1.0 qualified name.
                * &lt;p&gt;
                * See {@link #getType(int) getType(int)} for a description
                * of the possible types.
                *
                * @param qName The XML 1.0 qualified name.
                *
                * @return The attribute type as a string, or null if the
                * attribute is not in the list or if qualified names
                * are not available.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's type by Namespace name.
                * &lt;p&gt;
                * See {@link #getType(int) getType(int)} for a description
                * of the possible types.
                *
                * @param uri The Namespace URI, or the empty String if the
                * name has no Namespace URI.
                * @param localName The local name of the attribute.
                *
                * @return The attribute type as a string, or null if the
                * attribute is not in the list or if Namespace
                * processing is not being performed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the attribute at the specified index. This
                * method will overwrite the non-normalized value of the attribute.
                *
                * @param attrIndex The attribute index.
                * @param attrValue The new attribute value.
                *
                * @see #setNonNormalizedValue
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's value by index.
                * &lt;p&gt;
                * If the attribute value is a list of tokens (IDREFS,
                * ENTITIES, or NMTOKENS), the tokens will be concatenated
                * into a single string with each token separated by a
                * single space.
                *
                * @param index The attribute index (zero-based).
                *
                * @return The attribute's value as a string, or null if the
                * index is out of range.
                *
                * @see #getLength
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's value by XML 1.0 qualified name.
                * &lt;p&gt;
                * See {@link #getValue(int) getValue(int)} for a description
                * of the possible values.
                *
                * @param qName The XML 1.0 qualified name.
                *
                * @return The attribute value as a string, or null if the
                * attribute is not in the list or if qualified names
                * are not available.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an attribute's value by Namespace name.
                * &lt;p&gt;
                * See {@link #getValue(int) getValue(int)} for a description
                * of the possible values.
                *
                * @param uri The Namespace URI, or the empty String if the
                * name has no Namespace URI.
                * @param localName The local name of the attribute.
                *
                * @return The attribute value as a string, or null if the
                * attribute is not in the list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the non-normalized value of the attribute at the specified
                * index.
                *
                * @param attrIndex The attribute index.
                * @param attrValue The new non-normalized attribute value.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNonNormalizedValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the non-normalized value of the attribute at the specified
                * index. If no non-normalized value is set, this method will return
                * the same value as the &lt;code&gt;getValue(int)&lt;/code&gt; method.
                *
                * @param attrIndex The attribute index.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNonNormalizedValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets whether an attribute is specified in the instance document
                * or not.
                *
                * @param attrIndex The attribute index.
                * @param specified True if the attribute is specified in the instance
                * document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSpecified</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>specified</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true if the attribute is specified in the instance document.
                *
                * @param attrIndex The attribute index.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSpecified</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Look up an augmentation by attribute's index.
                *
                * @param attributeIndex The attribute index.
                * @return Augmentations
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Augmentations</name>
                </type>
                <name>getAugmentations</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attributeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up an augmentation by namespace name.
                *
                * @param uri The Namespace URI, or the empty string if
                * the name has no Namespace URI.
                * @param localPart
                * @return Augmentations
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Augmentations</name>
                </type>
                <name>getAugmentations</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localPart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Look up an augmentation by XML 1.0 qualified name.
                * &lt;p&gt;
                *
                * @param qName The XML 1.0 qualified name.
                *
                * @return Augmentations
                *
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Augmentations</name>
                </type>
                <name>getAugmentations</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the augmentations of the attribute at the specified index.
                *
                * @param attrIndex The attribute index.
                * @param augs The augmentations.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAugmentations</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            }
        </block>
    </class>
    <comment type="line">// interface XMLAttributes</comment>
</unit>
