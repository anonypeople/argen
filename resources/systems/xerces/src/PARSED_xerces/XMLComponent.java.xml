<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\parser\XMLComponent.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>parser</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * The component interface defines methods that must be implemented
        * by components in a parser configuration. The component methods allow
        * the component manager to initialize the component state and notify
        * the component when feature and property values change.
        *
        * @see XMLComponentManager
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: XMLComponent.java,v 1.6 2004/02/24 23:15:56 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XMLComponent</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// XMLComponent methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Resets the component. The component can query the component manager
                * about any features and properties that affect the operation of the
                * component.
                *
                * @param componentManager The component manager.
                *
                * @throws XNIException Thrown by component on initialization error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLComponentManager</name>
                            </type>
                            <name>componentManager</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a list of feature identifiers that are recognized by
                * this component. This method may return null if no features
                * are recognized by this component.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedFeatures</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the state of a feature. This method is called by the component
                * manager any time after reset when a feature changes state.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore features
                * that do not affect the operation of the component.
                *
                * @param featureId The feature identifier.
                * @param state The state of the feature.
                *
                * @throws XMLConfigurationException Thrown for configuration error.
                * In general, components should
                * only throw this exception if
                * it is &lt;strong&gt;really&lt;/strong&gt;
                * a critical error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a list of property identifiers that are recognized by
                * this component. This method may return null if no properties
                * are recognized by this component.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedProperties</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of a property. This method is called by the component
                * manager any time after reset when a property changes value.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore properties
                * that do not affect the operation of the component.
                *
                * @param propertyId The property identifier.
                * @param value The value of the property.
                *
                * @throws XMLConfigurationException Thrown for configuration error.
                * In general, components should
                * only throw this exception if
                * it is &lt;strong&gt;really&lt;/strong&gt;
                * a critical error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the default state for a feature, or null if this
                * component does not want to report a default value for this
                * feature.
                *
                * @param featureId The feature identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Boolean</name>
                </type>
                <name>getFeatureDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the default state for a property, or null if this
                * component does not want to report a default value for this
                * property.
                *
                * @param propertyId The property identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getPropertyDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
    <comment type="line">// interface XMLComponent</comment>
</unit>
