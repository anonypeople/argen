<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dtd\XMLContentSpec.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>dtd</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * ContentSpec really exists to aid the parser classes in implementing
        * access to the grammar.
        * &lt;p&gt;
        * This class is used by the DTD scanner and the validator classes,
        * allowing them to be used separately or together. This "struct"
        * class is used to build content models for validation, where it
        * is more efficient to fetch all of the information for each of
        * these content model "fragments" than to fetch each field one at
        * a time. Since configurations are allowed to have validators
        * without a DTD scanner (i.e. a schema validator) and a DTD scanner
        * without a validator (non-validating processor), this class can be
        * used by each without requiring the presence of the other.
        * &lt;p&gt;
        * When processing element declarations, the DTD scanner will build
        * up a representation of the content model using the node types that
        * are defined here. Since a non-validating processor only needs to
        * remember the type of content model declared (i.e. ANY, EMPTY, MIXED,
        * or CHILDREN), it is free to discard the specific details of the
        * MIXED and CHILDREN content models described using this class.
        * &lt;p&gt;
        * In the typical case of a validating processor reading the grammar
        * of the document from a DTD, the information about the content model
        * declared will be preserved and later "compiled" into an efficient
        * form for use during element validation. Each content spec node
        * that is saved is assigned a unique index that is used as a handle
        * for the "value" or "otherValue" fields of other content spec nodes.
        * A leaf node has a "value" that is either an index in the string
        * pool of the element type of that leaf, or a value of -1 to indicate
        * the special "#PCDATA" leaf type used in a mixed content model.
        * &lt;p&gt;
        * For a mixed content model, the content spec will be made up of
        * leaf and choice content spec nodes, with an optional "zero or more"
        * node. For example, the mixed content declaration "(#PCDATA)" would
        * contain a single leaf node with a node value of -1. A mixed content
        * declaration of "(#PCDATA|foo)*" would have a content spec consisting
        * of two leaf nodes, for the "#PCDATA" and "foo" choices, a choice node
        * with the "value" set to the index of the "#PCDATA" leaf node and the
        * "otherValue" set to the index of the "foo" leaf node, and a "zero or
        * more" node with the "value" set to the index of the choice node. If
        * the content model has more choices, for example "(#PCDATA|a|b)*", then
        * there will be more corresponding choice and leaf nodes, the choice
        * nodes will be chained together through the "value" field with each
        * leaf node referenced by the "otherValue" field.
        * &lt;p&gt;
        * For element content models, there are sequence nodes and also "zero or
        * one" and "one or more" nodes. The leaf nodes would always have a valid
        * string pool index, as the "#PCDATA" leaf is not used in the declarations
        * for element content models.
        *
        * @xerces.internal
        *
        * @version $Id: XMLContentSpec.java,v 1.5 2004/10/04 21:57:30 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XMLContentSpec</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Name or #PCDATA. Leaf nodes that represent parsed character
                * data (#PCDATA) have values of -1.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_LEAF</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents a zero or one occurence count, '?'. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ZERO_OR_ONE</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents a zero or more occurence count, '*'. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ZERO_OR_MORE</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents a one or more occurence count, '+'. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ONE_OR_MORE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents choice, '|'. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_CHOICE</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents sequence, ','. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_SEQ</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Represents any namespace specified namespace. When the element
                * found in the document must belong to a specific namespace,
                * &lt;code&gt;otherValue&lt;/code&gt; will contain the name of the namespace.
                * If &lt;code&gt;otherValue&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; then the element
                * can be from any namespace.
                * &lt;p&gt;
                * Lists of valid namespaces are created from choice content spec
                * nodes that have any content spec nodes as children.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Represents any other namespace (XML Schema: ##other).
                * &lt;p&gt;
                * When the content spec node type is set to CONTENTSPECNODE_ANY_OTHER,
                * &lt;code&gt;value&lt;/code&gt; will contain the namespace that &lt;em&gt;cannot&lt;/em&gt;
                * occur.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_OTHER</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Represents any local element (XML Schema: ##local). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_LOCAL</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** prcessContent is 'lax' **/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_LAX</name> =
                    <init>
                        <expr>22</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_OTHER_LAX</name> =
                    <init>
                        <expr>23</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_LOCAL_LAX</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** processContent is 'skip' **/</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_SKIP</name> =
                    <init>
                        <expr>38</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_OTHER_SKIP</name> =
                    <init>
                        <expr>39</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTSPECNODE_ANY_LOCAL_SKIP</name> =
                    <init>
                        <expr>40</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * The content spec node type.
                *
                * @see #CONTENTSPECNODE_LEAF
                * @see #CONTENTSPECNODE_ZERO_OR_ONE
                * @see #CONTENTSPECNODE_ZERO_OR_MORE
                * @see #CONTENTSPECNODE_ONE_OR_MORE
                * @see #CONTENTSPECNODE_CHOICE
                * @see #CONTENTSPECNODE_SEQ
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>short</name>
                    </type>
                    <name>type</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The "left hand" value object of the content spec node.
                * leaf name.localpart, single child for unary ops, left child for binary ops.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>Object</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The "right hand" value of the content spec node.
                * leaf name.uri, right child for binary ops
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>Object</name>
                    </type>
                    <name>otherValue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLContentSpec</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** Constructs a content spec with the specified values. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLContentSpec</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>otherValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setValues</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>otherValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a content spec from the values in the specified content spec.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLContentSpec</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLContentSpec</name>
                            </type>
                            <name>contentSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setValues</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>contentSpec</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a content spec from the values specified by the given
                * content spec provider and identifier.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLContentSpec</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>XMLContentSpec</name>.
                                    <name>Provider</name>
                                </name>
                            </type>
                            <name>provider</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>contentSpecIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setValues</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>provider</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>contentSpecIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Clears the values. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>type</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>otherValue</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Sets the values. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>otherValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>type</name>
                            </name>
                            =
                            <name>type</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>otherValue</name>
                            </name>
                            =
                            <name>otherValue</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Sets the values of the specified content spec. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLContentSpec</name>
                            </type>
                            <name>contentSpec</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>type</name>
                            =
                            <name><name>contentSpec</name>.
                                <name>type</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name><name>contentSpec</name>.
                                <name>value</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>otherValue</name>
                            =
                            <name><name>contentSpec</name>.
                                <name>otherValue</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the values from the values specified by the given content spec
                * provider and identifier. If the specified content spec cannot be
                * provided, the values of this content spec are cleared.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>XMLContentSpec</name>.
                                    <name>Provider</name>
                                </name>
                            </type>
                            <name>provider</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>contentSpecIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>provider</name>.
                                        <name>getContentSpec</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>contentSpecIndex</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clear</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="line">//</comment>
            <comment type="line">// Object methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Returns a hash code for this node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>type</name>
                            &lt;&lt; 16 |
                            <call>
                                <name><name>value</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &lt;&lt; 8 |
                            <call>
                                <name><name>otherValue</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns true if the two objects are equal. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                != <name>null</name> &amp;&amp; <name>object</name>
                                <name>instanceof</name>
                                <name>XMLContentSpec</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XMLContentSpec</name>
                                        </type>
                                        <name>contentSpec</name> =
                                        <init>
                                            <expr>(<name>XMLContentSpec</name>)
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>contentSpec</name>.
                                            <name>type</name>
                                        </name>
                                        &amp;&amp;
                                        <name>value</name>
                                        ==
                                        <name><name>contentSpec</name>.
                                            <name>value</name>
                                        </name>
                                        &amp;&amp;
                                        <name>otherValue</name>
                                        ==
                                        <name><name>contentSpec</name>.
                                            <name>otherValue</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="line">//</comment>
            <comment type="line">// Interfaces</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Provides a means for walking the structure built out of
                * content spec "nodes". The user of this provider interface is
                * responsible for knowing what the content spec node values
                * "mean". If those values refer to content spec identifiers,
                * then the user can call back into the provider to get the
                * next content spec node in the structure.
                *
                * @xerces.internal
                */
            </comment>
            <class type="interface">
                <specifier>public</specifier>
                interface <name>Provider</name>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// XMLContentSpec.Provider methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/**
                        * Fills in the provided content spec structure with content spec
                        * information for a unique identifier.
                        *
                        * @param contentSpecIndex The content spec identifier. All content
                        * spec "nodes" have a unique identifier.
                        * @param contentSpec The content spec struct to fill in with
                        * the information.
                        *
                        * @return Returns true if the contentSpecIndex was found.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>getContentSpec</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>contentSpecIndex</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLContentSpec</name>
                                    </type>
                                    <name>contentSpec</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    }
                </block>
            </class>
            <comment type="line">// interface Provider</comment>

            }
        </block>
    </class>
    <comment type="line">// class XMLContentSpec</comment>

</unit>
