<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dtd\XMLDTDDescription.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>dtd</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarDescription</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLResourceIdentifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLInputSource</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLResourceIdentifierImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * All information specific to DTD grammars.
        *
        * @xerces.internal
        *
        * @author Neil Graham, IBM
        * @version $Id: XMLDTDDescription.java,v 1.9 2004/10/04 21:57:30 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XMLDTDDescription</name>
        <super>
            <extends>extends
                <name>XMLResourceIdentifierImpl</name>
            </extends>
            <implements>implements <name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>
                grammars</name>.
                <name>XMLDTDDescription</name>
            </implements>
        </super>
        <block>{

            <comment type="line">// Data</comment>

            <comment type="line">// pieces of information needed to make this usable as a Grammar key</comment>
            <comment type="line">// if we know the root of this grammar, here's its name:</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fRootName</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// if we don't know the root name, this stores all elements that</comment>
            <comment type="line">// could serve; fPossibleRoots and fRootName cannot both be non-null</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Vector</name>
                    </type>
                    <name>fPossibleRoots</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Constructors:</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLDTDDescription</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>id</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setValues</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>id</name>.
                                                    <name>getPublicId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>id</name>.
                                                    <name>getLiteralSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>id</name>.
                                                    <name>getBaseSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>id</name>.
                                                    <name>getExpandedSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fRootName</name>
                            </name>
                            =
                            <name>rootName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fPossibleRoots</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// init(XMLResourceIdentifier, String)</comment>

            <constructor>
                <specifier>public</specifier>
                <name>XMLDTDDescription</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>literalId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expandedId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setValues</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>publicId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>literalId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>baseId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expandedId</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fRootName</name>
                            </name>
                            =
                            <name>rootName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fPossibleRoots</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// init(String, String, String, String, String)</comment>

            <constructor>
                <specifier>public</specifier>
                <name>XMLDTDDescription</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setValues</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>source</name>.
                                                    <name>getPublicId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>source</name>.
                                                    <name>getBaseSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>source</name>.
                                                    <name>getSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fRootName</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fPossibleRoots</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// init(XMLInputSource)</comment>

            <comment type="line">// XMLGrammarDescription methods</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getGrammarType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>XMLGrammarDescription</name>.
                                <name>XML_DTD</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getGrammarType(): String</comment>

            <comment type="javadoc">/**
                * @return the root name of this DTD or null if root name is unknown
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getRootName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fRootName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getRootName(): String</comment>

            <comment type="javadoc">/** Set the root name **/</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setRootName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fRootName</name>
                            =
                            <name>rootName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fPossibleRoots</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Set possible roots **/</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPossibleRoots</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>possibleRoots</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fPossibleRoots</name>
                            =
                            <name>possibleRoots</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares this grammar with the given grammar. Currently, we compare
                * as follows:
                * - if grammar type not equal return false immediately
                * - try and find a common root name:
                * - if both have roots, use them
                * - else if one has a root, examine other's possible root's for a match;
                * - else try all combinations
                * - test fExpandedSystemId and fPublicId as above
                *
                * @param desc The description of the grammar to be compared with
                * @return True if they are equal, else false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!(<name>desc</name>
                                <name>instanceof</name>
                                <name>XMLGrammarDescription</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>getGrammarType</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>equals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>((<name>XMLGrammarDescription</name>)<name>desc</name>).
                                                <call>
                                                    <name>getGrammarType</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// assume it's a DTDDescription</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLDTDDescription</name>
                            </type>
                            <name>dtdDesc</name> =
                            <init>
                                <expr>(<name>XMLDTDDescription</name>)
                                    <name>desc</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fRootName</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>(
                                            <name><name>dtdDesc</name>.
                                                <name>fRootName</name>
                                            </name>
                                            ) != <name>null</name> &amp;&amp; !
                                            <call>
                                                <name><name>dtdDesc</name>.<name>fRootName</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fRootName</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>dtdDesc</name>.
                                                        <name>fPossibleRoots</name>
                                                    </name>
                                                    != <name>null</name> &amp;&amp; !
                                                    <call>
                                                        <name><name>dtdDesc</name>.<name>fPossibleRoots</name>.
                                                            <name>contains</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fRootName</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fPossibleRoots</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>dtdDesc</name>.
                                                        <name>fRootName</name>
                                                    </name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>!
                                                                <call>
                                                                    <name><name>fPossibleRoots</name>.
                                                                        <name>contains</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>dtdDesc</name>.
                                                                                    <name>fRootName</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>dtdDesc</name>.
                                                                <name>fPossibleRoots</name>
                                                            </name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>boolean</name>
                                                                    </type>
                                                                    <name>found</name> =
                                                                    <init>
                                                                        <expr>false</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <for>for(
                                                                <init>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>i</name> =
                                                                        <init>
                                                                            <expr>0</expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </init>
                                                                <condition>
                                                                    <expr><name>i</name>&lt;
                                                                        <call>
                                                                            <name><name>fPossibleRoots</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </condition>
                                                                <incr>
                                                                    <expr><name>i</name>++
                                                                    </expr>
                                                                </incr>
                                                                )
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>String</name>
                                                                            </type>
                                                                            <name>root</name> =
                                                                            <init>
                                                                                <expr>(<name>String</name>)
                                                                                    <call>
                                                                                        <name><name>
                                                                                            fPossibleRoots</name>.
                                                                                            <name>elementAt</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>found</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>dtdDesc</name>.<name>
                                                                                    fPossibleRoots</name>.
                                                                                    <name>contains</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>root</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>found</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <break>break;</break>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </for>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>!
                                                                        <name>found</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// if we got this far we've got a root match... try other two fields,</comment>
                    <comment type="line">// since so many different DTD's have roots in common:</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fExpandedSystemId</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>fExpandedSystemId</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>dtdDesc</name>.
                                                                <name>fExpandedSystemId</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>dtdDesc</name>.
                                            <name>fExpandedSystemId</name>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fPublicId</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>fPublicId</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>dtdDesc</name>.
                                                                <name>fPublicId</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>dtdDesc</name>.
                                            <name>fPublicId</name>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the hash code of this grammar
                * Because our .equals method is so complex, we just return a very
                * simple hash that might avoid calls to the equals method a bit...
                * @return The hash code
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fExpandedSystemId</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fExpandedSystemId</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fPublicId</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fPublicId</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// give up; hope .equals can handle it:</comment>
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    <comment type="line">// class XMLDTDDescription</comment>

</unit>
