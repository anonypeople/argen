<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\XMLErrorReporter.java">
    <comment type="block">/*
        * Copyright 1999-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>impl</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>DefaultErrorHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>ErrorHandlerProxy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>MessageFormatter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLLocator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponent</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponentManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLConfigurationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLErrorHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLParseException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>ErrorHandler</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class is a common element of all parser configurations and is
        * used to report errors that occur. This component can be queried by
        * parser components from the component manager using the following
        * property ID:
        * &lt;pre&gt;
        * http://apache.org/xml/properties/internal/error-reporter
        * &lt;/pre&gt;
        * &lt;p&gt;
        * Errors are separated into domains that categorize a class of errors.
        * In a parser configuration, the parser would register a
        * &lt;code&gt;MessageFormatter&lt;/code&gt; for each domain that is capable of
        * localizing error messages and formatting them based on information
        * about the error. Any parser component can invent new error domains
        * and register additional message formatters to localize messages in
        * those domains.
        * &lt;p&gt;
        * This component requires the following features and properties from the
        * component manager that uses it:
        * &lt;ul&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/error-handler&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;p&gt;
        * This component can use the following features and properties but they
        * are not required:
        * &lt;ul&gt;
        * &lt;li&gt;http://apache.org/xml/features/continue-after-fatal-error&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * @xerces.internal
        *
        * @see MessageFormatter
        *
        * @author Eric Ye, IBM
        * @author Andy Clark, IBM
        *
        * @version $Id: XMLErrorReporter.java,v 1.16 2005/06/24 17:56:41 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>XMLErrorReporter</name>
        <super>
            <implements>implements
                <name>XMLComponent</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="line">// severity</comment>

            <comment type="javadoc">/**
                * Severity: warning. Warnings represent informational messages only
                * that should not be considered serious enough to stop parsing or
                * indicate an error in the document's validity.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>SEVERITY_WARNING</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Severity: error. Common causes of errors are document structure and/or
                * content that that does not conform to the grammar rules specified for
                * the document. These are typically validation errors.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>SEVERITY_ERROR</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Severity: fatal error. Fatal errors are errors in the syntax of the
                * XML document or invalid byte sequences for a given encoding. The
                * XML 1.0 Specification mandates that errors of this type are not
                * recoverable.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; The parser does have a "continue after fatal
                * error" feature but it should be used with extreme caution and care.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>SEVERITY_FATAL_ERROR</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// feature identifiers</comment>

            <comment type="javadoc">/** Feature identifier: continue after fatal error. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>CONTINUE_AFTER_FATAL_ERROR</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// property identifiers</comment>

            <comment type="javadoc">/** Property identifier: error handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ERROR_HANDLER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ERROR_HANDLER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// recognized features and properties</comment>

            <comment type="javadoc">/** Recognized features. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>RECOGNIZED_FEATURES</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>CONTINUE_AFTER_FATAL_ERROR</name>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature defaults. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Boolean</name>
                        <index>[]</index>
                    </type>
                    <name>FEATURE_DEFAULTS</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Recognized properties. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>RECOGNIZED_PROPERTIES</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>ERROR_HANDLER</name>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property defaults. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Object</name>
                        <index>[]</index>
                    </type>
                    <name>PROPERTY_DEFAULTS</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** The locale to be used to format error messages. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Locale</name>
                    </type>
                    <name>fLocale</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Mapping of Message formatters for domains. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>fMessageFormatters</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Error handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLErrorHandler</name>
                    </type>
                    <name>fErrorHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Document locator. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLLocator</name>
                    </type>
                    <name>fLocator</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Continue after fatal error feature. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fContinueAfterFatalError</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default error handler. This error handler is only used in the
                * absence of a registered error handler so that errors are not
                * "swallowed" silently. This is one of the most common "problems"
                * reported by users of the parser.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLErrorHandler</name>
                    </type>
                    <name>fDefaultErrorHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** A SAX proxy to the error handler contained in this error reporter. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ErrorHandler</name>
                    </type>
                    <name>fSaxProxy</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Constructs an error reporter with a locator. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLErrorReporter</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <comment type="line">// REVISIT: [Q] Should the locator be passed to the reportError</comment>
                    <comment type="line">// method? Otherwise, there is no way for a parser</comment>
                    <comment type="line">// component to store information about where an</comment>
                    <comment type="line">// error occurred so as to report it later.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// An example would be to record the location of</comment>
                    <comment type="line">// IDREFs so that, at the end of the document, if</comment>
                    <comment type="line">// there is no associated ID declared, the error</comment>
                    <comment type="line">// could report the location information of the</comment>
                    <comment type="line">// reference. -Ac</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// NOTE: I added another reportError method that allows the</comment>
                    <comment type="line">// caller to specify the location of the error being</comment>
                    <comment type="line">// reported. -Ac</comment>

                    <expr_stmt>
                        <expr>
                            <name>fMessageFormatters</name>
                            = new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="line">//</comment>
            <comment type="line">// Methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Sets the current locale.
                *
                * @param locale The new locale.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLocale</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fLocale</name>
                            =
                            <name>locale</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setLocale(Locale)</comment>

            <comment type="javadoc">/**
                * Gets the current locale.
                *
                * @return the current Locale
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Locale</name>
                </type>
                <name>getLocale</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fLocale</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getLocale(): Locale</comment>

            <comment type="javadoc">/**
                * Sets the document locator.
                *
                * @param locator The locator.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDocumentLocator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>locator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fLocator</name>
                            =
                            <name>locator</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setDocumentLocator(XMLLocator)</comment>

            <comment type="javadoc">/**
                * Registers a message formatter for the specified domain.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Registering a message formatter for a domain
                * when there is already a formatter registered will cause the previous
                * formatter to be lost. This method replaces any previously registered
                * message formatter for the specified domain.
                *
                * @param domain
                * @param messageFormatter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putMessageFormatter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMessageFormatters</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>domain</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>messageFormatter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// putMessageFormatter(String,MessageFormatter)</comment>

            <comment type="javadoc">/**
                * Returns the message formatter associated with the specified domain,
                * or null if no message formatter is registered for that domain.
                *
                * @param domain The domain of the message formatter.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MessageFormatter</name>
                </type>
                <name>getMessageFormatter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>MessageFormatter</name>)
                            <call>
                                <name><name>fMessageFormatters</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>domain</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getMessageFormatter(String):MessageFormatter</comment>

            <comment type="javadoc">/**
                * Removes the message formatter for the specified domain and
                * returns the removed message formatter.
                *
                * @param domain The domain of the message formatter.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MessageFormatter</name>
                </type>
                <name>removeMessageFormatter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>MessageFormatter</name>)
                            <call>
                                <name><name>fMessageFormatters</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>domain</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// removeMessageFormatter(String):MessageFormatter</comment>

            <comment type="javadoc">/**
                * Reports an error. The error message passed to the error handler
                * is formatted for the locale by the message formatter installed
                * for the specified error domain.
                *
                * @param domain The error domain.
                * @param key The key of the error message.
                * @param arguments The replacement arguments for the error message,
                * if needed.
                * @param severity The severity of the error.
                *
                * @see #SEVERITY_WARNING
                * @see #SEVERITY_ERROR
                * @see #SEVERITY_FATAL_ERROR
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reportError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>severity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>reportError</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fLocator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>domain</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>arguments</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>severity</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// reportError(String,String,Object[],short)</comment>

            <comment type="javadoc">/**
                * Reports an error at a specific location.
                *
                * @param location The error location.
                * @param domain The error domain.
                * @param key The key of the error message.
                * @param arguments The replacement arguments for the error message,
                * if needed.
                * @param severity The severity of the error.
                *
                * @see #SEVERITY_WARNING
                * @see #SEVERITY_ERROR
                * @see #SEVERITY_FATAL_ERROR
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reportError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>location</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>severity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// REVISIT: [Q] Should we do anything about invalid severity</comment>
                    <comment type="line">// parameter? -Ac</comment>

                    <comment type="line">// format error message and create parse exception</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMessageFormatter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>domain</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>messageFormatter</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>message</name>
                                        =
                                        <call>
                                            <name><name>messageFormatter</name>.
                                                <name>formatMessage</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fLocale</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>arguments</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>StringBuffer</name>
                                        </type>
                                        <name>str</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>StringBuffer</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>domain</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'#'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>argCount</name> =
                                        <init>
                                            <expr>
                                                <name>arguments</name>
                                                != <name>null</name> ?
                                                <name><name>arguments</name>.
                                                    <name>length</name>
                                                </name>
                                                : 0
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>argCount</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>'?'</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name>argCount</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>arguments</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>i</name>
                                                                &lt; <name>argCount</name> -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>str</name>.
                                                                                <name>append</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>'&amp;'</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>message</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLParseException</name>
                            </type>
                            <name>parseException</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>XMLParseException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>location</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>message</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// get error handler</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLErrorHandler</name>
                            </type>
                            <name>errorHandler</name> =
                            <init>
                                <expr>
                                    <name>fErrorHandler</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>errorHandler</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDefaultErrorHandler</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fDefaultErrorHandler</name>
                                                    = new
                                                    <call>
                                                        <name>DefaultErrorHandler</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>errorHandler</name>
                                        =
                                        <name>fDefaultErrorHandler</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// call error handler</comment>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>severity</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>SEVERITY_WARNING</name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>errorHandler</name>.
                                                    <name>warning</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>domain</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parseException</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name>SEVERITY_ERROR</name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>errorHandler</name>.
                                                    <name>error</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>domain</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parseException</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name>SEVERITY_FATAL_ERROR</name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>errorHandler</name>.
                                                    <name>fatalError</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>domain</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parseException</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <name>fContinueAfterFatalError</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>
                                                        <name>parseException</name>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            }
                        </block>
                    </switch>

                    }
                </block>
            </function>
            <comment type="line">// reportError(XMLLocator,String,String,Object[],short)</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLComponent methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Resets the component. The component can query the component manager
                * about any features and properties that affect the operation of the
                * component.
                *
                * @param componentManager The component manager.
                *
                * @throws SAXException Thrown by component on initialization error.
                * For example, if a feature or property is
                * required for the operation of the component, the
                * component manager may throw a
                * SAXNotRecognizedException or a
                * SAXNotSupportedException.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLComponentManager</name>
                            </type>
                            <name>componentManager</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// features</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fContinueAfterFatalError</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>CONTINUE_AFTER_FATAL_ERROR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XNIException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fContinueAfterFatalError</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// properties</comment>
                    <expr_stmt>
                        <expr>
                            <name>fErrorHandler</name>
                            = (<name>XMLErrorHandler</name>)
                            <call>
                                <name><name>componentManager</name>.
                                    <name>getProperty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ERROR_HANDLER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// reset(XMLComponentManager)</comment>

            <comment type="javadoc">/**
                * Returns a list of feature identifiers that are recognized by
                * this component. This method may return null if no features
                * are recognized by this component.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedFeatures</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )(
                            <call>
                                <name><name>RECOGNIZED_FEATURES</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getRecognizedFeatures():String[]</comment>

            <comment type="javadoc">/**
                * Sets the state of a feature. This method is called by the component
                * manager any time after reset when a feature changes state.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore features
                * that do not affect the operation of the component.
                *
                * @param featureId The feature identifier.
                * @param state The state of the feature.
                *
                * @throws SAXNotRecognizedException The component should not throw
                * this exception.
                * @throws SAXNotSupportedException The component should not throw
                * this exception.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Xerces features</comment>
                    <comment type="line">//</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>featureId</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Constants</name>.
                                                    <name>XERCES_FEATURE_PREFIX</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>suffixLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>featureId</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                -
                                                <call>
                                                    <name><name>Constants</name>.<name>XERCES_FEATURE_PREFIX</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">//</comment>
                                <comment type="line">// http://apache.org/xml/features/continue-after-fatal-error
                                </comment>
                                <comment type="line">// Allows the parser to continue after a fatal error.</comment>
                                <comment type="line">// Normally, a fatal error would stop the parse.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>suffixLength</name>
                                            ==
                                            <call>
                                                <name><name>Constants</name>.<name>
                                                    CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>featureId</name>.
                                                    <name>endsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Constants</name>.
                                                                <name>CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fContinueAfterFatalError</name>
                                                    =
                                                    <name>state</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// setFeature(String,boolean)</comment>

            <comment type="line">// return state of given feature or false if unsupported.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Xerces features</comment>
                    <comment type="line">//</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>featureId</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Constants</name>.
                                                    <name>XERCES_FEATURE_PREFIX</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>suffixLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>featureId</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                -
                                                <call>
                                                    <name><name>Constants</name>.<name>XERCES_FEATURE_PREFIX</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">//</comment>
                                <comment type="line">// http://apache.org/xml/features/continue-after-fatal-error
                                </comment>
                                <comment type="line">// Allows the parser to continue after a fatal error.</comment>
                                <comment type="line">// Normally, a fatal error would stop the parse.</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>suffixLength</name>
                                            ==
                                            <call>
                                                <name><name>Constants</name>.<name>
                                                    CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>featureId</name>.
                                                    <name>endsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Constants</name>.
                                                                <name>CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>fContinueAfterFatalError</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// setFeature(String,boolean)</comment>

            <comment type="javadoc">/**
                * Returns a list of property identifiers that are recognized by
                * this component. This method may return null if no properties
                * are recognized by this component.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedProperties</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )(
                            <call>
                                <name><name>RECOGNIZED_PROPERTIES</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getRecognizedProperties():String[]</comment>

            <comment type="javadoc">/**
                * Sets the value of a property. This method is called by the component
                * manager any time after reset when a property changes value.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore properties
                * that do not affect the operation of the component.
                *
                * @param propertyId The property identifier.
                * @param value The value of the property.
                *
                * @throws SAXNotRecognizedException The component should not throw
                * this exception.
                * @throws SAXNotSupportedException The component should not throw
                * this exception.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Xerces properties</comment>
                    <comment type="line">//</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>propertyId</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Constants</name>.
                                                    <name>XERCES_PROPERTY_PREFIX</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>suffixLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>propertyId</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                -
                                                <call>
                                                    <name><name>Constants</name>.<name>XERCES_PROPERTY_PREFIX</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>suffixLength</name>
                                            ==
                                            <call>
                                                <name><name>Constants</name>.<name>ERROR_HANDLER_PROPERTY</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>propertyId</name>.
                                                    <name>endsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Constants</name>.
                                                                <name>ERROR_HANDLER_PROPERTY</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fErrorHandler</name>
                                                    = (<name>XMLErrorHandler</name>)
                                                    <name>value</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// setProperty(String,Object)</comment>

            <comment type="javadoc">/**
                * Returns the default state for a feature, or null if this
                * component does not want to report a default value for this
                * feature.
                *
                * @param featureId The feature identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Boolean</name>
                </type>
                <name>getFeatureDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>RECOGNIZED_FEATURES</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>RECOGNIZED_FEATURES</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>featureId</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>FEATURE_DEFAULTS</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getFeatureDefault(String):Boolean</comment>

            <comment type="javadoc">/**
                * Returns the default state for a property, or null if this
                * component does not want to report a default value for this
                * property.
                *
                * @param propertyId The property identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getPropertyDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>RECOGNIZED_PROPERTIES</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>RECOGNIZED_PROPERTIES</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>propertyId</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>PROPERTY_DEFAULTS</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getPropertyDefault(String):Object</comment>

            <comment type="javadoc">/**
                * Get the internal XMLErrrorHandler.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLErrorHandler</name>
                </type>
                <name>getErrorHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fErrorHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the internal XMLErrorHandler
                * as SAX ErrorHandler.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ErrorHandler</name>
                </type>
                <name>getSAXErrorHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSaxProxy</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSaxProxy</name>
                                        = new
                                        <class>
                                            <super>
                                                <name>ErrorHandlerProxy</name>
                                            </super>
                                            <argument_list>()</argument_list>
                                            <block>{
                                                <function>
                                                    <type>
                                                        <specifier>protected</specifier>
                                                        <name>XMLErrorHandler</name>
                                                    </type>
                                                    <name>getErrorHandler</name>
                                                    <parameter_list>()</parameter_list>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>fErrorHandler</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </function>
                                                }
                                            </block>
                                        </class>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>fSaxProxy</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class XMLErrorReporter</comment>
</unit>
