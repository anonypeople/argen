<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\grammars\XMLGrammarPool.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>grammars</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt; This interface specifies how the parser and the application
        * interact with respect to Grammar objects that the application
        * possesses--either by having precompiled them or by having stored them
        * from a previous validation of an instance document. It makes no
        * assumptions about the kind of Grammar involved, or about how the
        * application's storage mechanism works.&lt;/p&gt;
        *
        * &lt;p&gt;The interaction works as follows:
        * &lt;ul&gt;
        * &lt;li&gt;When a validator considers a document, it is expected to request
        * grammars of the type it can handle from this object using the
        * &lt;code&gt;retrieveInitialGrammarSet&lt;/code&gt; method. &lt;/li&gt;
        * &lt;li&gt;If it requires a grammar
        * not in this set, it will request it from this Object using the
        * &lt;code&gt;retrieveGrammar&lt;/code&gt; method. &lt;/li&gt;
        * &lt;li&gt; After successfully validating an
        * instance, the validator should make any new grammars it has compiled
        * available to this object using the &lt;code&gt;cacheGrammars&lt;/code&gt;
        * method; for ease of implementation it may make other Grammars it holds references to as well (i.e.,
        * it may return some grammars that were retrieved from the GrammarPool in earlier operations). &lt;/li&gt; &lt;/ul&gt;
        &lt;/p&gt;
        *
        * @author Neil Graham, IBM
        * @version $Id: XMLGrammarPool.java,v 1.4 2004/02/24 23:15:58 mrglavas Exp $
        */
    </comment>

    <class type="interface">
        <specifier>public</specifier>
        interface <name>XMLGrammarPool</name>
        <block>{

            <comment type="line">// &lt;p&gt;we are trying to make this XMLGrammarPool work for all kinds of</comment>
            <comment type="line">// grammars, so we have a parameter "grammarType" for each of the</comment>
            <comment type="line">// methods. &lt;/p&gt;</comment>

            <comment type="javadoc">/**
                * &lt;p&gt; retrieve the initial known set of grammars. this method is
                * called by a validator before the validation starts. the application
                * can provide an initial set of grammars available to the current
                * validation attempt. &lt;/p&gt;
                * @param grammarType the type of the grammar, from the
                * &lt;code&gt;org.apache.xerces.xni.grammars.Grammar&lt;/code&gt; interface.
                * @return the set of grammars the validator may put in its "bucket"
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                    <index>[]</index>
                </type>
                <name>retrieveInitialGrammarSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>grammarType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;return the final set of grammars that the validator ended up
                * with.
                * This method is called after the
                * validation finishes. The application may then choose to cache some
                * of the returned grammars. &lt;/p&gt;
                * @param grammarType the type of the grammars being returned;
                * @param grammars an array containing the set of grammars being
                * returned; order is not significant.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>cacheGrammars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>grammarType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Grammar</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>grammars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt; This method requests that the application retrieve a grammar
                * corresponding to the given GrammarIdentifier from its cache.
                * If it cannot do so it must return null; the parser will then
                * call the EntityResolver. &lt;strong&gt;An application must not call its
                * EntityResolver itself from this method; this may result in infinite
                * recursions.&lt;/strong&gt;
                * @param desc The description of the Grammar being requested.
                * @return the Grammar corresponding to this description or null if
                * no such Grammar is known.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Grammar</name>
                </type>
                <name>retrieveGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarDescription</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Causes the XMLGrammarPool not to store any grammars when
                * the cacheGrammars(String, Grammar[[]) method is called.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>lockPool</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Allows the XMLGrammarPool to store grammars when its cacheGrammars(String, Grammar[])
                * method is called. This is the default state of the object.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unlockPool</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all grammars from the pool.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
    <comment type="line">// XMLGrammarPool</comment>

</unit>
