<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\parser\XMLParserConfiguration.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>parser</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDocumentHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDContentModelHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represents a parser configuration. The parser configuration maintains
        * a table of recognized features and properties, assembles components
        * for the parsing pipeline, and is responsible for initiating parsing
        * of an XML document.
        * &lt;p&gt;
        * By separating the configuration of a parser from the specific parser
        * instance, applications can create new configurations and re-use the
        * existing parser components and external API generators (e.g. the
        * DOMParser and SAXParser).
        * &lt;p&gt;
        * The internals of any specific parser configuration instance are hidden.
        * Therefore, each configuration may implement the parsing mechanism any
        * way necessary. However, the parser configuration should follow these
        * guidelines:
        * &lt;ul&gt;
        * &lt;li&gt;
        * Call the &lt;code&gt;reset&lt;/code&gt; method on each component before parsing.
        * This is only required if the configuration is re-using existing
        * components that conform to the &lt;code&gt;XMLComponent&lt;/code&gt; interface.
        * If the configuration uses all custom parts, then it is free to
        * implement everything as it sees fit as long as it follows the
        * other guidelines.
        * &lt;/li&gt;
        * &lt;li&gt;
        * Call the &lt;code&gt;setFeature&lt;/code&gt; and &lt;code&gt;setProperty&lt;/code&gt; method
        * on each component during parsing to propagate features and properties
        * that have changed. This is only required if the configuration is
        * re-using existing components that conform to the &lt;code&gt;XMLComponent&lt;/code&gt;
        * interface. If the configuration uses all custom parts, then it is free
        * to implement everything as it sees fit as long as it follows the other
        * guidelines.
        * &lt;/li&gt;
        * &lt;li&gt;
        * Pass the same unique String references for all symbols that are
        * propagated to the registered handlers. Symbols include, but may not
        * be limited to, the names of elements and attributes (including their
        * uri, prefix, and localpart). This is suggested but not an absolute
        * must. However, the standard parser components may require access to
        * the same symbol table for creation of unique symbol references to be
        * propagated in the XNI pipeline.
        * &lt;/li&gt;
        * &lt;/ul&gt;
        *
        * @author Arnaud Le Hors, IBM
        * @author Andy Clark, IBM
        *
        * @version $Id: XMLParserConfiguration.java,v 1.7 2004/10/03 21:58:18 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>XMLParserConfiguration</name>
        <super>
            <extends>extends
                <name>XMLComponentManager</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// XMLParserConfiguration methods</comment>
            <comment type="line">//</comment>

            <comment type="line">// parsing</comment>

            <comment type="javadoc">/**
                * Parse an XML document.
                * &lt;p&gt;
                * The parser can use this method to instruct this configuration
                * to begin parsing an XML document from any valid input source
                * (a character stream, a byte stream, or a URI).
                * &lt;p&gt;
                * Parsers may not invoke this method while a parse is in progress.
                * Once a parse is complete, the parser may then parse another XML
                * document.
                * &lt;p&gt;
                * This method is synchronous: it will not return until parsing
                * has ended. If a client application wants to terminate
                * parsing early, it should throw an exception.
                * &lt;p&gt;
                * When this method returns, all characters streams and byte streams
                * opened by the parser are closed.
                *
                * @param inputSource The input source for the top-level of the
                * XML document.
                *
                * @exception XNIException Any XNI exception, possibly wrapping
                * another exception.
                * @exception IOException An IO exception from the parser, possibly
                * from a byte stream or character stream
                * supplied by the parser.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>inputSource</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="line">// generic configuration</comment>

            <comment type="javadoc">/**
                * Allows a parser to add parser specific features to be recognized
                * and managed by the parser configuration.
                *
                * @param featureIds An array of the additional feature identifiers
                * to be recognized.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addRecognizedFeatures</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>featureIds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the state of a feature. This method is called by the parser
                * and gets propagated to components in this parser configuration.
                *
                * @param featureId The feature identifier.
                * @param state The state of the feature.
                *
                * @throws XMLConfigurationException Thrown if there is a configuration
                * error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the state of a feature.
                *
                * @param featureId The feature identifier.
                *
                * @throws XMLConfigurationException Thrown if there is a configuration
                * error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Allows a parser to add parser specific properties to be recognized
                * and managed by the parser configuration.
                *
                * @param propertyIds An array of the additional property identifiers
                * to be recognized.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addRecognizedProperties</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>propertyIds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of a property. This method is called by the parser
                * and gets propagated to components in this parser configuration.
                *
                * @param propertyId The property identifier.
                * @param value The value of the property.
                *
                * @throws XMLConfigurationException Thrown if there is a configuration
                * error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value of a property.
                *
                * @param propertyId The property identifier.
                *
                * @throws XMLConfigurationException Thrown if there is a configuration
                * error.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="line">// handlers</comment>

            <comment type="javadoc">/**
                * Sets the error handler.
                *
                * @param errorHandler The error resolver.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setErrorHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLErrorHandler</name>
                            </type>
                            <name>errorHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the registered error handler. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XMLErrorHandler</name>
                </type>
                <name>getErrorHandler</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the document handler to receive information about the document.
                *
                * @param documentHandler The document handler.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDocumentHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDocumentHandler</name>
                            </type>
                            <name>documentHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the registered document handler. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDocumentHandler</name>
                </type>
                <name>getDocumentHandler</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the DTD handler.
                *
                * @param dtdHandler The DTD handler.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDTDHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDTDHandler</name>
                            </type>
                            <name>dtdHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the registered DTD handler. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDTDHandler</name>
                </type>
                <name>getDTDHandler</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the DTD content model handler.
                *
                * @param dtdContentModelHandler The DTD content model handler.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDTDContentModelHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDTDContentModelHandler</name>
                            </type>
                            <name>dtdContentModelHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the registered DTD content model handler. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDTDContentModelHandler</name>
                </type>
                <name>getDTDContentModelHandler</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// other settings</comment>

            <comment type="javadoc">/**
                * Sets the entity resolver.
                *
                * @param entityResolver The new entity resolver.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEntityResolver</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLEntityResolver</name>
                            </type>
                            <name>entityResolver</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the registered entity resolver. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XMLEntityResolver</name>
                </type>
                <name>getEntityResolver</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the locale to use for messages.
                *
                * @param locale The locale object to use for localization of messages.
                *
                * @exception XNIException Thrown if the parser does not support the
                * specified locale.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLocale</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns the locale. */</comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Locale</name>
                </type>
                <name>getLocale</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
    <comment type="line">// interface XMLParserConfiguration</comment>
</unit>
