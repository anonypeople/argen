<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\parser\XMLPullParserConfiguration.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>parser</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represents a parser configuration that can be used as the
        * configuration for a "pull" parser. A pull parser allows the
        * application to drive the parser instead of having document
        * information events "pushed" to the registered handlers.
        * &lt;p&gt;
        * A pull parser using this type of configuration first calls
        * the &lt;code&gt;setInputSource&lt;/code&gt; method. After the input
        * source is set, the pull parser repeatedly calls the
        * &lt;code&gt;parse(boolean):boolean&lt;/code&gt; method. This method
        * returns a value of true if there is more to parse in the
        * document.
        * &lt;p&gt;
        * Calling the &lt;code&gt;parse(XMLInputSource)&lt;/code&gt; is equivalent
        * to setting the input source and calling the
        * &lt;code&gt;parse(boolean):boolean&lt;/code&gt; method with a "complete"
        * value of &lt;code&gt;true&lt;/code&gt;.
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: XMLPullParserConfiguration.java,v 1.6 2004/02/24 23:15:56 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>XMLPullParserConfiguration</name>
        <super>
            <extends>extends
                <name>XMLParserConfiguration</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// XMLPullParserConfiguration methods</comment>
            <comment type="line">//</comment>

            <comment type="line">// parsing</comment>

            <comment type="javadoc">/**
                * Sets the input source for the document to parse.
                *
                * @param inputSource The document's input source.
                *
                * @exception XMLConfigurationException Thrown if there is a
                * configuration error when initializing the
                * parser.
                * @exception IOException Thrown on I/O error.
                *
                * @see #parse(boolean)
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInputSource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>inputSource</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Parses the document in a pull parsing fashion.
                *
                * @param complete True if the pull parser should parse the
                * remaining document completely.
                *
                * @return True if there is more document to parse.
                *
                * @exception XNIException Any XNI exception, possibly wrapping
                * another exception.
                * @exception IOException An IO exception from the parser, possibly
                * from a byte stream or character stream
                * supplied by the parser.
                *
                * @see #setInputSource
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>complete</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If the application decides to terminate parsing before the xml document
                * is fully parsed, the application should call this method to free any
                * resource allocated during parsing. For example, close all opened streams.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>cleanup</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
    <comment type="line">// interface XMLPullParserConfiguration</comment>
</unit>
