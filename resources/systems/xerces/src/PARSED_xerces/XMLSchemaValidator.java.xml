<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\XMLSchemaValidator.java">
    <comment type="block">/*
        * Copyright 1999-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Stack</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>Constants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>RevalidationHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>XMLErrorReporter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>DatatypeException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>InvalidDatatypeValueException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>ValidatedInfo</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>XSSimpleType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>validation</name>.
            <name>ValidationManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>validation</name>.
            <name>ValidationState</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>Field</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>FieldActivator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>IdentityConstraint</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>KeyRef</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>Selector</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>UniqueOrKey</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>ValueStore</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            identity</name>.
            <name>XPathMatcher</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            models</name>.
            <name>CMBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            models</name>.
            <name>CMNodeFactory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            models</name>.
            <name>XSCMValidator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>AugmentationsImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>IntStack</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLAttributesImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLChar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLSymbols</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>Augmentations</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>NamespaceContext</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>QName</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLAttributes</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDocumentHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLLocator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLResourceIdentifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLString</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarDescription</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarPool</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponent</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponentManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLConfigurationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLDocumentFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLDocumentSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLEntityResolver</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLInputSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>AttributePSVI</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>ElementPSVI</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>ShortList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSConstants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSObjectList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSTypeDefinition</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXNotRecognizedException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXNotSupportedException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The XML Schema validator. The validator implements a document
        * filter: receiving document events from the scanner; validating
        * the content and structure; augmenting the InfoSet, if applicable;
        * and notifying the parser of the information resulting from the
        * validation process.
        * &lt;p&gt;
        * This component requires the following features and properties from the
        * component manager that uses it:
        * &lt;ul&gt;
        * &lt;li&gt;http://xml.org/sax/features/validation&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/symbol-table&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/error-reporter&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/entity-resolver&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * @xerces.internal
        *
        * @author Sandy Gao IBM
        * @author Elena Litani IBM
        * @author Andy Clark IBM
        * @author Neeraj Bajaj, Sun Microsystems, inc.
        * @version $Id: XMLSchemaValidator.java,v 1.178 2005/06/23 17:58:52 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>XMLSchemaValidator</name>
        <super>
            <implements>implements <name>XMLComponent</name>, <name>XMLDocumentFilter</name>, <name>
                FieldActivator</name>,
                <name>RevalidationHandler</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// feature identifiers</comment>

            <comment type="javadoc">/** Feature identifier: validation. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>VALIDATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>VALIDATION_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: validation. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_VALIDATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_VALIDATION_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: schema full checking*/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_FULL_CHECKING</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_FULL_CHECKING</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: dynamic validation. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DYNAMIC_VALIDATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>DYNAMIC_VALIDATION_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: expose schema normalized value */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>NORMALIZE_DATA</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_NORMALIZED_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: send element default value via characters() */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_ELEMENT_DEFAULT</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_ELEMENT_DEFAULT</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: augment PSVI */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_AUGMENT_PSVI</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_AUGMENT_PSVI</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: whether to recognize java encoding names */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ALLOW_JAVA_ENCODINGS</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ALLOW_JAVA_ENCODINGS_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: standard uri conformant feature. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>STANDARD_URI_CONFORMANT_FEATURE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>STANDARD_URI_CONFORMANT_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature: generate synthetic annotations */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>GENERATE_SYNTHETIC_ANNOTATIONS</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>GENERATE_SYNTHETIC_ANNOTATIONS_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: validate annotations. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>VALIDATE_ANNOTATIONS</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>VALIDATE_ANNOTATIONS_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: honour all schemaLocations */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>HONOUR_ALL_SCHEMALOCATIONS</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>HONOUR_ALL_SCHEMALOCATIONS_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: use grammar pool only */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USE_GRAMMAR_POOL_ONLY</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>USE_GRAMMAR_POOL_ONLY_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: whether to continue parsing a schema after a fatal error is
                encountered */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>CONTINUE_AFTER_FATAL_ERROR</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>CONTINUE_AFTER_FATAL_ERROR_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>PARSER_SETTINGS</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>PARSER_SETTINGS</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// property identifiers</comment>

            <comment type="javadoc">/** Property identifier: symbol table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SYMBOL_TABLE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SYMBOL_TABLE_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: error reporter. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ERROR_REPORTER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ERROR_REPORTER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: entity resolver. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ENTITY_RESOLVER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ENTITY_RESOLVER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: grammar pool. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>XMLGRAMMAR_POOL</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>XMLGRAMMAR_POOL_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>VALIDATION_MANAGER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>VALIDATION_MANAGER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ENTITY_MANAGER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ENTITY_MANAGER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: schema location. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_LOCATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_LOCATION</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: no namespace schema location. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_NONS_LOCATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_NONS_LOCATION</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: JAXP schema source. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAXP_SCHEMA_SOURCE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>JAXP_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_SOURCE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: JAXP schema language. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAXP_SCHEMA_LANGUAGE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>JAXP_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_LANGUAGE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// recognized features and properties</comment>

            <comment type="javadoc">/** Recognized features. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>RECOGNIZED_FEATURES</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>VALIDATION</name>
                                </expr>
                                ,
                                <expr>
                                    <name>SCHEMA_VALIDATION</name>
                                </expr>
                                ,
                                <expr>
                                    <name>DYNAMIC_VALIDATION</name>
                                </expr>
                                ,
                                <expr>
                                    <name>SCHEMA_FULL_CHECKING</name>
                                </expr>
                                ,
                                <expr>
                                    <name>ALLOW_JAVA_ENCODINGS</name>
                                </expr>
                                ,
                                <expr>
                                    <name>CONTINUE_AFTER_FATAL_ERROR</name>
                                </expr>
                                ,
                                <expr>
                                    <name>STANDARD_URI_CONFORMANT_FEATURE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>GENERATE_SYNTHETIC_ANNOTATIONS</name>
                                </expr>
                                ,
                                <expr>
                                    <name>VALIDATE_ANNOTATIONS</name>
                                </expr>
                                ,
                                <expr>
                                    <name>HONOUR_ALL_SCHEMALOCATIONS</name>
                                </expr>
                                ,
                                <expr>
                                    <name>USE_GRAMMAR_POOL_ONLY</name>
                                </expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** Feature defaults. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Boolean</name>
                        <index>[]</index>
                    </type>
                    <name>FEATURE_DEFAULTS</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">// NOTE: The following defaults are nulled out on purpose.
                                </comment>
                                <comment type="line">// If they are set, then when the XML Schema validator</comment>
                                <comment type="line">// is constructed dynamically, these values may override</comment>
                                <comment type="line">// those set by the application. This goes against the</comment>
                                <comment type="line">// whole purpose of XMLComponent#getFeatureDefault but</comment>
                                <comment type="line">// it can't be helped in this case. -Ac</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">//Boolean.FALSE,</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">//Boolean.FALSE,</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">//Boolean.FALSE,</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">//Boolean.FALSE,</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <comment type="line">//Boolean.FALSE,</comment>
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Recognized properties. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>RECOGNIZED_PROPERTIES</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>SYMBOL_TABLE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>ERROR_REPORTER</name>
                                </expr>
                                ,
                                <expr>
                                    <name>ENTITY_RESOLVER</name>
                                </expr>
                                ,
                                <expr>
                                    <name>VALIDATION_MANAGER</name>
                                </expr>
                                ,
                                <expr>
                                    <name>SCHEMA_LOCATION</name>
                                </expr>
                                ,
                                <expr>
                                    <name>SCHEMA_NONS_LOCATION</name>
                                </expr>
                                ,
                                <expr>
                                    <name>JAXP_SCHEMA_SOURCE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>JAXP_SCHEMA_LANGUAGE</name>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property defaults. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Object</name>
                        <index>[]</index>
                    </type>
                    <name>PROPERTY_DEFAULTS</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                ,
                                <expr>
                                    <name>null</name>
                                </expr>
                                , }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// this is the number of valuestores of each kind</comment>
            <comment type="line">// we expect an element to have. It's almost</comment>
            <comment type="line">// never &gt; 1; so leave it at that.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ID_CONSTRAINT_NUM</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** current PSVI element info */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ElementPSVImpl</name>
                    </type>
                    <name>fCurrentPSVI</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ElementPSVImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// since it is the responsibility of each component to an</comment>
            <comment type="line">// Augmentations parameter if one is null, to save ourselves from</comment>
            <comment type="line">// having to create this object continually, it is created here.</comment>
            <comment type="line">// If it is not present in calls that we're passing on, we *must*</comment>
            <comment type="line">// clear this before we introduce it into the pipeline.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>AugmentationsImpl</name>
                    </type>
                    <name>fAugmentations</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>AugmentationsImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Map which is used to catch instance documents that try
                * and match a field several times in the same scope.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>HashMap</name>
                    </type>
                    <name>fMayMatchFieldMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// this is included for the convenience of handleEndElement</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLString</name>
                    </type>
                    <name>fDefaultValue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Validation features</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fDynamicValidation</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSchemaDynamicValidation</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fDoValidation</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fFullChecking</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fNormalizeData</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSchemaElementDefault</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fAugPSVI</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fIdConstraint</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fUseGrammarPoolOnly</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Schema type: None, DTD, Schema */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fSchemaType</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// to indicate whether we are in the scope of entity reference or CData</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fEntityRef</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fInCDATA</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// properties</comment>

            <comment type="javadoc">/** Symbol table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>SymbolTable</name>
                    </type>
                    <name>fSymbolTable</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * While parsing a document, keep the location of the document.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XMLLocator</name>
                    </type>
                    <name>fLocator</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A wrapper of the standard error reporter. We'll store all schema errors
                * in this wrapper object, so that we can get all errors (error codes) of
                * a specific element. This is useful for PSVI.
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>final</specifier> class <name>XSIErrorReporter</name>
                <block>{

                    <comment type="line">// the error reporter property</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLErrorReporter</name>
                            </type>
                            <name>fErrorReporter</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// store error codes; starting position of the errors for each element;
                    </comment>
                    <comment type="line">// number of element (depth); and whether to record error</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>fErrors</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>fContext</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>INITIAL_STACK_SIZE</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fContextCount</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// set the external error reporter, clear errors</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>reset</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLErrorReporter</name>
                                    </type>
                                    <name>errorReporter</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fErrorReporter</name>
                                    =
                                    <name>errorReporter</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fErrors</name>.
                                            <name>removeAllElements</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fContextCount</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="line">// should be called when starting process an element or an attribute.</comment>
                    <comment type="line">// store the starting position for the current context</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>pushContext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>fAugPSVI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// resize array if necessary</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fContextCount</name>
                                        ==
                                        <name><name>fContext</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>newSize</name> =
                                                <init>
                                                    <expr>
                                                        <name>fContextCount</name>
                                                        +
                                                        <name>INC_STACK_SIZE</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>newArray</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>int</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>newSize</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fContext</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fContextCount</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fContext</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fContext</name>
                                        <index>[
                                            <expr><name>fContextCount</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>
                                        <name><name>fErrors</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="line">// should be called on endElement: get all errors of the current element
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                            <index>[]</index>
                        </type>
                        <name>popContext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>fAugPSVI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// get starting position of the current element</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>contextPos</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>fContext</name>
                                                <index>[
                                                    <expr>--
                                                        <name>fContextCount</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// number of errors of the current element</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fErrors</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <name>contextPos</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// if no errors, return null</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <comment type="line">// copy errors from the list to an string array</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                        <index>[]</index>
                                    </type>
                                    <name>errors</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>errors</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>String</name>)
                                            <call>
                                                <name><name>fErrors</name>.
                                                    <name>elementAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>contextPos</name>
                                                            +
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <comment type="line">// remove errors of the current element</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fErrors</name>.
                                            <name>setSize</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>contextPos</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>errors</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="line">// should be called when an attribute is done: get all errors of</comment>
                    <comment type="line">// this attribute, but leave the errors to the containing element</comment>
                    <comment type="line">// also called after an element was strictly assessed.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                            <index>[]</index>
                        </type>
                        <name>mergeContext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>fAugPSVI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// get starting position of the current element</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>contextPos</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>fContext</name>
                                                <index>[
                                                    <expr>--
                                                        <name>fContextCount</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// number of errors of the current element</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fErrors</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <name>contextPos</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// if no errors, return null</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <comment type="line">// copy errors from the list to an string array</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                        <index>[]</index>
                                    </type>
                                    <name>errors</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>errors</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>String</name>)
                                            <call>
                                                <name><name>fErrors</name>.
                                                    <name>elementAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>contextPos</name>
                                                            +
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <comment type="line">// don't resize the vector: leave the errors for this attribute
                            </comment>
                            <comment type="line">// to the containing element</comment>
                            <return>return
                                <expr>
                                    <name>errors</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>reportError</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>arguments</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>severity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fErrorReporter</name>.
                                            <name>reportError</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>domain</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>arguments</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>severity</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fAugPSVI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fErrors</name>.
                                                        <name>addElement</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// reportError(String,String,Object[],short)</comment>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>reportError</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLLocator</name>
                                    </type>
                                    <name>location</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>arguments</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>severity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fErrorReporter</name>.
                                            <name>reportError</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>location</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>domain</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>arguments</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>severity</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fAugPSVI</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fErrors</name>.
                                                        <name>addElement</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// reportError(XMLLocator,String,String,Object[],short)</comment>
                    }
                </block>
            </class>

            <comment type="javadoc">/** Error reporter. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>XSIErrorReporter</name>
                    </type>
                    <name>fXSIErrorReporter</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XSIErrorReporter</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Entity resolver */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLEntityResolver</name>
                    </type>
                    <name>fEntityResolver</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// updated during reset</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ValidationManager</name>
                    </type>
                    <name>fValidationManager</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ValidationState</name>
                    </type>
                    <name>fValidationState</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValidationState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLGrammarPool</name>
                    </type>
                    <name>fGrammarPool</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// schema location property values</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fExternalSchemas</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fExternalNoNamespaceSchema</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//JAXP Schema Source property</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Object</name>
                    </type>
                    <name>fJaxpSchemaSource</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Schema Grammar Description passed, to give a chance to application to supply the
                Grammar */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>XSDDescription</name>
                    </type>
                    <name>fXSDDescription</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XSDDescription</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>fLocationPairs</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">// handlers</comment>

            <comment type="javadoc">/** Document handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDocumentHandler</name>
                    </type>
                    <name>fDocumentHandler</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDocumentSource</name>
                    </type>
                    <name>fDocumentSource</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// XMLComponent methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Returns a list of feature identifiers that are recognized by
                * this component. This method may return null if no features
                * are recognized by this component.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedFeatures</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            ) (
                            <call>
                                <name><name>RECOGNIZED_FEATURES</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getRecognizedFeatures():String[]</comment>

            <comment type="javadoc">/**
                * Sets the state of a feature. This method is called by the component
                * manager any time after reset when a feature changes state.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore features
                * that do not affect the operation of the component.
                *
                * @param featureId The feature identifier.
                * @param state The state of the feature.
                *
                * @throws SAXNotRecognizedException The component should not throw
                * this exception.
                * @throws SAXNotSupportedException The component should not throw
                * this exception.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// setFeature(String,boolean)</comment>

            <comment type="javadoc">/**
                * Returns a list of property identifiers that are recognized by
                * this component. This method may return null if no properties
                * are recognized by this component.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getRecognizedProperties</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            ) (
                            <call>
                                <name><name>RECOGNIZED_PROPERTIES</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getRecognizedProperties():String[]</comment>

            <comment type="javadoc">/**
                * Sets the value of a property. This method is called by the component
                * manager any time after reset when a property changes value.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Components should silently ignore properties
                * that do not affect the operation of the component.
                *
                * @param propertyId The property identifier.
                * @param value The value of the property.
                *
                * @throws SAXNotRecognizedException The component should not throw
                * this exception.
                * @throws SAXNotSupportedException The component should not throw
                * this exception.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// setProperty(String,Object)</comment>

            <comment type="javadoc">/**
                * Returns the default state for a feature, or null if this
                * component does not want to report a default value for this
                * feature.
                *
                * @param featureId The feature identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Boolean</name>
                </type>
                <name>getFeatureDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>RECOGNIZED_FEATURES</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>RECOGNIZED_FEATURES</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>featureId</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>FEATURE_DEFAULTS</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getFeatureDefault(String):Boolean</comment>

            <comment type="javadoc">/**
                * Returns the default state for a property, or null if this
                * component does not want to report a default value for this
                * property.
                *
                * @param propertyId The property identifier.
                *
                * @since Xerces 2.2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getPropertyDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>RECOGNIZED_PROPERTIES</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>RECOGNIZED_PROPERTIES</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>propertyId</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>PROPERTY_DEFAULTS</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getPropertyDefault(String):Object</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLDocumentSource methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Sets the document handler to receive information about the document. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDocumentHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDocumentHandler</name>
                            </type>
                            <name>documentHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDocumentHandler</name>
                            =
                            <name>documentHandler</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setDocumentHandler(XMLDocumentHandler)</comment>

            <comment type="javadoc">/** Returns the document handler */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDocumentHandler</name>
                </type>
                <name>getDocumentHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDocumentHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// setDocumentHandler(XMLDocumentHandler)</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLDocumentHandler methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Sets the document source */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDocumentSource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDocumentSource</name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDocumentSource</name>
                            =
                            <name>source</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setDocumentSource</comment>

            <comment type="javadoc">/** Returns the document source */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDocumentSource</name>
                </type>
                <name>getDocumentSource</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDocumentSource</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getDocumentSource</comment>

            <comment type="javadoc">/**
                * The start of the document.
                *
                * @param locator The system identifier of the entity if the entity
                * is external, null otherwise.
                * @param encoding The auto-detected IANA encoding name of the entity
                * stream. This value will be null in those situations
                * where the entity encoding is not auto-detected (e.g.
                * internal entities or a document entity that is
                * parsed from a java.io.Reader).
                * @param namespaceContext
                * The namespace context in effect at the
                * start of this document.
                * This object represents the current context.
                * Implementors of this class are responsible
                * for copying the namespace bindings from the
                * the current context (and its parent contexts)
                * if that information is important.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>locator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>NamespaceContext</name>
                            </type>
                            <name>namespaceContext</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationState</name>.
                                    <name>setNamespaceSupport</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespaceContext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4XsiType</name>.
                                    <name>setNamespaceSupport</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespaceContext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4ApplyDefault</name>.
                                    <name>setNamespaceSupport</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespaceContext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fLocator</name>
                            =
                            <name>locator</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>handleStartDocument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>locator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>startDocument</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>locator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>encoding</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>namespaceContext</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// startDocument(XMLLocator,String)</comment>

            <comment type="javadoc">/**
                * Notifies of the presence of an XMLDecl line in the document. If
                * present, this method will be called immediately following the
                * startDocument call.
                *
                * @param version The XML version.
                * @param encoding The IANA encoding name of the document, or null if
                * not specified.
                * @param standalone The standalone value, or null if not specified.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>xmlDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>standalone</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>xmlDecl</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>version</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>encoding</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>standalone</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// xmlDecl(String,String,String)</comment>

            <comment type="javadoc">/**
                * Notifies of the presence of the DOCTYPE line in the document.
                *
                * @param rootElement The name of the root element.
                * @param publicId The public identifier if an external DTD or null
                * if the external DTD is specified using SYSTEM.
                * @param systemId The system identifier if an external DTD, null
                * otherwise.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>doctypeDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>doctypeDecl</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>rootElement</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>publicId</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>systemId</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// doctypeDecl(String,String,String)</comment>

            <comment type="javadoc">/**
                * The start of an element.
                *
                * @param element The name of the element.
                * @param attributes The element attributes.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>modifiedAugs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>handleStartElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attributes</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>augs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>startElement</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attributes</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>modifiedAugs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// startElement(QName,XMLAttributes, Augmentations)</comment>

            <comment type="javadoc">/**
                * An empty element.
                *
                * @param element The name of the element.
                * @param attributes The element attributes.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>emptyElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>modifiedAugs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>handleStartElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attributes</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>augs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// in the case where there is a {value constraint}, and the element</comment>
                    <comment type="line">// doesn't have any text content, change emptyElement call to</comment>
                    <comment type="line">// start + characters + end</comment>
                    <expr_stmt>
                        <expr>
                            <name>fDefaultValue</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// fElementDepth == -2 indicates that the schema validator was removed
                    </comment>
                    <comment type="line">// from the pipeline. then we don't need to call handleEndElement.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                != -2
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>modifiedAugs</name>
                                    =
                                    <call>
                                        <name>handleEndElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>modifiedAugs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!<name>fSchemaElementDefault</name> || <name>fDefaultValue</name> ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>emptyElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>attributes</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>modifiedAugs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>startElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>attributes</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>modifiedAugs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>characters</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fDefaultValue</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>endElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>modifiedAugs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// emptyElement(QName,XMLAttributes, Augmentations)</comment>

            <comment type="javadoc">/**
                * Character content.
                *
                * @param text The content.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>characters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>text</name>
                            =
                            <call>
                                <name>handleCharacters</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fNormalizeData</name>
                                            &amp;&amp;
                                            <name>fUnionType</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// for union types we can't normalize data</comment>
                                            <comment type="line">// thus we only need to send augs information if any;
                                            </comment>
                                            <comment type="line">// the normalized data for union will be send</comment>
                                            <comment type="line">// after normalization is performed (at the
                                                endElement())
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>augs</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fDocumentHandler</name>.
                                                                    <name>characters</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fEmptyXMLStr</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>augs</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>characters</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>augs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// characters(XMLString)</comment>

            <comment type="javadoc">/**
                * Ignorable whitespace. For this method to be called, the document
                * source must have some way of determining that the text containing
                * only whitespace characters should be considered ignorable. For
                * example, the validator can determine if a length of whitespace
                * characters in the document are ignorable based on the element
                * content model.
                *
                * @param text The ignorable whitespace.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>ignorableWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>handleIgnorableWhitespace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>ignorableWhitespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>text</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// ignorableWhitespace(XMLString)</comment>

            <comment type="javadoc">/**
                * The end of an element.
                *
                * @param element The name of the element.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// in the case where there is a {value constraint}, and the element</comment>
                    <comment type="line">// doesn't have any text content, add a characters call.</comment>
                    <expr_stmt>
                        <expr>
                            <name>fDefaultValue</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>modifiedAugs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>handleEndElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>augs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!<name>fSchemaElementDefault</name> || <name>fDefaultValue</name> ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>endElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>modifiedAugs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>characters</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fDefaultValue</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>endElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>modifiedAugs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// endElement(QName, Augmentations)</comment>

            <comment type="javadoc">/**
                * The start of a CDATA section.
                *
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startCDATA</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// REVISIT: what should we do here if schema normalization is on??</comment>
                    <expr_stmt>
                        <expr>
                            <name>fInCDATA</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>startCDATA</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// startCDATA()</comment>

            <comment type="javadoc">/**
                * The end of a CDATA section.
                *
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endCDATA</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// call handlers</comment>
                    <expr_stmt>
                        <expr>
                            <name>fInCDATA</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>endCDATA</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// endCDATA()</comment>

            <comment type="javadoc">/**
                * The end of the document.
                *
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>handleEndDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>endDocument</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fLocator</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// endDocument(Augmentations)</comment>

            <comment type="line">//</comment>
            <comment type="line">// DOMRevalidationHandler methods</comment>
            <comment type="line">//</comment>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>characterData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>fSawText</name>
                            = <name>fSawText</name> ||
                            <call>
                                <name><name>data</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// REVISIT: this methods basically duplicates implementation of</comment>
                    <comment type="line">// handleCharacters(). We should be able to reuse some code</comment>

                    <comment type="line">// if whitespace == -1 skip normalization, because it is a complexType
                    </comment>
                    <comment type="line">// or a union type.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNormalizeData</name>
                                &amp;&amp; <name>fWhiteSpace</name> != -1 &amp;&amp; <name>fWhiteSpace</name> !=
                                <name><name>XSSimpleType</name>.
                                    <name>WS_PRESERVE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// normalize data</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>normalizeWhitespace</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fWhiteSpace</name>
                                                        ==
                                                        <name><name>XSSimpleType</name>.
                                                            <name>WS_COLLAPSE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fBuffer</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>fNormalizedStr</name>.
                                                            <name>ch</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fNormalizedStr</name>.
                                                            <name>offset</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fNormalizedStr</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fAppendBuffer</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fBuffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>data</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// When it's a complex type with element-only content, we need to</comment>
                    <comment type="line">// find out whether the content contains any non-whitespace character.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allWhiteSpace</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentType</name>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>COMPLEX_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSComplexTypeDecl</name>
                                        </type>
                                        <name>ctype</name> =
                                        <init>
                                            <expr>(<name>XSComplexTypeDecl</name>)
                                                <name>fCurrentType</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>ctype</name>.
                                                <name>fContentType</name>
                                            </name>
                                            ==
                                            <name><name>XSComplexTypeDecl</name>.
                                                <name>CONTENTTYPE_ELEMENT</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// data outside of element content</comment>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <call>
                                                            <name><name>data</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>!
                                                                <call>
                                                                    <name><name>XMLChar</name>.
                                                                        <name>isSpace</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>data</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>allWhiteSpace</name>
                                                                        = false
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fSawCharacters</name>
                                                                        = true
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <break>break;</break>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>allWhiteSpace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>elementDefault</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// no-op</comment>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// XMLDocumentHandler and XMLDTDHandler methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * This method notifies the start of a general entity.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is not called for entity references
                * appearing as part of attribute values.
                *
                * @param name The name of the general entity.
                * @param identifier The resource identifier.
                * @param encoding The auto-detected IANA encoding name of the entity
                * stream. This value will be null in those situations
                * where the entity encoding is not auto-detected (e.g.
                * internal entities or a document entity that is
                * parsed from a java.io.Reader).
                * @param augs Additional information that may include infoset augmentations
                *
                * @exception XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startGeneralEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// REVISIT: what should happen if normalize_data_ is on??</comment>
                    <expr_stmt>
                        <expr>
                            <name>fEntityRef</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>startGeneralEntity</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>identifier</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>encoding</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// startEntity(String,String,String,String,String)</comment>

            <comment type="javadoc">/**
                * Notifies of the presence of a TextDecl line in an entity. If present,
                * this method will be called immediately following the startEntity call.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method will never be called for the
                * document entity; it is only called for external general entities
                * referenced in document content.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is not called for entity references
                * appearing as part of attribute values.
                *
                * @param version The XML version, or null if not specified.
                * @param encoding The IANA encoding name of the entity.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>textDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>textDecl</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>version</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>encoding</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// textDecl(String,String)</comment>

            <comment type="javadoc">/**
                * A comment.
                *
                * @param text The text in the comment.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by application to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>comment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// record the fact that there is a comment child.</comment>
                    <expr_stmt>
                        <expr>
                            <name>fSawChildren</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>comment</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>text</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// comment(XMLString)</comment>

            <comment type="javadoc">/**
                * A processing instruction. Processing instructions consist of a
                * target name and, optionally, text data. The data is only meaningful
                * to the application.
                * &lt;p&gt;
                * Typically, a processing instruction's data will contain a series
                * of pseudo-attributes. These pseudo-attributes follow the form of
                * element attributes but are &lt;strong&gt;not&lt;/strong&gt; parsed or presented
                * to the application as anything other than text. The application is
                * responsible for parsing the data.
                *
                * @param target The target.
                * @param data The data or null if none specified.
                * @param augs Additional information that may include infoset augmentations
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>processingInstruction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// record the fact that there is a PI child.</comment>
                    <expr_stmt>
                        <expr>
                            <name>fSawChildren</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// call handlers</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>processingInstruction</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>target</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// processingInstruction(String,XMLString)</comment>

            <comment type="javadoc">/**
                * This method notifies the end of a general entity.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is not called for entity references
                * appearing as part of attribute values.
                *
                * @param name The name of the entity.
                * @param augs Additional information that may include infoset augmentations
                *
                * @exception XNIException
                * Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endGeneralEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// call handlers</comment>
                    <expr_stmt>
                        <expr>
                            <name>fEntityRef</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDocumentHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>endGeneralEntity</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// endEntity(String)</comment>

            <comment type="line">// constants</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INITIAL_STACK_SIZE</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INC_STACK_SIZE</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="line">// Schema Normalization</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG_NORMALIZATION</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// temporary empty string buffer.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>XMLString</name>
                    </type>
                    <name>fEmptyXMLStr</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// temporary character buffer, and empty string buffer.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BUFFER_SIZE</name> =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>XMLString</name>
                    </type>
                    <name>fNormalizedStr</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fFirstChunk</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// got first chunk in characters() (SAX)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fTrailing</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Previous chunk had a trailing space</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>short</name>
                    </type>
                    <name>fWhiteSpace</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//whiteSpace: preserve/replace/collapse</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fUnionType</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Schema grammar resolver. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>XSGrammarBucket</name>
                    </type>
                    <name>fGrammarBucket</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XSGrammarBucket</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>SubstitutionGroupHandler</name>
                    </type>
                    <name>fSubGroupHandler</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>SubstitutionGroupHandler</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fGrammarBucket</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** the DV usd to convert xsi:type to a QName */</comment>
            <comment type="line">// REVISIT: in new simple type design, make things in DVs static,</comment>
            <comment type="line">// so that we can QNameDV.getCompiledForm()</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>XSSimpleType</name>
                    </type>
                    <name>fQNameDV</name> =
                    <init>
                        <expr>(<name>XSSimpleType</name>)
                            <call>
                                <name><name>SchemaGrammar</name>.<name>SG_SchemaNS</name>.
                                    <name>getGlobalTypeDecl</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>SchemaSymbols</name>.
                                                <name>ATTVAL_QNAME</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>CMNodeFactory</name>
                    </type>
                    <name>nodeFactory</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CMNodeFactory</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** used to build content models */</comment>
            <comment type="line">// REVISIT: create decl pool, and pass it to each traversers</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>CMBuilder</name>
                    </type>
                    <name>fCMBuilder</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CMBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeFactory</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Schema grammar loader</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>XMLSchemaLoader</name>
                    </type>
                    <name>fSchemaLoader</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XMLSchemaLoader</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>fXSIErrorReporter</name>.
                                                <name>fErrorReporter</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fGrammarBucket</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fSubGroupHandler</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fCMBuilder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// state</comment>

            <comment type="javadoc">/** String representation of the validation root. */</comment>
            <comment type="line">// REVISIT: what do we store here? QName, XPATH, some ID? use rawname now.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fValidationRoot</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Skip validation: anything below this level should be skipped */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fSkipValidationDepth</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** anything above this level has validation_attempted != full */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fNFullValidationDepth</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** anything above this level has validation_attempted != none */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fNNoneValidationDepth</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Element depth: -2: validator not in pipeline; &gt;= -1 current depth. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fElementDepth</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Seen sub elements. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSubElement</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Seen sub elements stack. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fSubElementStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Current element declaration. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSElementDecl</name>
                    </type>
                    <name>fCurrentElemDecl</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Element decl stack. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSElementDecl</name>
                        <index>[]</index>
                    </type>
                    <name>fElemDeclStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>XSElementDecl</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** nil value of the current element */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fNil</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** nil value stack */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fNilStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** notation value of the current element */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSNotationDecl</name>
                    </type>
                    <name>fNotation</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** notation stack */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSNotationDecl</name>
                        <index>[]</index>
                    </type>
                    <name>fNotationStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>XSNotationDecl</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Current type. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSTypeDefinition</name>
                    </type>
                    <name>fCurrentType</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** type stack. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSTypeDefinition</name>
                        <index>[]</index>
                    </type>
                    <name>fTypeStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>XSTypeDefinition</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Current content model. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSCMValidator</name>
                    </type>
                    <name>fCurrentCM</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Content model stack. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>XSCMValidator</name>
                        <index>[]</index>
                    </type>
                    <name>fCMStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>XSCMValidator</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** the current state of the current content model */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>fCurrCMState</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** stack to hold content model states */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>fCMStateStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[]</index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** whether the curret element is strictly assessed */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fStrictAssess</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** strict assess stack */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fStrictAssessStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Temporary string buffers. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>StringBuffer</name>
                    </type>
                    <name>fBuffer</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>StringBuffer</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Whether need to append characters to fBuffer */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fAppendBuffer</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Did we see any character data? */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSawText</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** stack to record if we saw character data */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fSawTextStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Did we see non-whitespace character data? */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSawCharacters</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Stack to record if we saw character data outside of element content*/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fStringContent</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Did we see children that are neither characters nor elements? */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSawChildren</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Stack to record if we other children that character or elements */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>fSawChildrenStack</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[
                                    <expr>
                                        <name>INITIAL_STACK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** temporary qname */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>QName</name>
                    </type>
                    <name>fTempQName</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>QName</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** temporary validated info */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ValidatedInfo</name>
                    </type>
                    <name>fValidatedInfo</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValidatedInfo</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// used to validate default/fixed values against xsi:type</comment>
            <comment type="line">// only need to check facets, so we set extraChecking to false (in reset)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ValidationState</name>
                    </type>
                    <name>fState4XsiType</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValidationState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// used to apply default/fixed values</comment>
            <comment type="line">// only need to check id/idref/entity, so we set checkFacets to false</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ValidationState</name>
                    </type>
                    <name>fState4ApplyDefault</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValidationState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// identity constraint information</comment>

            <comment type="javadoc">/**
                * Stack of active XPath matchers for identity constraints. All
                * active XPath matchers are notified of startElement
                * and endElement callbacks in order to perform their matches.
                * &lt;p&gt;
                * For each element with identity constraints, the selector of
                * each identity constraint is activated. When the selector matches
                * its XPath, then all the fields of the identity constraint are
                * activated.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Once the activation scope is left, the
                * XPath matchers are automatically removed from the stack of
                * active matchers and no longer receive callbacks.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XPathMatcherStack</name>
                    </type>
                    <name>fMatcherStack</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>XPathMatcherStack</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Cache of value stores for identity constraint fields. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ValueStoreCache</name>
                    </type>
                    <name>fValueStoreCache</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValueStoreCache</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLSchemaValidator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4XsiType</name>.
                                    <name>setExtraChecking</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4ApplyDefault</name>.
                                    <name>setFacetChecking</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="block">/*
                * Resets the component. The component can query the component manager
                * about any features and properties that affect the operation of the
                * component.
                *
                * @param componentManager The component manager.
                *
                * @throws SAXException Thrown by component on finitialization error.
                * For example, if a feature or property is
                * required for the operation of the component, the
                * component manager may throw a
                * SAXNotRecognizedException or a
                * SAXNotSupportedException.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLComponentManager</name>
                            </type>
                            <name>componentManager</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{


                    <expr_stmt>
                        <expr>
                            <name>fIdConstraint</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//reset XSDDescription</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fLocationPairs</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// cleanup id table</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationState</name>.
                                    <name>resetIDTables</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//pass the component manager to the factory..</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>nodeFactory</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>componentManager</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// reset schema loader</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fSchemaLoader</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>componentManager</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// initialize state</comment>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentElemDecl</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentCM</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrCMState</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSkipValidationDepth</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNFullValidationDepth</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNNoneValidationDepth</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fElementDepth</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSubElement</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSchemaDynamicValidation</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// datatype normalization</comment>
                    <expr_stmt>
                        <expr>
                            <name>fEntityRef</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fInCDATA</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMatcherStack</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>fMayMatchFieldMap</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// should only clear this if the last schema had identity
                                    constraints.
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fMayMatchFieldMap</name>.
                                                <name>clear</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get error reporter</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fXSIErrorReporter</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>XMLErrorReporter</name>)
                                            <call>
                                                <name><name>componentManager</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ERROR_REPORTER</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>parser_settings</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>parser_settings</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>PARSER_SETTINGS</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parser_settings</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <if>if
                        <condition>(
                            <expr>!
                                <name>parser_settings</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// parser settings have not been changed</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fValidationManager</name>.
                                                <name>addValidationState</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fValidationState</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// Re-parse external schema location properties.</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>XMLSchemaLoader</name>.
                                                <name>processExternalHints</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fExternalSchemas</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fExternalNoNamespaceSchema</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fLocationPairs</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fXSIErrorReporter</name>.
                                                            <name>fErrorReporter</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>


                    <comment type="line">// get symbol table. if it's a new one, add symbols to it.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name> =
                            <init>
                                <expr>(<name>SymbolTable</name>)
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SYMBOL_TABLE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>symbolTable</name>
                                !=
                                <name>fSymbolTable</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSymbolTable</name>
                                        =
                                        <name>symbolTable</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fDynamicValidation</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>DYNAMIC_VALIDATION</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fDynamicValidation</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDynamicValidation</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fDoValidation</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>fDoValidation</name>
                                                =
                                                <call>
                                                    <name><name>componentManager</name>.
                                                        <name>getFeature</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>VALIDATION</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>XMLConfigurationException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fDoValidation</name>
                                                    = false
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDoValidation</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>fDoValidation</name>
                                                =
                                                <call>
                                                    <name><name>componentManager</name>.
                                                        <name>getFeature</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>XMLSchemaValidator</name>.
                                                                    <name>SCHEMA_VALIDATION</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>XMLConfigurationException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fFullChecking</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SCHEMA_FULL_CHECKING</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fFullChecking</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fNormalizeData</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>NORMALIZE_DATA</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fNormalizeData</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fSchemaElementDefault</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SCHEMA_ELEMENT_DEFAULT</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSchemaElementDefault</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fAugPSVI</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SCHEMA_AUGMENT_PSVI</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fAugPSVI</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fSchemaType</name>
                                    =
                                    (<name>String</name>)
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Constants</name>.
                                                        <name>JAXP_PROPERTY_PREFIX</name>
                                                    </name>
                                                    +
                                                    <name><name>Constants</name>.
                                                        <name>SCHEMA_LANGUAGE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSchemaType</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fUseGrammarPoolOnly</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>USE_GRAMMAR_POOL_ONLY</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fUseGrammarPoolOnly</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <expr_stmt>
                        <expr>
                            <name>fEntityResolver</name>
                            = (<name>XMLEntityResolver</name>)
                            <call>
                                <name><name>componentManager</name>.
                                    <name>getProperty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ENTITY_MANAGER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fValidationManager</name>
                            = (<name>ValidationManager</name>)
                            <call>
                                <name><name>componentManager</name>.
                                    <name>getProperty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VALIDATION_MANAGER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationManager</name>.
                                    <name>addValidationState</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fValidationState</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationState</name>.
                                    <name>setSymbolTable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fSymbolTable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <comment type="line">// get schema location properties</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fExternalSchemas</name>
                                    = (<name>String</name>)
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SCHEMA_LOCATION</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fExternalNoNamespaceSchema</name>
                                    =
                                    (<name>String</name>)
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>SCHEMA_NONS_LOCATION</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fExternalSchemas</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fExternalNoNamespaceSchema</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// store the external schema locations. they are set when reset is called,
                    </comment>
                    <comment type="line">// so any other schemaLocation declaration for the same namespace will be
                    </comment>
                    <comment type="line">// effectively ignored. becuase we choose to take first location hint</comment>
                    <comment type="line">// available for a particular namespace.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>XMLSchemaLoader</name>.
                                    <name>processExternalHints</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fExternalSchemas</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fExternalNoNamespaceSchema</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fLocationPairs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>fXSIErrorReporter</name>.
                                                <name>fErrorReporter</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fJaxpSchemaSource</name>
                                    =
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>JAXP_SCHEMA_SOURCE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fJaxpSchemaSource</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// clear grammars, and put the one for schema namespace there</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fGrammarPool</name>
                                    = (<name>XMLGrammarPool</name>)
                                    <call>
                                        <name><name>componentManager</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>XMLGRAMMAR_POOL</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLConfigurationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fGrammarPool</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4XsiType</name>.
                                    <name>setSymbolTable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbolTable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fState4ApplyDefault</name>.
                                    <name>setSymbolTable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbolTable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// reset(XMLComponentManager)</comment>

            <comment type="line">//</comment>
            <comment type="line">// FieldActivator methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Start the value scope for the specified identity constraint. This
                * method is called when the selector matches in order to initialize
                * the value store.
                *
                * @param identityConstraint The identity constraint.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startValueScopeFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IdentityConstraint</name>
                            </type>
                            <name>identityConstraint</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialDepth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ValueStoreBase</name>
                            </type>
                            <name>valueStore</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fValueStoreCache</name>.
                                            <name>getValueStoreFor</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>identityConstraint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>initialDepth</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>valueStore</name>.
                                    <name>startValueScope</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// startValueScopeFor(IdentityConstraint identityConstraint)</comment>

            <comment type="javadoc">/**
                * Request to activate the specified field. This method returns the
                * matcher for the field.
                *
                * @param field The field to activate.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XPathMatcher</name>
                </type>
                <name>activateField</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Field</name>
                            </type>
                            <name>field</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialDepth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ValueStore</name>
                            </type>
                            <name>valueStore</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fValueStoreCache</name>.
                                            <name>getValueStoreFor</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>field</name>.
                                                            <name>getIdentityConstraint</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>initialDepth</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMayMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>field</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XPathMatcher</name>
                            </type>
                            <name>matcher</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>field</name>.
                                            <name>createMatcher</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>valueStore</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMatcherStack</name>.
                                    <name>addMatcher</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>matcher</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>matcher</name>.
                                    <name>startDocumentFragment</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>matcher</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// activateField(Field):XPathMatcher</comment>

            <comment type="javadoc">/**
                * Ends the value scope for the specified identity constraint.
                *
                * @param identityConstraint The identity constraint.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endValueScopeFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IdentityConstraint</name>
                            </type>
                            <name>identityConstraint</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialDepth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ValueStoreBase</name>
                            </type>
                            <name>valueStore</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fValueStoreCache</name>.
                                            <name>getValueStoreFor</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>identityConstraint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>initialDepth</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>valueStore</name>.
                                    <name>endValueScope</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// endValueScopeFor(IdentityConstraint)</comment>

            <comment type="javadoc">/**
                * Sets whether the given field is permitted to match a value.
                * This should be used to catch instance documents that try
                * and match a field several times in the same scope.
                *
                * @param field The field that may be permitted to be matched.
                * @param state Boolean indiciating whether the field may be matched.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMayMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Field</name>
                            </type>
                            <name>field</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMayMatchFieldMap</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>field</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>state</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setMayMatch(Field, Boolean)</comment>

            <comment type="javadoc">/**
                * Returns whether the given field is permitted to match a value.
                *
                * @param field The field that may be permitted to be matched.
                * @return Boolean indicating whether the field may be matched.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Boolean</name>
                </type>
                <name>mayMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Field</name>
                            </type>
                            <name>field</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>Boolean</name>)
                            <call>
                                <name><name>fMayMatchFieldMap</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>field</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// mayMatch(Field):Boolean</comment>

            <comment type="line">// a utility method for Identity constraints</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>activateSelectorFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IdentityConstraint</name>
                            </type>
                            <name>ic</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Selector</name>
                            </type>
                            <name>selector</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ic</name>.
                                            <name>getSelector</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FieldActivator</name>
                            </type>
                            <name>activator</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>selector</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XPathMatcher</name>
                            </type>
                            <name>matcher</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>selector</name>.
                                            <name>createMatcher</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>activator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMatcherStack</name>.
                                    <name>addMatcher</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>matcher</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>matcher</name>.
                                    <name>startDocumentFragment</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** ensure element stack capacity */</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>ensureStackCapacity</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                ==
                                <name><name>fElemDeclStack</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>newSize</name> =
                                        <init>
                                            <expr>
                                                <name>fElementDepth</name>
                                                +
                                                <name>INC_STACK_SIZE</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayB</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>boolean</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fSubElementStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSubElementStack</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSElementDecl</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayE</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>XSElementDecl</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fElemDeclStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayE</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fElemDeclStack</name>
                                        =
                                        <name>newArrayE</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>newArrayB</name>
                                        = new
                                        <name>
                                            <name>boolean</name>
                                            <index>[
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNilStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNilStack</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSNotationDecl</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayN</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>XSNotationDecl</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNotationStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayN</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNotationStack</name>
                                        =
                                        <name>newArrayN</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSTypeDefinition</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayT</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>XSTypeDefinition</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fTypeStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayT</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fTypeStack</name>
                                        =
                                        <name>newArrayT</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSCMValidator</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayC</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>XSCMValidator</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCMStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayC</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCMStack</name>
                                        =
                                        <name>newArrayC</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>newArrayB</name>
                                        = new
                                        <name>
                                            <name>boolean</name>
                                            <index>[
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fSawTextStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSawTextStack</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>newArrayB</name>
                                        = new
                                        <name>
                                            <name>boolean</name>
                                            <index>[
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fStringContent</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fStringContent</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>newArrayB</name>
                                        = new
                                        <name>
                                            <name>boolean</name>
                                            <index>[
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fSawChildrenStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSawChildrenStack</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>newArrayB</name>
                                        = new
                                        <name>
                                            <name>boolean</name>
                                            <index>[
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fStrictAssessStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayB</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fStrictAssessStack</name>
                                        =
                                        <name>newArrayB</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                            <index>[]</index>
                                            <index>[]</index>
                                        </type>
                                        <name>newArrayIA</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newSize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCMStateStack</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArrayIA</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fElementDepth</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCMStateStack</name>
                                        =
                                        <name>newArrayIA</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// ensureStackCapacity</comment>

            <comment type="line">// handle start document</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>handleStartDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>locator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValueStoreCache</name>.
                                    <name>startDocument</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fAugPSVI</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fGrammars</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fSchemaInformation</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// handleStartDocument(XMLLocator,String)</comment>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>handleEndDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValueStoreCache</name>.
                                    <name>endDocument</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// handleEndDocument()</comment>

            <comment type="line">// handle character contents</comment>
            <comment type="line">// returns the normalized string if possible, otherwise the original string</comment>
            <function>
                <type>
                    <name>XMLString</name>
                </type>
                <name>handleCharacters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fSkipValidationDepth</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>text</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>fSawText</name>
                            = <name>fSawText</name> ||
                            <name><name>text</name>.
                                <name>length</name>
                            </name>
                            &gt; 0
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Note: data in EntityRef and CDATA is normalized as well</comment>
                    <comment type="line">// if whitespace == -1 skip normalization, because it is a complexType
                    </comment>
                    <comment type="line">// or a union type.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNormalizeData</name>
                                &amp;&amp; <name>fWhiteSpace</name> != -1 &amp;&amp; <name>fWhiteSpace</name> !=
                                <name><name>XSSimpleType</name>.
                                    <name>WS_PRESERVE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// normalize data</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>normalizeWhitespace</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>text</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fWhiteSpace</name>
                                                        ==
                                                        <name><name>XSSimpleType</name>.
                                                            <name>WS_COLLAPSE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>text</name>
                                        =
                                        <name>fNormalizedStr</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fAppendBuffer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fBuffer</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>text</name>.
                                                        <name>ch</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>text</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>text</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// When it's a complex type with element-only content, we need to</comment>
                    <comment type="line">// find out whether the content contains any non-whitespace character.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentType</name>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>COMPLEX_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSComplexTypeDecl</name>
                                        </type>
                                        <name>ctype</name> =
                                        <init>
                                            <expr>(<name>XSComplexTypeDecl</name>)
                                                <name>fCurrentType</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>ctype</name>.
                                                <name>fContentType</name>
                                            </name>
                                            ==
                                            <name><name>XSComplexTypeDecl</name>.
                                                <name>CONTENTTYPE_ELEMENT</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// data outside of element content</comment>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>
                                                                <name><name>text</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>text</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        +
                                                        <name><name>text</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>!
                                                                <call>
                                                                    <name><name>XMLChar</name>.
                                                                        <name>isSpace</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>text</name>.
                                                                                    <name>ch</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fSawCharacters</name>
                                                                        = true
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <break>break;</break>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>text</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// handleCharacters(XMLString)</comment>

            <comment type="javadoc">/**
                * Normalize whitespace in an XMLString according to the rules defined
                * in XML Schema specifications.
                * @param value The string to normalize.
                * @param collapse replace or collapse
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>normalizeWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>collapse</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>skipSpace</name> =
                            <init>
                                <expr>
                                    <name>collapse</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>sawNonWS</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>leading</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>trailing</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <name><name>value</name>.
                                        <name>offset</name>
                                    </name>
                                    +
                                    <name><name>value</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// ensure the ch array is big enough</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fNormalizedStr</name>.
                                    <name>ch</name>
                                </name>
                                == <name>null</name> ||
                                <name><name>fNormalizedStr</name>.<name>ch</name>.
                                    <name>length</name>
                                </name>
                                &lt;
                                <name><name>value</name>.
                                    <name>length</name>
                                </name>
                                + 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>ch</name>
                                        </name>
                                        = new
                                        <name>
                                            <name>char</name>
                                            <index>[
                                                <expr>
                                                    <name><name>value</name>.
                                                        <name>length</name>
                                                    </name>
                                                    + 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// don't include the leading ' ' for now. might include it later.</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>fNormalizedStr</name>.
                                <name>offset</name>
                            </name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>fNormalizedStr</name>.
                                <name>length</name>
                            </name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>value</name>.
                                            <name>offset</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>c</name>
                                    =
                                    <name><name>value</name>.
                                        <name>ch</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>XMLChar</name>.
                                                <name>isSpace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>skipSpace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// take the first whitespace as a space and
                                                        skip the others
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>fNormalizedStr</name>.
                                                                <name>ch</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name><name>fNormalizedStr</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        ++
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = ' '
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>skipSpace</name>
                                                            =
                                                            <name>collapse</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>sawNonWS</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// this is a leading whitespace, record it
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>leading</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>fNormalizedStr</name>.
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>fNormalizedStr</name>.
                                                                <name>length</name>
                                                            </name>
                                                            ++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>c</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>skipSpace</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>sawNonWS</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>skipSpace</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNormalizedStr</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// if we finished on a space trim it but also record
                                                it
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fNormalizedStr</name>.
                                                        <name>length</name>
                                                    </name>
                                                    --
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>trailing</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>leading</name>
                                                    &amp;&amp; !
                                                    <name>fFirstChunk</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// if all we had was whitespace we skipped
                                                        record it as
                                                    </comment>
                                                    <comment type="line">// trailing whitespace as well</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>trailing</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fNormalizedStr</name>.
                                    <name>length</name>
                                </name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!<name>fFirstChunk</name> &amp;&amp; (<name>fWhiteSpace</name> ==
                                            <name><name>XSSimpleType</name>.
                                                <name>WS_COLLAPSE</name>
                                            </name>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fTrailing</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// previous chunk ended on whitespace
                                                        </comment>
                                                        <comment type="line">// insert whitespace</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNormalizedStr</name>.
                                                                    <name>offset</name>
                                                                </name>
                                                                = 0
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNormalizedStr</name>.
                                                                    <name>ch</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                = ' '
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>leading</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">// previous chunk ended on
                                                                    character,
                                                                </comment>
                                                                <comment type="line">// this chunk starts with
                                                                    whitespace
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>fNormalizedStr</name>.
                                                                            <name>offset</name>
                                                                        </name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>fNormalizedStr</name>.
                                                                            <name>ch</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        = ' '
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// The length includes the leading ' '. Now removing it.</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>fNormalizedStr</name>.
                                <name>length</name>
                            </name>
                            -=
                            <name><name>fNormalizedStr</name>.
                                <name>offset</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fTrailing</name>
                            =
                            <name>trailing</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>trailing</name>
                                ||
                                <name>sawNonWS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fFirstChunk</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>normalizeWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>collapse</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>skipSpace</name> =
                            <init>
                                <expr>
                                    <name>collapse</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>value</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// ensure the ch array is big enough</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fNormalizedStr</name>.
                                    <name>ch</name>
                                </name>
                                == <name>null</name> ||
                                <name><name>fNormalizedStr</name>.<name>ch</name>.
                                    <name>length</name>
                                </name>
                                &lt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>ch</name>
                                        </name>
                                        = new
                                        <name>
                                            <name>char</name>
                                            <index>[
                                                <expr>
                                                    <name>size</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>fNormalizedStr</name>.
                                <name>offset</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>fNormalizedStr</name>.
                                <name>length</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>c</name>
                                    =
                                    <call>
                                        <name><name>value</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>XMLChar</name>.
                                                <name>isSpace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>skipSpace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// take the first whitespace as a space and
                                                        skip the others
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>fNormalizedStr</name>.
                                                                <name>ch</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name><name>fNormalizedStr</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        ++
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = ' '
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>skipSpace</name>
                                                            =
                                                            <name>collapse</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>fNormalizedStr</name>.
                                                    <name>ch</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>fNormalizedStr</name>.
                                                                <name>length</name>
                                                            </name>
                                                            ++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>c</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>skipSpace</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>skipSpace</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNormalizedStr</name>.
                                                <name>length</name>
                                            </name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <comment type="line">// if we finished on a space trim it but also record it
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>fNormalizedStr</name>.
                                                    <name>length</name>
                                                </name>
                                                --
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// handle ignorable whitespace</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>handleIgnorableWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fSkipValidationDepth</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>

                    <comment type="line">// REVISIT: the same process needs to be performed as handleCharacters.
                    </comment>
                    <comment type="line">// only it's simpler here: we know all characters are whitespaces.</comment>

                    }
                </block>
            </function>
            <comment type="line">// handleIgnorableWhitespace(XMLString)</comment>

            <comment type="javadoc">/** Handle element. */</comment>
            <function>
                <type>
                    <name>Augmentations</name>
                </type>
                <name>handleStartElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"==&gt;handleStartElement: " +
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// root element</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                == -1 &amp;&amp;
                                <call>
                                    <name><name>fValidationManager</name>.
                                        <name>isGrammarFound</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fSchemaType</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// schemaType is not specified</comment>
                                            <comment type="line">// if a DTD grammar is found, we do the same thing as
                                                Dynamic:
                                            </comment>
                                            <comment type="line">// if a schema grammar is found, validation is
                                                performed;
                                            </comment>
                                            <comment type="line">// otherwise, skip the whole document.</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSchemaDynamicValidation</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// [1] Either schemaType is DTD, and in this case
                                                validate/schema is turned off
                                            </comment>
                                            <comment type="line">// [2] Validating against XML Schemas only</comment>
                                            <comment type="line">// [a] dynamic validation is false: report error if
                                                SchemaGrammar is not found
                                            </comment>
                                            <comment type="line">// [b] dynamic validation is true: if grammar is not
                                                found ignore.
                                            </comment>
                                            }
                                        </block>
                                    </else>
                                </if>

                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes,
                    </comment>
                    <comment type="line">// parse them to get the grammars</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sLocation</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>URI_XSI</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>XSI_SCHEMALOCATION</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nsLocation</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>URI_XSI</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>XSI_NONAMESPACESCHEMALOCATION</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//store the location hints.. we need to do it so that we can defer the loading
                        of grammar until
                    </comment>
                    <comment type="line">//there is a reference to a component from that namespace. To provide location
                        hints to the
                    </comment>
                    <comment type="line">//application for a namespace</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>storeLocations</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sLocation</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>nsLocation</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// if we are in the content of "skip", then just skip this element</comment>
                    <comment type="line">// REVISIT: is this the correct behaviour for ID constraints? -NG</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSkipValidationDepth</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>fElementDepth</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fAugPSVI</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>augs</name>
                                                =
                                                <call>
                                                    <name>getEmptyAugs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>augs</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>augs</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//try to find schema grammar by different means..</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>sGrammar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>findSchemaGrammar</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>XSDDescription</name>.
                                                        <name>CONTEXT_ELEMENT</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>element</name>.
                                                        <name>uri</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attributes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// if we are not skipping this element, and there is a content model,</comment>
                    <comment type="line">// we try to find the corresponding decl object for this element.</comment>
                    <comment type="line">// the reason we move this part of code here is to make sure the</comment>
                    <comment type="line">// error reported here (if any) is stored within the parent element's</comment>
                    <comment type="line">// context, instead of that of the current element.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>decl</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentCM</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>decl</name>
                                        =
                                        <call>
                                            <name><name>fCurrentCM</name>.
                                                <name>oneTransition</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fCurrCMState</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fSubGroupHandler</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// it could be an element decl or a wildcard decl</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>fCurrCMState</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            ==
                                            <name><name>XSCMValidator</name>.
                                                <name>FIRST_ERROR</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>XSComplexTypeDecl</name>
                                                    </type>
                                                    <name>ctype</name> =
                                                    <init>
                                                        <expr>(<name>XSComplexTypeDecl</name>)
                                                            <name>fCurrentType</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">//REVISIT: is it the only case we will have particle =
                                                null?
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Vector</name>
                                                    </type>
                                                    <name>next</name>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>ctype</name>.
                                                            <name>fParticle</name>
                                                        </name>
                                                        !=
                                                        <name>null</name>
                                                        &amp;&amp; (<name>next</name> =
                                                        <call>
                                                            <name><name>fCurrentCM</name>.
                                                                <name>whatCanGoHere</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fCurrCMState</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ).
                                                        <call>
                                                            <name>size</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        &gt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>expected</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedStr</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>next</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"cvc-complex-type.2.4.a"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name><name>element</name>.
                                                                                            <name>rawname</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name>expected</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"cvc-complex-type.2.4.d"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name><name>element</name>.
                                                                                            <name>rawname</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if it's not the root element, we push the current states in the stacks
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>ensureStackCapacity</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fSubElementStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSubElement</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fElemDeclStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fCurrentElemDecl</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fNilStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fNil</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fNotationStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fNotation</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fTypeStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fCurrentType</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fStrictAssessStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fStrictAssess</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fCMStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fCurrentCM</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fCMStateStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fCurrCMState</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fSawTextStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fSawText</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fStringContent</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fSawCharacters</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fSawChildrenStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>fSawChildren</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// increase the element depth after we've saved</comment>
                    <comment type="line">// all states for the parent element</comment>
                    <expr_stmt>
                        <expr><name>fElementDepth</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentElemDecl</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSWildcardDecl</name>
                            </type>
                            <name>wildcard</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentType</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fStrictAssess</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNil</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNotation</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// and the buffer to hold the value of the element</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fBuffer</name>.
                                    <name>setLength</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSawText</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSawCharacters</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSawChildren</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// check what kind of declaration the "decl" from</comment>
                    <comment type="line">// oneTransition() maps to</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>decl</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>decl</name>
                                            <name>instanceof</name>
                                            <name>XSElementDecl</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentElemDecl</name>
                                                    = (<name>XSElementDecl</name>)
                                                    <name>decl</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>wildcard</name>
                                                    = (<name>XSWildcardDecl</name>)
                                                    <name>decl</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if the wildcard is skip, then return</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>wildcard</name>
                                != <name>null</name> &amp;&amp;
                                <name><name>wildcard</name>.
                                    <name>fProcessContents</name>
                                </name>
                                ==
                                <name><name>XSWildcardDecl</name>.
                                    <name>PC_SKIP</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fSkipValidationDepth</name>
                                        =
                                        <name>fElementDepth</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fAugPSVI</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>augs</name>
                                                =
                                                <call>
                                                    <name>getEmptyAugs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>augs</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>augs</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// try again to get the element decl:</comment>
                    <comment type="line">// case 1: find declaration for root element</comment>
                    <comment type="line">// case 2: find declaration for element from another namespace</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>sGrammar</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentElemDecl</name>
                                                    =
                                                    <call>
                                                        <name><name>sGrammar</name>.
                                                            <name>getGlobalElementDecl</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>element</name>.
                                                                        <name>localpart</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// then get the type</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentType</name>
                                        =
                                        <name><name>fCurrentElemDecl</name>.
                                            <name>fType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get type from xsi:type</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xsiType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>URI_XSI</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>XSI_TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// if no decl/type found for the current element</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentType</name>
                                == <name>null</name> &amp;&amp; <name>xsiType</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// if this is the validation root, report an error, because
                                </comment>
                                <comment type="line">// we can't find eith decl or type for this element</comment>
                                <comment type="line">// REVISIT: should we report error, or warning?</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fElementDepth</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// for dynamic validation, skip the whole content,
                                            </comment>
                                            <comment type="line">// because no grammar was found.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fDynamicValidation</name>
                                                        ||
                                                        <name>fSchemaDynamicValidation</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// no schema grammar was found, but it's
                                                            either dynamic
                                                        </comment>
                                                        <comment type="line">// validation, or another kind of grammar
                                                            was found (DTD,
                                                        </comment>
                                                        <comment type="line">// for example). The intended behavior here
                                                            is to skip
                                                        </comment>
                                                        <comment type="line">// the whole document. To improve
                                                            performance, we try to
                                                        </comment>
                                                        <comment type="line">// remove the validator from the pipeline,
                                                            since it's not
                                                        </comment>
                                                        <comment type="line">// supposed to do anything.</comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>fDocumentSource</name>
                                                                    !=
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>fDocumentSource</name>.
                                                                                    <name>setDocumentHandler</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>fDocumentHandler
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>fDocumentHandler</name>
                                                                                !=
                                                                                <name>null</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>
                                                                                            fDocumentHandler</name>.
                                                                                            <name>setDocumentSource
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        fDocumentSource
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                        </then>
                                                                    </if>
                                                                    <comment type="line">// indicate that the validator
                                                                        was removed.
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fElementDepth</name>
                                                                            = -2
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <return>return
                                                                        <expr>
                                                                            <name>augs</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>

                                                        <expr_stmt>
                                                            <expr>
                                                                <name>fSkipValidationDepth</name>
                                                                =
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>fAugPSVI</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>augs</name>
                                                                        =
                                                                        <call>
                                                                            <name>getEmptyAugs</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>augs</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                        </if>
                                                        <return>return
                                                            <expr>
                                                                <name>augs</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// We don't call reportSchemaError here, because the
                                                spec
                                            </comment>
                                            <comment type="line">// doesn't think it's invalid not to be able to find
                                                a
                                            </comment>
                                            <comment type="line">// declaration or type definition for an element.
                                                Xerces is
                                            </comment>
                                            <comment type="line">// reporting it as an error for historical reasons, but
                                                in
                                            </comment>
                                            <comment type="line">// PSVI, we shouldn't mark this element as invalid
                                                because
                                            </comment>
                                            <comment type="line">// of this. - SG</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fXSIErrorReporter</name>.<name>fErrorReporter</name>.
                                                            <name>reportError</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XSMessageFormatter</name>.
                                                                        <name>SCHEMA_DOMAIN</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>"cvc-elt.1"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XMLErrorReporter</name>.
                                                                        <name>SEVERITY_ERROR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// if wildcard = strict, report error.</comment>
                                    <comment type="line">// needs to be called before fXSIErrorReporter.pushContext()
                                    </comment>
                                    <comment type="line">// so that the error belongs to the parent element.</comment>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>wildcard</name>
                                                    != <name>null</name> &amp;&amp;
                                                    <name><name>wildcard</name>.
                                                        <name>fProcessContents</name>
                                                    </name>
                                                    ==
                                                    <name><name>XSWildcardDecl</name>.
                                                        <name>PC_STRICT</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// report error, because wilcard = strict
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportSchemaError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"cvc-complex-type.2.4.c"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <name><name>element</name>.
                                                                                        <name>rawname</name>
                                                                                    </name>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                <comment type="line">// no element decl or type found for this element.</comment>
                                <comment type="line">// Allowed by the spec, we can choose to either laxly assess this
                                </comment>
                                <comment type="line">// element, or to skip it. Now we choose lax assessment.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentType</name>
                                        =
                                        <name><name>SchemaGrammar</name>.
                                            <name>fAnyType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fStrictAssess</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNFullValidationDepth</name>
                                        =
                                        <name>fElementDepth</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// any type has mixed content, so we don't need to append buffer
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fAppendBuffer</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// push error reporter context: record the current position
                                </comment>
                                <comment type="line">// This has to happen after we process skip contents,</comment>
                                <comment type="line">// otherwise push and pop won't be correctly paired.</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fXSIErrorReporter</name>.
                                                <name>pushContext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// push error reporter context: record the current position
                                </comment>
                                <comment type="line">// This has to happen after we process skip contents,</comment>
                                <comment type="line">// otherwise push and pop won't be correctly paired.</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fXSIErrorReporter</name>.
                                                <name>pushContext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// get xsi:type</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>xsiType</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>XSTypeDefinition</name>
                                                    </type>
                                                    <name>oldType</name> =
                                                    <init>
                                                        <expr>
                                                            <name>fCurrentType</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentType</name>
                                                    =
                                                    <call>
                                                        <name>getAndCheckXsiType</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>xsiType</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>attributes</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// If it fails, use the old type. Use anyType if ther
                                                is no old type.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fCurrentType</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>oldType</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fCurrentType</name>
                                                                        =
                                                                        <name><name>SchemaGrammar</name>.
                                                                            <name>fAnyType</name>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                            <else>else
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fCurrentType</name>
                                                                        =
                                                                        <name>oldType</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>fNNoneValidationDepth</name>
                                        =
                                        <name>fElementDepth</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// if the element has a fixed value constraint, we need to append
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fCurrentElemDecl</name>
                                            !=
                                            <name>null</name>
                                            &amp;&amp;
                                            <call>
                                                <name><name>fCurrentElemDecl</name>.
                                                    <name>getConstraintType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>XSConstants</name>.
                                                <name>VC_FIXED</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fAppendBuffer</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// if the type is simple, we need to append</comment>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>fCurrentType</name>.
                                                            <name>getTypeCategory</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>XSTypeDefinition</name>.
                                                        <name>SIMPLE_TYPE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fAppendBuffer</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// if the type is simple content complex type,
                                                        we need to append
                                                    </comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>XSComplexTypeDecl</name>
                                                            </type>
                                                            <name>ctype</name> =
                                                            <init>
                                                                <expr>(<name>XSComplexTypeDecl</name>)
                                                                    <name>fCurrentType</name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fAppendBuffer</name>
                                                            = (
                                                            <name><name>ctype</name>.
                                                                <name>fContentType</name>
                                                            </name>
                                                            ==
                                                            <name><name>XSComplexTypeDecl</name>.
                                                                <name>CONTENTTYPE_SIMPLE</name>
                                                            </name>
                                                            )
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// Element Locally Valid (Element)</comment>
                    <comment type="line">// 2 Its {abstract} must be false.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>fCurrentElemDecl</name>.
                                        <name>getAbstract</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>reportSchemaError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"cvc-elt.2"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <name>
                                                        <name>Object</name>
                                                        <index>[]</index>
                                                    </name>
                                                    <block>{
                                                        <expr>
                                                            <name><name>element</name>.
                                                                <name>rawname</name>
                                                            </name>
                                                        </expr>
                                                        }
                                                    </block>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// make the current element validation root</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fValidationRoot</name>
                                        =
                                        <name><name>element</name>.
                                            <name>rawname</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// update normalization flags</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNormalizeData</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// reset values</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fFirstChunk</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fTrailing</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fUnionType</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fWhiteSpace</name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Element Locally Valid (Type)</comment>
                    <comment type="line">// 2 Its {abstract} must be false.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>COMPLEX_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSComplexTypeDecl</name>
                                        </type>
                                        <name>ctype</name> =
                                        <init>
                                            <expr>(<name>XSComplexTypeDecl</name>)
                                                <name>fCurrentType</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>ctype</name>.
                                                    <name>getAbstract</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-type.2"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fNormalizeData</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// find out if the content type is simple and if
                                                variety is union
                                            </comment>
                                            <comment type="line">// to be able to do character normalization</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>ctype</name>.
                                                            <name>fContentType</name>
                                                        </name>
                                                        ==
                                                        <name><name>XSComplexTypeDecl</name>.
                                                            <name>CONTENTTYPE_SIMPLE</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>ctype</name>.<name>
                                                                            fXSSimpleType</name>.
                                                                            <name>getVariety</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    ==
                                                                    <name><name>XSSimpleType</name>.
                                                                        <name>VARIETY_UNION</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fUnionType</name>
                                                                            = true
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <try>try
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>fWhiteSpace</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>ctype</name>.<name>
                                                                                            fXSSimpleType</name>.
                                                                                            <name>getWhitespace</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                        <catch>catch (
                                                                            <param>
                                                                                <decl>
                                                                                    <type>
                                                                                        <name>DatatypeException</name>
                                                                                    </type>
                                                                                    <name>e</name>
                                                                                </decl>
                                                                            </param>
                                                                            )
                                                                            <block>{
                                                                                <comment type="line">// do nothing
                                                                                </comment>
                                                                                }
                                                                            </block>
                                                                        </catch>
                                                                    </try>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <comment type="line">// normalization: simple type</comment>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fNormalizeData</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if !union type</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>XSSimpleType</name>
                                                </type>
                                                <name>dv</name> =
                                                <init>
                                                    <expr>(<name>XSSimpleType</name>)
                                                        <name>fCurrentType</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>dv</name>.
                                                            <name>getVariety</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>XSSimpleType</name>.
                                                        <name>VARIETY_UNION</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fUnionType</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <try>try
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>fWhiteSpace</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>dv</name>.
                                                                            <name>getWhitespace</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                        <catch>catch (
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>DatatypeException</name>
                                                                    </type>
                                                                    <name>e</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                            <block>{
                                                                <comment type="line">// do nothing</comment>
                                                                }
                                                            </block>
                                                        </catch>
                                                    </try>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// then try to get the content model</comment>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentCM</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>COMPLEX_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentCM</name>
                                        = ((<name>XSComplexTypeDecl</name>) <name>fCurrentType</name>).
                                        <call>
                                            <name>getContentModel</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCMBuilder</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// and get the initial content model state</comment>
                    <expr_stmt>
                        <expr>
                            <name>fCurrCMState</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentCM</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fCurrCMState</name>
                                    =
                                    <call>
                                        <name><name>fCurrentCM</name>.
                                            <name>startContentModel</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// get information about xsi:nil</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xsiNil</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>URI_XSI</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>XSI_NIL</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// only deal with xsi:nil when there is an element declaration</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>xsiNil</name>
                                != <name>null</name> &amp;&amp; <name>fCurrentElemDecl</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fNil</name>
                                    =
                                    <call>
                                        <name>getXsiNil</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>xsiNil</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// now validate everything related with the attributes</comment>
                    <comment type="line">// first, get the attribute group</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSAttributeGroupDecl</name>
                            </type>
                            <name>attrGrp</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>COMPLEX_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>XSComplexTypeDecl</name>
                                        </type>
                                        <name>ctype</name> =
                                        <init>
                                            <expr>(<name>XSComplexTypeDecl</name>)
                                                <name>fCurrentType</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>attrGrp</name>
                                        =
                                        <call>
                                            <name><name>ctype</name>.
                                                <name>getAttrGrp</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// activate identity constraints</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValueStoreCache</name>.
                                    <name>startElement</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fMatcherStack</name>.
                                    <name>pushContext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                != <name>null</name> &amp;&amp;
                                <name><name>fCurrentElemDecl</name>.
                                    <name>fIDCPos</name>
                                </name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fIdConstraint</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// initialize when identity constrains are defined for the elem
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fValueStoreCache</name>.
                                                <name>initValueStoresFor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCurrentElemDecl</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>processAttributes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrGrp</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// add default attributes</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>attrGrp</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>addDefaultAttributes</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attributes</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrGrp</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// call all active identity constraints</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fMatcherStack</name>.
                                            <name>getMatcherCount</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>count</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XPathMatcher</name>
                                    </type>
                                    <name>matcher</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fMatcherStack</name>.
                                                    <name>getMatcherAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>matcher</name>.
                                            <name>startElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attributes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fAugPSVI</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>augs</name>
                                        =
                                        <call>
                                            <name>getEmptyAugs</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// PSVI: add validation context</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fValidationContext</name>
                                        </name>
                                        =
                                        <name>fValidationRoot</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: add element declaration</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fDeclaration</name>
                                        </name>
                                        =
                                        <name>fCurrentElemDecl</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: add element type</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fTypeDecl</name>
                                        </name>
                                        =
                                        <name>fCurrentType</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: add notation attribute</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fNotation</name>
                                        </name>
                                        =
                                        <name>fNotation</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>augs</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// handleStartElement(QName,XMLAttributes,boolean)</comment>

            <comment type="javadoc">/**
                * Handle end element. If there is not text content, and there is a
                * {value constraint} on the corresponding element decl, then
                * set the fDefaultValue XMLString representing the default value.
                */
            </comment>
            <function>
                <type>
                    <name>Augmentations</name>
                </type>
                <name>handleEndElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"==&gt;handleEndElement:" +
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if we are skipping, return</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSkipValidationDepth</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// but if this is the top element that we are skipping,</comment>
                                <comment type="line">// restore the states.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fSkipValidationDepth</name>
                                            == <name>fElementDepth</name> &amp;&amp; <name>fSkipValidationDepth</name> &gt;
                                            0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// set the partial validation depth to the depth of
                                                parent
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fNFullValidationDepth</name>
                                                    = <name>fSkipValidationDepth</name> - 1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSkipValidationDepth</name>
                                                    = -1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr><name>fElementDepth</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSubElement</name>
                                                    =
                                                    <name>
                                                        <name>fSubElementStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentElemDecl</name>
                                                    =
                                                    <name>
                                                        <name>fElemDeclStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fNil</name>
                                                    =
                                                    <name>
                                                        <name>fNilStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fNotation</name>
                                                    =
                                                    <name>
                                                        <name>fNotationStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentType</name>
                                                    =
                                                    <name>
                                                        <name>fTypeStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentCM</name>
                                                    =
                                                    <name>
                                                        <name>fCMStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStrictAssess</name>
                                                    =
                                                    <name>
                                                        <name>fStrictAssessStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrCMState</name>
                                                    =
                                                    <name>
                                                        <name>fCMStateStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSawText</name>
                                                    =
                                                    <name>
                                                        <name>fSawTextStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSawCharacters</name>
                                                    =
                                                    <name>
                                                        <name>fStringContent</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fSawChildren</name>
                                                    =
                                                    <name>
                                                        <name>fSawChildrenStack</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fElementDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>fElementDepth</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>

                                <comment type="line">// PSVI: validation attempted:</comment>
                                <comment type="line">// use default values in psvi item for</comment>
                                <comment type="line">// validation attempted, validity, and error codes</comment>

                                <comment type="line">// check extra schema constraints on root element</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fElementDepth</name>
                                            == -1 &amp;&amp;
                                            <name>fFullChecking</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>XSConstraints</name>.
                                                            <name>fullSchemaChecking</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fGrammarBucket</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>fSubGroupHandler</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>fCMBuilder</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>fXSIErrorReporter</name>.
                                                                        <name>fErrorReporter</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fAugPSVI</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>augs</name>
                                                =
                                                <call>
                                                    <name>getEmptyAugs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>augs</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>augs</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// now validate the content of the element</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>processElementContent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Element Locally Valid (Element)</comment>
                    <comment type="line">// 6 The element information item must be valid with respect to each of the
                        {identity-constraint definitions} as per Identity-constraint Satisfied (3.11.4).
                    </comment>

                    <comment type="line">// call matchers and de-activate context</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oldCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fMatcherStack</name>.
                                            <name>getMatcherCount</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>oldCount</name>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XPathMatcher</name>
                                    </type>
                                    <name>matcher</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fMatcherStack</name>.
                                                    <name>getMatcherAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fCurrentElemDecl</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>matcher</name>.
                                                    <name>endElement</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>actualValueType</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>itemValueTypes</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>

                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>matcher</name>.
                                                    <name>endElement</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fCurrentType</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>fCurrentElemDecl</name>.
                                                                    <name>getNillable</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fDefaultValue</name>
                                                            ==
                                                            <name>null</name>
                                                            ?
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                            :
                                                            <name><name>fCurrentElemDecl</name>.<name>fDefault</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fDefaultValue</name>
                                                            ==
                                                            <name>null</name>
                                                            ?
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>actualValueType</name>
                                                            </name>
                                                            :
                                                            <name><name>fCurrentElemDecl</name>.<name>fDefault</name>.
                                                                <name>actualValueType</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fDefaultValue</name>
                                                            ==
                                                            <name>null</name>
                                                            ?
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>itemValueTypes</name>
                                                            </name>
                                                            :
                                                            <name><name>fCurrentElemDecl</name>.<name>fDefault</name>.
                                                                <name>itemValueTypes</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fMatcherStack</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fMatcherStack</name>.
                                                <name>popContext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fMatcherStack</name>.
                                            <name>getMatcherCount</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// handle everything *but* keyref's.</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>oldCount</name>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;=
                                <name>newCount</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XPathMatcher</name>
                                    </type>
                                    <name>matcher</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fMatcherStack</name>.
                                                    <name>getMatcherAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>matcher</name>
                                        <name>instanceof</name>
                                        <name><name>Selector</name>.
                                            <name>Matcher</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name><name>Selector</name>.
                                                        <name>Matcher</name>
                                                    </name>
                                                </type>
                                                <name>selMatcher</name> =
                                                <init>
                                                    <expr>(
                                                        <name><name>Selector</name>.
                                                            <name>Matcher</name>
                                                        </name>
                                                        )
                                                        <name>matcher</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>IdentityConstraint</name>
                                                </type>
                                                <name>id</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>id</name> =
                                                    <call>
                                                        <name><name>selMatcher</name>.
                                                            <name>getIdentityConstraint</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ) !=
                                                    <name>null</name>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>id</name>.
                                                            <name>getCategory</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_KEYREF</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fValueStoreCache</name>.
                                                                    <name>transplant</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>id</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>selMatcher</name>.
                                                                                    <name>getInitialDepth</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// now handle keyref's/...</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>oldCount</name>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;=
                                <name>newCount</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XPathMatcher</name>
                                    </type>
                                    <name>matcher</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fMatcherStack</name>.
                                                    <name>getMatcherAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>matcher</name>
                                        <name>instanceof</name>
                                        <name><name>Selector</name>.
                                            <name>Matcher</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name><name>Selector</name>.
                                                        <name>Matcher</name>
                                                    </name>
                                                </type>
                                                <name>selMatcher</name> =
                                                <init>
                                                    <expr>(
                                                        <name><name>Selector</name>.
                                                            <name>Matcher</name>
                                                        </name>
                                                        )
                                                        <name>matcher</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>IdentityConstraint</name>
                                                </type>
                                                <name>id</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>id</name> =
                                                    <call>
                                                        <name><name>selMatcher</name>.
                                                            <name>getIdentityConstraint</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ) !=
                                                    <name>null</name>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>id</name>.
                                                            <name>getCategory</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_KEYREF</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>ValueStoreBase</name>
                                                            </type>
                                                            <name>values</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fValueStoreCache</name>.
                                                                            <name>getValueStoreFor</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>id</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>selMatcher</name>.
                                                                                            <name>getInitialDepth</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>values</name>
                                                                !=
                                                                <name>null</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <comment type="line">// nothing to do if nothing matched!
                                                            </comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>values</name>.
                                                                            <name>endDocumentFragment</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValueStoreCache</name>.
                                    <name>endElement</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                                <index>[]</index>
                            </type>
                            <name>grammars</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// have we reached the end tag of the validation root?</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fElementDepth</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 7 If the element information item is the validation root, it
                                    must be valid per Validation Root Valid (ID/IDREF) (3.3.4).
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>invIdRef</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fValidationState</name>.
                                                        <name>checkIDRefID</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fValidationState</name>.
                                                <name>resetIDTables</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>invIdRef</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-id.1"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name>invIdRef</name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// check extra schema constraints</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fFullChecking</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>XSConstraints</name>.
                                                            <name>fullSchemaChecking</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fGrammarBucket</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>fSubGroupHandler</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>fCMBuilder</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>fXSIErrorReporter</name>.
                                                                        <name>fErrorReporter</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>grammars</name>
                                        =
                                        <call>
                                            <name><name>fGrammarBucket</name>.
                                                <name>getGrammars</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// return the final set of grammars validator ended up with
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fGrammarPool</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fGrammarPool</name>.
                                                            <name>cacheGrammars</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XMLGrammarDescription</name>.
                                                                        <name>XML_SCHEMA</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>grammars</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>augs</name>
                                        =
                                        <call>
                                            <name>endElementPSVI</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>grammars</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>augs</name>
                                        =
                                        <call>
                                            <name>endElementPSVI</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>grammars</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// decrease element depth and restore states</comment>
                                <expr_stmt>
                                    <expr><name>fElementDepth</name>--
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// get the states for the parent element.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fSubElement</name>
                                        =
                                        <name>
                                            <name>fSubElementStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentElemDecl</name>
                                        =
                                        <name>
                                            <name>fElemDeclStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNil</name>
                                        =
                                        <name>
                                            <name>fNilStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNotation</name>
                                        =
                                        <name>
                                            <name>fNotationStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentType</name>
                                        =
                                        <name>
                                            <name>fTypeStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentCM</name>
                                        =
                                        <name>
                                            <name>fCMStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fStrictAssess</name>
                                        =
                                        <name>
                                            <name>fStrictAssessStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrCMState</name>
                                        =
                                        <name>
                                            <name>fCMStateStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSawText</name>
                                        =
                                        <name>
                                            <name>fSawTextStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSawCharacters</name>
                                        =
                                        <name>
                                            <name>fStringContent</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSawChildren</name>
                                        =
                                        <name>
                                            <name>fSawChildrenStack</name>
                                            <index>[
                                                <expr>
                                                    <name>fElementDepth</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// We should have a stack for whitespace value, and pop it up
                                    here.
                                </comment>
                                <comment type="line">// But when fWhiteSpace != -1, and we see a sub-element, it must
                                    be
                                </comment>
                                <comment type="line">// an error (at least for Schema 1.0). So for valid documents,
                                    the
                                </comment>
                                <comment type="line">// only value we are going to push/pop in the stack is -1.
                                </comment>
                                <comment type="line">// Here we just mimic the effect of popping -1. -SG</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fWhiteSpace</name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// Same for append buffer. Simple types and elements with fixed
                                </comment>
                                <comment type="line">// value constraint don't allow sub-elements. -SG</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fAppendBuffer</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// same here.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fUnionType</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>augs</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// handleEndElement(QName,boolean)*/</comment>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>Augmentations</name>
                </type>
                <name>endElementPSVI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SchemaGrammar</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>grammars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fAugPSVI</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>augs</name>
                                        =
                                        <call>
                                            <name>getEmptyAugs</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// the 4 properties sent on startElement calls</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fDeclaration</name>
                                        </name>
                                        =
                                        <name><name>this</name>.
                                            <name>fCurrentElemDecl</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fTypeDecl</name>
                                        </name>
                                        =
                                        <name><name>this</name>.
                                            <name>fCurrentType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fNotation</name>
                                        </name>
                                        =
                                        <name><name>this</name>.
                                            <name>fNotation</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fValidationContext</name>
                                        </name>
                                        =
                                        <name><name>this</name>.
                                            <name>fValidationRoot</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: validation attempted</comment>
                                <comment type="line">// nothing below or at the same level has none or partial</comment>
                                <comment type="line">// (which means this level is strictly assessed, and all chidren
                                </comment>
                                <comment type="line">// are full), so this one has full</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fElementDepth</name>
                                            &gt;
                                            <name>fNFullValidationDepth</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fValidationAttempted</name>
                                                    </name>
                                                    =
                                                    <name><name>ElementPSVI</name>.
                                                        <name>VALIDATION_FULL</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// nothing below or at the same level has full or partial
                                    </comment>
                                    <comment type="line">// (which means this level is not strictly assessed, and all
                                        chidren
                                    </comment>
                                    <comment type="line">// are none), so this one has none</comment>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fElementDepth</name>
                                                    &gt;
                                                    <name>fNNoneValidationDepth</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>fCurrentPSVI</name>.
                                                                <name>fValidationAttempted</name>
                                                            </name>
                                                            =
                                                            <name><name>ElementPSVI</name>.
                                                                <name>VALIDATION_NONE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// otherwise partial, and anything above this level
                                                will be partial
                                            </comment>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>fCurrentPSVI</name>.
                                                                <name>fValidationAttempted</name>
                                                            </name>
                                                            =
                                                            <name><name>ElementPSVI</name>.
                                                                <name>VALIDATION_PARTIAL</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fNFullValidationDepth</name>
                                                            = <name>fNNoneValidationDepth</name> = <name>fElementDepth
                                                        </name> - 1
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                    </else>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDefaultValue</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>fCurrentPSVI</name>.
                                                    <name>fSpecified</name>
                                                </name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fNil</name>
                                        </name>
                                        =
                                        <name>fNil</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fMemberType</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>memberType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fNormalizedValue</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>normalizedValue</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fActualValue</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>actualValue</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fActualValueType</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>actualValueType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fCurrentPSVI</name>.
                                            <name>fItemValueTypes</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>itemValueTypes</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fStrictAssess</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// get all errors for the current element, its
                                                attribute,
                                            </comment>
                                            <comment type="line">// and subelements (if they were strictly assessed).
                                            </comment>
                                            <comment type="line">// any error would make this element invalid.</comment>
                                            <comment type="line">// and we merge these errors to the parent element.
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>errors</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>fXSIErrorReporter</name>.
                                                                    <name>mergeContext</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <comment type="line">// PSVI: error codes</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fErrorCodes</name>
                                                    </name>
                                                    =
                                                    <name>errors</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// PSVI: validity</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fValidity</name>
                                                    </name>
                                                    =
                                                    (<name>errors</name> == <name>null</name>) ?
                                                    <name><name>ElementPSVI</name>.
                                                        <name>VALIDITY_VALID</name>
                                                    </name>
                                                    :
                                                    <name><name>ElementPSVI</name>.
                                                        <name>VALIDITY_INVALID</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// PSVI: validity</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fValidity</name>
                                                    </name>
                                                    =
                                                    <name><name>ElementPSVI</name>.
                                                        <name>VALIDITY_NOTKNOWN</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// Discard the current context: ignore any error
                                                happened within
                                            </comment>
                                            <comment type="line">// the sub-elements/attributes of this element, because
                                                those
                                            </comment>
                                            <comment type="line">// errors won't affect the validity of the parent
                                                elements.
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fXSIErrorReporter</name>.
                                                            <name>popContext</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// store [schema information] in the PSVI</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fGrammars</name>
                                                    </name>
                                                    =
                                                    <name>grammars</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fCurrentPSVI</name>.
                                                        <name>fSchemaInformation</name>
                                                    </name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>augs</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Augmentations</name>
                </type>
                <name>getEmptyAugs</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>augs</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>augs</name>
                                        =
                                        <name>fAugmentations</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>augs</name>.
                                                <name>removeAllItems</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>augs</name>.
                                    <name>putItem</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Constants</name>.
                                                <name>ELEMENT_PSVI</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fCurrentPSVI</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fCurrentPSVI</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>augs</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>storeLocations</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sLocation</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nsLocation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>sLocation</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>XMLSchemaLoader</name>.
                                                    <name>tokenizeSchemaLocationStr</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>sLocation</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fLocationPairs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// error!</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fXSIErrorReporter</name>.
                                                            <name>reportError</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XSMessageFormatter</name>.
                                                                        <name>SCHEMA_DOMAIN</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>"SchemaLocation"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name>sLocation</name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XMLErrorReporter</name>.
                                                                        <name>SEVERITY_WARNING</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>nsLocation</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name><name>XMLSchemaLoader</name>.
                                                <name>LocationArray</name>
                                            </name>
                                        </type>
                                        <name>la</name> =
                                        <init>
                                            <expr>((
                                                <name><name>XMLSchemaLoader</name>.
                                                    <name>LocationArray</name>
                                                </name>
                                                )
                                                <call>
                                                    <name><name>fLocationPairs</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>XMLSymbols</name>.
                                                                    <name>EMPTY_STRING</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                )
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>la</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>la</name>
                                                    = new
                                                    <call>
                                                        <name><name>XMLSchemaLoader</name>.
                                                            <name>LocationArray</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fLocationPairs</name>.
                                                            <name>put</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>XMLSymbols</name>.
                                                                        <name>EMPTY_STRING</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>la</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>la</name>.
                                                <name>addLocation</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>nsLocation</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">//storeLocations</comment>

            <comment type="line">//this is the function where logic of retrieving grammar is written , parser first
                tries to get the grammar from
            </comment>
            <comment type="line">//the local pool, if not in local pool, it gives chance to application to be able to
                retrieve the grammar, then it
            </comment>
            <comment type="line">//tries to parse the grammar using location hints from the give namespace.</comment>
            <function>
                <type>
                    <name>SchemaGrammar</name>
                </type>
                <name>findSchemaGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>contextType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>enclosingElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>triggeringComponet</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>grammar</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//get the grammar from local pool...</comment>
                    <expr_stmt>
                        <expr>
                            <name>grammar</name>
                            =
                            <call>
                                <name><name>fGrammarBucket</name>.
                                    <name>getGrammar</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>grammar</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fXSDDescription</name>.
                                                <name>reset</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fXSDDescription</name>.
                                            <name>fContextType</name>
                                        </name>
                                        =
                                        <name>contextType</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fXSDDescription</name>.
                                                <name>setNamespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>namespace</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fXSDDescription</name>.
                                            <name>fEnclosedElementName</name>
                                        </name>
                                        =
                                        <name>enclosingElement</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fXSDDescription</name>.
                                            <name>fTriggeringComponent</name>
                                        </name>
                                        =
                                        <name>triggeringComponet</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fXSDDescription</name>.
                                            <name>fAttributes</name>
                                        </name>
                                        =
                                        <name>attributes</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fLocator</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fXSDDescription</name>.
                                                            <name>setBaseSystemId</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fLocator</name>.
                                                                            <name>getExpandedSystemId</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                            <index>[]</index>
                                        </type>
                                        <name>temp</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>locationArray</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fLocationPairs</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>namespace</name>
                                                                == <name>null</name> ?
                                                                <name><name>XMLSymbols</name>.
                                                                    <name>EMPTY_STRING</name>
                                                                </name>
                                                                :
                                                                <name>namespace</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>locationArray</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>temp</name>
                                                = ((
                                                <name><name>XMLSchemaLoader</name>.
                                                    <name>LocationArray</name>
                                                </name>
                                                ) <name>locationArray</name>).
                                                <call>
                                                    <name>getLocationArray</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>temp</name>
                                            != <name>null</name> &amp;&amp;
                                            <name><name>temp</name>.
                                                <name>length</name>
                                            </name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fXSDDescription</name>.
                                                        <name>fLocationHints</name>
                                                    </name>
                                                    = new
                                                    <name>
                                                        <name>String</name>
                                                        <index>[
                                                            <expr>
                                                                <name><name>temp</name>.
                                                                    <name>length</name>
                                                                </name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>temp</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>fXSDDescription</name>.
                                                                        <name>fLocationHints</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>temp</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// give a chance to application to be able to retreive the
                                    grammar.
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fGrammarPool</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>grammar</name>
                                                    = (<name>SchemaGrammar</name>)
                                                    <call>
                                                        <name><name>fGrammarPool</name>.
                                                            <name>retrieveGrammar</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fXSDDescription</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>grammar</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// put this grammar into the bucket, along
                                                            with grammars
                                                        </comment>
                                                        <comment type="line">// imported by it (directly or
                                                            indirectly)
                                                        </comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>!
                                                                    <call>
                                                                        <name><name>fGrammarBucket</name>.
                                                                            <name>putGrammar</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>grammar</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>true</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// REVISIT: a conflict between
                                                                        new grammar(s) and grammars
                                                                    </comment>
                                                                    <comment type="line">// in the bucket. What to do? A
                                                                        warning? An exception?
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>fXSIErrorReporter</name>
                                                                                    .<name>fErrorReporter</name>.
                                                                                    <name>reportError</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                XSMessageFormatter</name>
                                                                                                .
                                                                                                <name>SCHEMA_DOMAIN
                                                                                                </name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>"GrammarConflict"</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>null</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                XMLErrorReporter</name>.
                                                                                                <name>SEVERITY_WARNING
                                                                                                </name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>grammar</name>
                                                                            =
                                                                            <name>null</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>grammar</name>
                                            == <name>null</name> &amp;&amp; !
                                            <name>fUseGrammarPoolOnly</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// try to parse the grammar using location hints from
                                                that namespace..
                                            </comment>
                                            <try>try
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>XMLInputSource</name>
                                                            </type>
                                                            <name>xis</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>XMLSchemaLoader</name>.
                                                                            <name>resolveDocument</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fXSDDescription</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fLocationPairs</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fEntityResolver</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>grammar</name>
                                                            =
                                                            <call>
                                                                <name><name>fSchemaLoader</name>.
                                                                    <name>loadSchema</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fXSDDescription</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>xis</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fLocationPairs</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>IOException</name>
                                                            </type>
                                                            <name>ex</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <specifier>final</specifier>
                                                                    <name>String</name>
                                                                    <index>[]</index>
                                                                </type>
                                                                <name>locationHints</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fXSDDescription</name>.
                                                                                <name>getLocationHints</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fXSIErrorReporter</name>.<name>
                                                                        fErrorReporter</name>.
                                                                        <name>reportError</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>XSMessageFormatter</name>.
                                                                                    <name>SCHEMA_DOMAIN</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>"schema_reference.4"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name>locationHints</name>
                                                                                        != <name>null</name> ?
                                                                                        <name>
                                                                                            <name>locationHints</name>
                                                                                            <index>[<expr>0</expr>]
                                                                                            </index>
                                                                                        </name>
                                                                                        :
                                                                                        <name><name>XMLSymbols</name>.
                                                                                            <name>EMPTY_STRING</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>XMLErrorReporter</name>.
                                                                                    <name>SEVERITY_WARNING</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>grammar</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">//findSchemaGrammar</comment>

            <function>
                <type>
                    <name>XSTypeDefinition</name>
                </type>
                <name>getAndCheckXsiType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xsiType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// This method also deals with clause 1.2.1.2 of the constraint</comment>
                    <comment type="line">// Validation Rule: Schema-Validity Assessment (Element)</comment>

                    <comment type="line">// Element Locally Valid (Element)</comment>
                    <comment type="line">// 4 If there is an attribute information item among the element information
                        item's [attributes] whose [namespace name] is identical to
                        http://www.w3.org/2001/XMLSchema-instance and whose [local name] is type, then all of the
                        following must be true:
                    </comment>
                    <comment type="line">// 4.1 The normalized value of that attribute information item must be valid
                        with respect to the built-in QName simple type, as defined by String Valid (3.14.4);
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>typeName</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>typeName</name>
                                    = (<name>QName</name>)
                                    <call>
                                        <name><name>fQNameDV</name>.
                                            <name>validate</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xsiType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fValidationState</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvalidDatatypeValueException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getArgs</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-elt.4.1"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name><name>element</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name><name>SchemaSymbols</name>.
                                                                    <name>URI_XSI</name>
                                                                </name>
                                                                + "," +
                                                                <name><name>SchemaSymbols</name>.
                                                                    <name>XSI_TYPE</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name>xsiType</name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// 4.2 The local name and namespace name (as defined in QName Interpretation
                        (3.15.3)), of the actual value of that attribute information item must resolve to a type
                        definition, as defined in QName resolution (Instance) (3.15.4)
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// if the namespace is schema namespace, first try built-in types</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeName</name>.
                                    <name>uri</name>
                                </name>
                                ==
                                <name><name>SchemaSymbols</name>.
                                    <name>URI_SCHEMAFORSCHEMA</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>type</name>
                                        =
                                        <call>
                                            <name><name>SchemaGrammar</name>.<name>SG_SchemaNS</name>.
                                                <name>getGlobalTypeDecl</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>typeName</name>.
                                                            <name>localpart</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if it's not schema built-in types, then try to get a grammar</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//try to find schema grammar by different means....</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>SchemaGrammar</name>
                                        </type>
                                        <name>grammar</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>findSchemaGrammar</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>XSDDescription</name>.
                                                                    <name>CONTEXT_XSITYPE</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>typeName</name>.
                                                                    <name>uri</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>element</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>typeName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>attributes</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>grammar</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>type</name>
                                                =
                                                <call>
                                                    <name><name>grammar</name>.
                                                        <name>getGlobalTypeDecl</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>typeName</name>.
                                                                    <name>localpart</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// still couldn't find the type, report an error</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-elt.4.2"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name><name>element</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name>xsiType</name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if there is no current type, set this one as current.</comment>
                    <comment type="line">// and we don't need to do extra checking</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentType</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 4.3 The local type definition must be validly derived from the
                                    {type definition} given the union of the {disallowed substitutions} and the {type
                                    definition}'s {prohibited substitutions}, as defined in Type Derivation OK (Complex)
                                    (3.4.6) (if it is a complex type definition), or given {disallowed substitutions} as
                                    defined in Type Derivation OK (Simple) (3.14.6) (if it is a simple type definition).
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>short</name>
                                        </type>
                                        <name>block</name> =
                                        <init>
                                            <expr>
                                                <name><name>fCurrentElemDecl</name>.
                                                    <name>fBlock</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>fCurrentType</name>.
                                                    <name>getTypeCategory</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>XSTypeDefinition</name>.
                                                <name>COMPLEX_TYPE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>block</name>
                                                |= ((<name>XSComplexTypeDecl</name>) <name>fCurrentType</name>).
                                                <name>fBlock</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>XSConstraints</name>.
                                                    <name>checkTypeDerivationOk</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fCurrentType</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>block</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cvc-elt.4.3"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name><name>element</name>.
                                                                            <name>rawname</name>
                                                                        </name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name>xsiType</name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fCurrentType</name>.
                                                                                <name>getName</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>type</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">//getAndCheckXsiType</comment>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>getXsiNil</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xsiNil</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Element Locally Valid (Element)</comment>
                    <comment type="line">// 3 The appropriate case among the following must be true:</comment>
                    <comment type="line">// 3.1 If {nillable} is false, then there must be no attribute information item
                        among the element information item's [attributes] whose [namespace name] is identical to
                        http://www.w3.org/2001/XMLSchema-instance and whose [local name] is nil.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                != <name>null</name> &amp;&amp; !
                                <call>
                                    <name><name>fCurrentElemDecl</name>.
                                        <name>getNillable</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-elt.3.1"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name><name>element</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name><name>SchemaSymbols</name>.
                                                                    <name>URI_XSI</name>
                                                                </name>
                                                                + "," +
                                                                <name><name>SchemaSymbols</name>.
                                                                    <name>XSI_NIL</name>
                                                                </name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <comment type="line">// 3.2 If {nillable} is true and there is such an attribute information
                            item and its actual value is true , then all of the following must be true:
                        </comment>
                        <comment type="line">// 3.2.2 There must be no fixed {value constraint}.</comment>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>value</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>xsiNil</name>.
                                                        <name>trim</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_TRUE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            <call>
                                                <name><name>value</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_TRUE_1</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fCurrentElemDecl</name>
                                                        !=
                                                        <name>null</name>
                                                        &amp;&amp;
                                                        <call>
                                                            <name><name>fCurrentElemDecl</name>.
                                                                <name>getConstraintType</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        ==
                                                        <name><name>XSConstants</name>.
                                                            <name>VC_FIXED</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"cvc-elt.3.2.2"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name><name>element</name>.
                                                                                            <name>rawname</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name><name>SchemaSymbols</name>
                                                                                            .
                                                                                            <name>URI_XSI</name>
                                                                                        </name>
                                                                                        + "," +
                                                                                        <name><name>SchemaSymbols</name>
                                                                                            .
                                                                                            <name>XSI_NIL</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>processAttributes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeGroupDecl</name>
                            </type>
                            <name>attrGrp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"==&gt;processAttributes: " +
                                                        <call>
                                                            <name><name>attributes</name>.
                                                                <name>getLength</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// whether we have seen a Wildcard ID.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wildcardIDName</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// for each present attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getLength</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>AttributePSVImpl</name>
                            </type>
                            <name>attrPSVI</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isSimple</name> =
                            <init>
                                <expr>
                                    <name>fCurrentType</name>
                                    == <name>null</name> ||
                                    <call>
                                        <name><name>fCurrentType</name>.
                                            <name>getTypeCategory</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ==
                                    <name><name>XSTypeDefinition</name>.
                                        <name>SIMPLE_TYPE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSObjectList</name>
                            </type>
                            <name>attrUses</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>useCount</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSWildcardDecl</name>
                            </type>
                            <name>attrWildcard</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>isSimple</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>attrUses</name>
                                        =
                                        <call>
                                            <name><name>attrGrp</name>.
                                                <name>getAttributeUses</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>useCount</name>
                                        =
                                        <call>
                                            <name><name>attrUses</name>.
                                                <name>getLength</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>attrWildcard</name>
                                        =
                                        <name><name>attrGrp</name>.
                                            <name>fAttributeWC</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Element Locally Valid (Complex Type)</comment>
                    <comment type="line">// 3 For each attribute information item in the element information item's
                        [attributes] excepting those whose [namespace name] is identical to
                        http://www.w3.org/2001/XMLSchema-instance and whose [local name] is one of type, nil,
                        schemaLocation or noNamespaceSchemaLocation, the appropriate case among the following must be
                        true:
                    </comment>
                    <comment type="line">// get the corresponding attribute decl</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>attCount</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>index</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fTempQName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>DEBUG</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"==&gt;process attribute: " +
                                                                <name>fTempQName</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fAugPSVI</name>
                                        ||
                                        <name>fIdConstraint</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>augs</name>
                                                =
                                                <call>
                                                    <name><name>attributes</name>.
                                                        <name>getAugmentations</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>attrPSVI</name>
                                                = (<name>AttributePSVImpl</name>)
                                                <call>
                                                    <name><name>augs</name>.
                                                        <name>getItem</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>Constants</name>.
                                                                    <name>ATTRIBUTE_PSVI</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>attrPSVI</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>attrPSVI</name>.
                                                                    <name>reset</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>attrPSVI</name>
                                                            = new
                                                            <call>
                                                                <name>AttributePSVImpl</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>augs</name>.
                                                                    <name>putItem</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>Constants</name>.
                                                                                <name>ATTRIBUTE_PSVI</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attrPSVI</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <comment type="line">// PSVI attribute: validation context</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>attrPSVI</name>.
                                                    <name>fValidationContext</name>
                                                </name>
                                                =
                                                <name>fValidationRoot</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// Element Locally Valid (Type)</comment>
                            <comment type="line">// 3.1.1 The element information item's [attributes] must be empty,
                                excepting those
                            </comment>
                            <comment type="line">// whose [namespace name] is identical to
                                http://www.w3.org/2001/XMLSchema-instance and
                            </comment>
                            <comment type="line">// whose [local name] is one of type, nil, schemaLocation or
                                noNamespaceSchemaLocation.
                            </comment>

                            <comment type="line">// for the 4 xsi attributes, get appropriate decl, and validate
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>fTempQName</name>.
                                            <name>uri</name>
                                        </name>
                                        ==
                                        <name><name>SchemaSymbols</name>.
                                            <name>URI_XSI</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>XSAttributeDecl</name>
                                                </type>
                                                <name>attrDecl</name> =
                                                <init>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>fTempQName</name>.
                                                        <name>localpart</name>
                                                    </name>
                                                    ==
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>XSI_SCHEMALOCATION</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>attrDecl</name>
                                                        =
                                                        <call>
                                                            <name><name>SchemaGrammar</name>.<name>SG_XSI</name>.
                                                                <name>getGlobalAttributeDecl</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>SchemaSymbols</name>.
                                                                            <name>XSI_SCHEMALOCATION</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>fTempQName</name>.
                                                                <name>localpart</name>
                                                            </name>
                                                            ==
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>XSI_NONAMESPACESCHEMALOCATION</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>attrDecl</name>
                                                                =
                                                                <call>
                                                                    <name><name>SchemaGrammar</name>.<name>SG_XSI</name>.
                                                                        <name>getGlobalAttributeDecl</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>SchemaSymbols</name>.
                                                                                    <name>
                                                                                        XSI_NONAMESPACESCHEMALOCATION
                                                                                    </name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name><name>fTempQName</name>.
                                                                        <name>localpart</name>
                                                                    </name>
                                                                    ==
                                                                    <name><name>SchemaSymbols</name>.
                                                                        <name>XSI_NIL</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>attrDecl</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>SchemaGrammar</name>.<name>
                                                                                SG_XSI</name>.
                                                                                <name>getGlobalAttributeDecl</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name><name>SchemaSymbols</name>
                                                                                            .
                                                                                            <name>XSI_NIL</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name><name>fTempQName</name>.
                                                                                <name>localpart</name>
                                                                            </name>
                                                                            ==
                                                                            <name><name>SchemaSymbols</name>.
                                                                                <name>XSI_TYPE</name>
                                                                            </name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>attrDecl</name>
                                                                                =
                                                                                <call>
                                                                                    <name><name>SchemaGrammar</name>
                                                                                        .<name>SG_XSI</name>.
                                                                                        <name>getGlobalAttributeDecl
                                                                                        </name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    SchemaSymbols</name>
                                                                                                    .
                                                                                                    <name>XSI_TYPE
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </then>
                                                                </if>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>attrDecl</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>processOneAttribute</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>element</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attributes</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attrDecl</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attrPSVI</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// for namespace attributes, no_validation/unknow_validity</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>fTempQName</name>.
                                            <name>rawname</name>
                                        </name>
                                        ==
                                        <name><name>XMLSymbols</name>.
                                            <name>PREFIX_XMLNS</name>
                                        </name>
                                        ||
                                        <call>
                                            <name><name>fTempQName</name>.<name>rawname</name>.
                                                <name>startsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xmlns:"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// simple type doesn't allow any other attributes</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>isSimple</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cvc-type.3.1.1"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name><name>element</name>.
                                                                            <name>rawname</name>
                                                                        </name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name><name>fTempQName</name>.
                                                                            <name>rawname</name>
                                                                        </name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// it's not xmlns, and not xsi, then we need to find a decl for it
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XSAttributeUseImpl</name>
                                    </type>
                                    <name>currUse</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                    ,
                                    <name>oneUse</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>useCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>oneUse</name>
                                            = (<name>XSAttributeUseImpl</name>)
                                            <call>
                                                <name><name>attrUses</name>.
                                                    <name>item</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>oneUse</name>.<name>fAttrDecl</name>.
                                                    <name>fName</name>
                                                </name>
                                                ==
                                                <name><name>fTempQName</name>.
                                                    <name>localpart</name>
                                                </name>
                                                &amp;&amp;
                                                <name><name>oneUse</name>.<name>fAttrDecl</name>.
                                                    <name>fTargetNamespace</name>
                                                </name>
                                                ==
                                                <name><name>fTempQName</name>.
                                                    <name>uri</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>currUse</name>
                                                        =
                                                        <name>oneUse</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <comment type="line">// 3.2 otherwise all of the following must be true:</comment>
                            <comment type="line">// 3.2.1 There must be an {attribute wildcard}.</comment>
                            <comment type="line">// 3.2.2 The attribute information item must be valid with respect to
                                it as defined in Item Valid (Wildcard) (3.10.4).
                            </comment>

                            <comment type="line">// if failed, get it from wildcard</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>currUse</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">//if (attrWildcard == null)</comment>
                                        <comment type="line">// reportSchemaError("cvc-complex-type.3.2.1", new
                                            Object[]{element.rawname, fTempQName.rawname});
                                        </comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>attrWildcard</name>
                                                    == <name>null</name> || !
                                                    <call>
                                                        <name><name>attrWildcard</name>.
                                                            <name>allowNamespace</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>fTempQName</name>.
                                                                        <name>uri</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// so this attribute is not allowed</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportSchemaError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"cvc-complex-type.3.2.2"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <name><name>element</name>.
                                                                                        <name>rawname</name>
                                                                                    </name>
                                                                                </expr>
                                                                                ,
                                                                                <expr>
                                                                                    <name><name>fTempQName</name>.
                                                                                        <name>rawname</name>
                                                                                    </name>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XSAttributeDecl</name>
                                    </type>
                                    <name>currDecl</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>currUse</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>currDecl</name>
                                                =
                                                <name><name>currUse</name>.
                                                    <name>fAttrDecl</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// which means it matches a wildcard</comment>
                                        <comment type="line">// skip it if processContents is skip</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>attrWildcard</name>.
                                                        <name>fProcessContents</name>
                                                    </name>
                                                    ==
                                                    <name><name>XSWildcardDecl</name>.
                                                        <name>PC_SKIP</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <continue>continue;</continue>
                                            </then>
                                        </if>

                                        <comment type="line">//try to find grammar by different means...</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>SchemaGrammar</name>
                                                </type>
                                                <name>grammar</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>findSchemaGrammar</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>XSDDescription</name>.
                                                                            <name>CONTEXT_ATTRIBUTE</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>fTempQName</name>.
                                                                            <name>uri</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>element</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fTempQName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>attributes</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>grammar</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>currDecl</name>
                                                            =
                                                            <call>
                                                                <name><name>grammar</name>.
                                                                    <name>getGlobalAttributeDecl</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>fTempQName</name>.
                                                                                <name>localpart</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// if can't find</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>currDecl</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// if strict, report error</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name><name>attrWildcard</name>.
                                                                    <name>fProcessContents</name>
                                                                </name>
                                                                ==
                                                                <name><name>XSWildcardDecl</name>.
                                                                    <name>PC_STRICT</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>reportSchemaError</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"cvc-complex-type.3.2.2"
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>new
                                                                                        <name>
                                                                                            <name>Object</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                        <block>{
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    element</name>.
                                                                                                    <name>rawname</name>
                                                                                                </name>
                                                                                            </expr>
                                                                                            ,
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    fTempQName</name>.
                                                                                                    <name>rawname</name>
                                                                                                </name>
                                                                                            </expr>
                                                                                            }
                                                                                        </block>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>

                                                    <comment type="line">// then continue to the next attribute
                                                    </comment>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// 5 Let [Definition:] the wild IDs be the set
                                                        of all attribute information item to which clause 3.2 applied
                                                        and whose validation resulted in a context-determined
                                                        declaration of mustFind or no context-determined declaration at
                                                        all, and whose [local name] and [namespace name] resolve (as
                                                        defined by QName resolution (Instance) (3.15.4)) to an attribute
                                                        declaration whose {type definition} is or is derived from ID.
                                                        Then all of the following must be true:
                                                    </comment>
                                                    <comment type="line">// 5.1 There must be no more than one item in
                                                        wild IDs.
                                                    </comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>currDecl</name>.<name>fType</name>.
                                                                        <name>getTypeCategory</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                ==
                                                                <name><name>XSTypeDefinition</name>.
                                                                    <name>SIMPLE_TYPE</name>
                                                                </name>
                                                                &amp;&amp; ((<name>XSSimpleType</name>)
                                                                <name><name>currDecl</name>.
                                                                    <name>fType</name>
                                                                </name>
                                                                ).
                                                                <call>
                                                                    <name>isIDType</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>wildcardIDName</name>
                                                                            !=
                                                                            <name>null</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>reportSchemaError</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    "cvc-complex-type.5.1"
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>new
                                                                                                    <name>
                                                                                                        <name>Object
                                                                                                        </name>
                                                                                                        <index>[]
                                                                                                        </index>
                                                                                                    </name>
                                                                                                    <block>{
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                element</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    rawname
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                currDecl</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    fName
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                wildcardIDName
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        }
                                                                                                    </block>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>wildcardIDName</name>
                                                                                =
                                                                                <name><name>currDecl</name>.
                                                                                    <name>fName</name>
                                                                                </name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </else>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>processOneAttribute</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attributes</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>currDecl</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>currUse</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrPSVI</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <comment type="line">// end of for (all attributes)</comment>

                    <comment type="line">// 5.2 If wild IDs is non-empty, there must not be any attribute uses among the
                        {attribute uses} whose {attribute declaration}'s {type definition} is or is derived from ID.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>!<name>isSimple</name> &amp;&amp;
                                <name><name>attrGrp</name>.
                                    <name>fIDAttrName</name>
                                </name>
                                != <name>null</name> &amp;&amp; <name>wildcardIDName</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-complex-type.5.2"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name><name>element</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name>wildcardIDName</name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name><name>attrGrp</name>.
                                                                    <name>fIDAttrName</name>
                                                                </name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">//processAttributes</comment>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>processOneAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeDecl</name>
                            </type>
                            <name>currDecl</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeUseImpl</name>
                            </type>
                            <name>currUse</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AttributePSVImpl</name>
                            </type>
                            <name>attrPSVI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fXSIErrorReporter</name>.
                                    <name>pushContext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Attribute Locally Valid</comment>
                    <comment type="line">// For an attribute information item to be locally valid with respect to an
                        attribute declaration all of the following must be true:
                    </comment>
                    <comment type="line">// 1 The declaration must not be absent (see Missing Sub-components (5.3) for
                        how this can fail to be the case).
                    </comment>
                    <comment type="line">// 2 Its {type definition} must not be absent.</comment>
                    <comment type="line">// 3 The item's normalized value must be locally valid with respect to that
                        {type definition} as per String Valid (3.14.4).
                    </comment>
                    <comment type="line">// get simple type</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSSimpleType</name>
                            </type>
                            <name>attDV</name> =
                            <init>
                                <expr>
                                    <name><name>currDecl</name>.
                                        <name>fType</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>actualValue</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>actualValue</name>
                                    =
                                    <call>
                                        <name><name>attDV</name>.
                                            <name>validate</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attrValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fValidationState</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fValidatedInfo</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// store the normalized value</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fNormalizeData</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>attributes</name>.
                                                    <name>setValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fValidatedInfo</name>.
                                                                <name>normalizedValue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>attributes</name>
                                        <name>instanceof</name>
                                        <name>XMLAttributesImpl</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>XMLAttributesImpl</name>
                                                </type>
                                                <name>attrs</name> =
                                                <init>
                                                    <expr>(<name>XMLAttributesImpl</name>)
                                                        <name>attributes</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>boolean</name>
                                                </type>
                                                <name>schemaId</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>fValidatedInfo</name>.
                                                            <name>memberType</name>
                                                        </name>
                                                        !=
                                                        <name>null</name>
                                                        ?
                                                        <call>
                                                            <name><name>fValidatedInfo</name>.<name>memberType</name>.
                                                                <name>isIDType</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        :
                                                        <call>
                                                            <name><name>attDV</name>.
                                                                <name>isIDType</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>attrs</name>.
                                                        <name>setSchemaId</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>schemaId</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// PSVI: element notation</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>attDV</name>.
                                                <name>getVariety</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSSimpleType</name>.
                                            <name>VARIETY_ATOMIC</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>attDV</name>.
                                                <name>getPrimitiveKind</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>XSSimpleType</name>.
                                            <name>PRIMITIVE_NOTATION</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>QName</name>
                                                </type>
                                                <name>qName</name> =
                                                <init>
                                                    <expr>(<name>QName</name>)
                                                        <name>actualValue</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>SchemaGrammar</name>
                                                </type>
                                                <name>grammar</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fGrammarBucket</name>.
                                                                <name>getGrammar</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>qName</name>.
                                                                            <name>uri</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <comment type="line">//REVISIT: is it possible for the notation to be in
                                            different namespace than the attribute
                                        </comment>
                                        <comment type="line">//with which it is associated, CHECK !! &lt;fof n1:att1 =
                                            "n2:notation1" ..&gt;</comment>
                                        <comment type="line">// should we give chance to the application to be able to
                                            retrieve a grammar - nb
                                        </comment>
                                        <comment type="line">//REVISIT: what would be the triggering component here.. if
                                            it is attribute value that
                                        </comment>
                                        <comment type="line">// triggered the loading of grammar ?? -nb</comment>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>grammar</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fNotation</name>
                                                            =
                                                            <call>
                                                                <name><name>grammar</name>.
                                                                    <name>getGlobalNotationDecl</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>qName</name>.
                                                                                <name>localpart</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvalidDatatypeValueException</name>
                                    </type>
                                    <name>idve</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>idve</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>idve</name>.
                                                                <name>getArgs</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportSchemaError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-attribute.3"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name><name>element</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name><name>fTempQName</name>.
                                                                    <name>rawname</name>
                                                                </name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <name>attrValue</name>
                                                            </expr>
                                                            ,
                                                            <expr>
                                                                <call>
                                                                    <name><name>attDV</name>.
                                                                        <name>getName</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// get the value constraint from use or decl</comment>
                    <comment type="line">// 4 The item's actual value must match the value of the {value constraint}, if
                        it is present and fixed. // now check the value against the simpleType
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>actualValue</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>currDecl</name>.
                                        <name>getConstraintType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSConstants</name>.
                                    <name>VC_FIXED</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isComparable</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fValidatedInfo</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>currDecl</name>.
                                                                <name>fDefault</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            || !
                                            <call>
                                                <name><name>actualValue</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>currDecl</name>.<name>fDefault</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-attribute.4"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <name><name>fTempQName</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <name>attrValue</name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>currDecl</name>.<name>
                                                                                    fDefault</name>.
                                                                                    <name>stringValue</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// 3.1 If there is among the {attribute uses} an attribute use with an
                        {attribute declaration} whose {name} matches the attribute information item's [local name] and
                        whose {target namespace} is identical to the attribute information item's [namespace name]
                        (where an absent {target namespace} is taken to be identical to a [namespace name] with no
                        value), then the attribute information must be valid with respect to that attribute use as per
                        Attribute Locally Valid (Use) (3.5.4). In this case the {attribute declaration} of that
                        attribute use is the context-determined declaration for the attribute information item with
                        respect to Schema-Validity Assessment (Attribute) (3.2.4) and Assessment Outcome (Attribute)
                        (3.2.5).
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>actualValue</name>
                                !=
                                <name>null</name>
                                &amp;&amp; <name>currUse</name> !=
                                <name>null</name>
                                &amp;&amp;
                                <name><name>currUse</name>.
                                    <name>fConstraintType</name>
                                </name>
                                ==
                                <name><name>XSConstants</name>.
                                    <name>VC_FIXED</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isComparable</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fValidatedInfo</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>currUse</name>.
                                                                <name>fDefault</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            || !
                                            <call>
                                                <name><name>actualValue</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>currUse</name>.<name>fDefault</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-complex-type.3.1"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <name><name>fTempQName</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <name>attrValue</name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>currUse</name>.<name>
                                                                                    fDefault</name>.
                                                                                    <name>stringValue</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIdConstraint</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fActualValue</name>
                                        </name>
                                        =
                                        <name>actualValue</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fAugPSVI</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// PSVI: attribute declaration</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fDeclaration</name>
                                        </name>
                                        =
                                        <name>currDecl</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: attribute type</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fTypeDecl</name>
                                        </name>
                                        =
                                        <name>attDV</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// PSVI: attribute memberType</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fMemberType</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>memberType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: attribute normalized value</comment>
                                <comment type="line">// NOTE: we always store the normalized value, even if it's
                                    invlid,
                                </comment>
                                <comment type="line">// because it might still be useful to the user. But when the
                                    it's
                                </comment>
                                <comment type="line">// not valid, the normalized value is not trustable.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fNormalizedValue</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>normalizedValue</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fActualValue</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>actualValue</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fActualValueType</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>actualValueType</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fItemValueTypes</name>
                                        </name>
                                        =
                                        <name><name>fValidatedInfo</name>.
                                            <name>itemValueTypes</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>


                                <comment type="line">// PSVI: validation attempted:</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fValidationAttempted</name>
                                        </name>
                                        =
                                        <name><name>AttributePSVI</name>.
                                            <name>VALIDATION_FULL</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                            <index>[]</index>
                                        </type>
                                        <name>errors</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fXSIErrorReporter</name>.
                                                        <name>mergeContext</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// PSVI: error codes</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fErrorCodes</name>
                                        </name>
                                        =
                                        <name>errors</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// PSVI: validity</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>attrPSVI</name>.
                                            <name>fValidity</name>
                                        </name>
                                        =
                                        (<name>errors</name> == <name>null</name>) ?
                                        <name><name>AttributePSVI</name>.
                                            <name>VALIDITY_VALID</name>
                                        </name>
                                        :
                                        <name><name>AttributePSVI</name>.
                                            <name>VALIDITY_INVALID</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>addDefaultAttributes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeGroupDecl</name>
                            </type>
                            <name>attrGrp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Check after all specified attrs are scanned</comment>
                    <comment type="line">// (1) report error for REQUIRED attrs that are missing (V_TAGc)</comment>
                    <comment type="line">// REVISIT: should we check prohibited attributes?</comment>
                    <comment type="line">// (2) report error for PROHIBITED attrs that are present (V_TAGc)</comment>
                    <comment type="line">// (3) add default attrs (FIXED and NOT_FIXED)</comment>
                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"==&gt;addDefaultAttributes: " +
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSObjectList</name>
                            </type>
                            <name>attrUses</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attrGrp</name>.
                                            <name>getAttributeUses</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>useCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>attrUses</name>.
                                            <name>getLength</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSAttributeUseImpl</name>
                            </type>
                            <name>currUse</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSAttributeDecl</name>
                            </type>
                            <name>currDecl</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>constType</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isSpecified</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>attName</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// for each attribute use</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>useCount</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <expr_stmt>
                                <expr>
                                    <name>currUse</name>
                                    = (<name>XSAttributeUseImpl</name>)
                                    <call>
                                        <name><name>attrUses</name>.
                                            <name>item</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>currDecl</name>
                                    =
                                    <name><name>currUse</name>.
                                        <name>fAttrDecl</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// get value constraint</comment>
                            <expr_stmt>
                                <expr>
                                    <name>constType</name>
                                    =
                                    <name><name>currUse</name>.
                                        <name>fConstraintType</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>defaultValue</name>
                                    =
                                    <name><name>currUse</name>.
                                        <name>fDefault</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>constType</name>
                                        ==
                                        <name><name>XSConstants</name>.
                                            <name>VC_NONE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>constType</name>
                                                =
                                                <call>
                                                    <name><name>currDecl</name>.
                                                        <name>getConstraintType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>defaultValue</name>
                                                =
                                                <name><name>currDecl</name>.
                                                    <name>fDefault</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// whether this attribute is specified</comment>
                            <expr_stmt>
                                <expr>
                                    <name>isSpecified</name>
                                    =
                                    <call>
                                        <name><name>attributes</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>currDecl</name>.
                                                        <name>fTargetNamespace</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>currDecl</name>.
                                                        <name>fName</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    !=
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Element Locally Valid (Complex Type)</comment>
                            <comment type="line">// 4 The {attribute declaration} of each attribute use in the
                                {attribute uses} whose
                            </comment>
                            <comment type="line">// {required} is true matches one of the attribute information items in
                                the element
                            </comment>
                            <comment type="line">// information item's [attributes] as per clause 3.1 above.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>currUse</name>.
                                            <name>fUse</name>
                                        </name>
                                        ==
                                        <name><name>SchemaSymbols</name>.
                                            <name>USE_REQUIRED</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>isSpecified</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>reportSchemaError</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"cvc-complex-type.4"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>new
                                                                        <name>
                                                                            <name>Object</name>
                                                                            <index>[]</index>
                                                                        </name>
                                                                        <block>{
                                                                            <expr>
                                                                                <name><name>element</name>.
                                                                                    <name>rawname</name>
                                                                                </name>
                                                                            </expr>
                                                                            ,
                                                                            <expr>
                                                                                <name><name>currDecl</name>.
                                                                                    <name>fName</name>
                                                                                </name>
                                                                            </expr>
                                                                            }
                                                                        </block>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// if the attribute is not specified, then apply the value constraint
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>!<name>isSpecified</name> &amp;&amp; <name>constType</name> !=
                                        <name><name>XSConstants</name>.
                                            <name>VC_NONE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>attName</name>
                                                =
                                                new
                                                <call>
                                                    <name>QName</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>currDecl</name>.
                                                                    <name>fName</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>currDecl</name>.
                                                                    <name>fName</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>currDecl</name>.
                                                                    <name>fTargetNamespace</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>normalized</name> =
                                                <init>
                                                    <expr>(<name>defaultValue</name> != <name>null</name>) ?
                                                        <call>
                                                            <name><name>defaultValue</name>.
                                                                <name>stringValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        : ""
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>attrIndex</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>attributes</name>.
                                                                <name>addAttribute</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>attName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"CDATA"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>normalized</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>attributes</name>
                                                    <name>instanceof</name>
                                                    <name>XMLAttributesImpl</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>XMLAttributesImpl</name>
                                                            </type>
                                                            <name>attrs</name> =
                                                            <init>
                                                                <expr>(<name>XMLAttributesImpl</name>)
                                                                    <name>attributes</name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>boolean</name>
                                                            </type>
                                                            <name>schemaId</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>defaultValue</name>
                                                                    !=
                                                                    <name>null</name>
                                                                    &amp;&amp;
                                                                    <name><name>defaultValue</name>.
                                                                        <name>memberType</name>
                                                                    </name>
                                                                    !=
                                                                    <name>null</name>
                                                                    ?
                                                                    <call>
                                                                        <name><name>defaultValue</name>.<name>
                                                                            memberType</name>.
                                                                            <name>isIDType</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    :
                                                                    <call>
                                                                        <name><name>currDecl</name>.<name>fType</name>.
                                                                            <name>isIDType</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>attrs</name>.
                                                                    <name>setSchemaId</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attrIndex</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>schemaId</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fAugPSVI</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{

                                                    <comment type="line">// PSVI: attribute is "schema" specified
                                                    </comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Augmentations</name>
                                                            </type>
                                                            <name>augs</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>attributes</name>.
                                                                            <name>getAugmentations</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>attrIndex</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>AttributePSVImpl</name>
                                                            </type>
                                                            <name>attrPSVI</name> =
                                                            <init>
                                                                <expr>new
                                                                    <call>
                                                                        <name>AttributePSVImpl</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>augs</name>.
                                                                    <name>putItem</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>Constants</name>.
                                                                                <name>ATTRIBUTE_PSVI</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>attrPSVI</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fDeclaration</name>
                                                            </name>
                                                            =
                                                            <name>currDecl</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fTypeDecl</name>
                                                            </name>
                                                            =
                                                            <name><name>currDecl</name>.
                                                                <name>fType</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fMemberType</name>
                                                            </name>
                                                            =
                                                            <name><name>defaultValue</name>.
                                                                <name>memberType</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fNormalizedValue</name>
                                                            </name>
                                                            =
                                                            <name>normalized</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fActualValue</name>
                                                            </name>
                                                            =
                                                            <name><name>defaultValue</name>.
                                                                <name>actualValue</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fActualValueType</name>
                                                            </name>
                                                            =
                                                            <name><name>defaultValue</name>.
                                                                <name>actualValueType</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fItemValueTypes</name>
                                                            </name>
                                                            =
                                                            <name><name>defaultValue</name>.
                                                                <name>itemValueTypes</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fValidationContext</name>
                                                            </name>
                                                            =
                                                            <name>fValidationRoot</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fValidity</name>
                                                            </name>
                                                            =
                                                            <name><name>AttributePSVI</name>.
                                                                <name>VALIDITY_VALID</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fValidationAttempted</name>
                                                            </name>
                                                            =
                                                            <name><name>AttributePSVI</name>.
                                                                <name>VALIDATION_FULL</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>attrPSVI</name>.
                                                                <name>fSpecified</name>
                                                            </name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>

                            }
                        </block>
                    </for>
                    <comment type="line">// for</comment>
                    }
                </block>
            </function>
            <comment type="line">// addDefaultAttributes</comment>

            <comment type="javadoc">/**
                * If there is not text content, and there is a
                * {value constraint} on the corresponding element decl, then return
                * an XMLString representing the default value.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>processElementContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// 1 If the item is ?valid? with respect to an element declaration as per
                        Element Locally Valid (Element) (?3.3.4) and the {value constraint} is present, but clause 3.2
                        of Element Locally Valid (Element) (?3.3.4) above is not satisfied and the item has no element
                        or character information item [children], then schema. Furthermore, the post-schema-validation
                        infoset has the canonical lexical representation of the {value constraint} value as the item's
                        [schema normalized value] property.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <name><name>fCurrentElemDecl</name>.
                                    <name>fDefault</name>
                                </name>
                                !=
                                <name>null</name>
                                &amp;&amp; !
                                <name>fSawText</name>
                                &amp;&amp; !
                                <name>fSubElement</name>
                                &amp;&amp; !
                                <name>fNil</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>strv</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fCurrentElemDecl</name>.<name>fDefault</name>.
                                                        <name>stringValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>bufLen</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>strv</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNormalizedStr</name>.
                                                <name>ch</name>
                                            </name>
                                            == <name>null</name> ||
                                            <name><name>fNormalizedStr</name>.<name>ch</name>.
                                                <name>length</name>
                                            </name>
                                            &lt;
                                            <name>bufLen</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fNormalizedStr</name>.
                                                        <name>ch</name>
                                                    </name>
                                                    = new
                                                    <name>
                                                        <name>char</name>
                                                        <index>[
                                                            <expr>
                                                                <name>bufLen</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>strv</name>.
                                                <name>getChars</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>bufLen</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fNormalizedStr</name>.
                                                            <name>ch</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>offset</name>
                                        </name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>length</name>
                                        </name>
                                        =
                                        <name>bufLen</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fDefaultValue</name>
                                        =
                                        <name>fNormalizedStr</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// fixed values are handled later, after xsi:type determined.</comment>

                    <expr_stmt>
                        <expr>
                            <name><name>fValidatedInfo</name>.
                                <name>normalizedValue</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Element Locally Valid (Element)</comment>
                    <comment type="line">// 3.2.1 The element information item must have no character or element
                        information item [children].
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNil</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fSubElement</name>
                                            ||
                                            <name>fSawText</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-elt.3.2.1"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        ,
                                                                        <expr>
                                                                            <name><name>SchemaSymbols</name>.
                                                                                <name>URI_XSI</name>
                                                                            </name>
                                                                            + "," +
                                                                            <name><name>SchemaSymbols</name>.
                                                                                <name>XSI_NIL</name>
                                                                            </name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.<name>fValidatedInfo</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// 5 The appropriate case among the following must be true:</comment>
                    <comment type="line">// 5.1 If the declaration has a {value constraint}, the item has neither
                        element nor character [children] and clause 3.2 has not applied, then all of the following must
                        be true:
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentElemDecl</name>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fCurrentElemDecl</name>.
                                        <name>getConstraintType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>XSConstants</name>.
                                    <name>VC_NONE</name>
                                </name>
                                &amp;&amp; !
                                <name>fSubElement</name>
                                &amp;&amp; !
                                <name>fSawText</name>
                                &amp;&amp; !
                                <name>fNil</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 5.1.1 If the actual type definition is a local type definition
                                    then the canonical lexical representation of the {value constraint} value must be a
                                    valid default for the actual type definition as defined in Element Default Valid
                                    (Immediate) (3.3.6).
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fCurrentType</name>
                                            !=
                                            <name><name>fCurrentElemDecl</name>.
                                                <name>fType</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//REVISIT:we should pass ValidatedInfo here.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name>
                                                                <name>XSConstraints</name>
                                                                .
                                                                <name>ElementDefaultValidImmediate</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fCurrentType</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fCurrentElemDecl</name>.<name>
                                                                                fDefault</name>.
                                                                                <name>stringValue</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fState4XsiType</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportSchemaError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"cvc-elt.5.1.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <name><name>element</name>.
                                                                                        <name>rawname</name>
                                                                                    </name>
                                                                                </expr>
                                                                                ,
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>fCurrentType</name>.
                                                                                            <name>getName</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ,
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>
                                                                                            fCurrentElemDecl</name>
                                                                                            .<name>fDefault</name>.
                                                                                            <name>stringValue</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// 5.1.2 The element information item with the canonical lexical
                                    representation of the {value constraint} value used as its normalized value must be
                                    valid with respect to the actual type definition as defined by Element Locally Valid
                                    (Type) (3.3.4).
                                </comment>
                                <comment type="line">// REVISIT: don't use toString, but validateActualValue instead
                                </comment>
                                <comment type="line">// use the fState4ApplyDefault</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>elementLocallyValidType</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>fCurrentElemDecl</name>.<name>fDefault</name>.
                                                                <name>stringValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// The following method call also deal with clause 1.2.2 of the
                                    constraint
                                </comment>
                                <comment type="line">// Validation Rule: Schema-Validity Assessment (Element)</comment>

                                <comment type="line">// 5.2 If the declaration has no {value constraint} or the item has
                                    either element or character [children] or clause 3.2 has applied, then all of the
                                    following must be true:
                                </comment>
                                <comment type="line">// 5.2.1 The element information item must be valid with respect to
                                    the actual type definition as defined by Element Locally Valid (Type) (3.3.4).
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>actualValue</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>elementLocallyValidType</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>element</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fBuffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// 5.2.2 If there is a fixed {value constraint} and clause 3.2 has
                                    not applied, all of the following must be true:
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fCurrentElemDecl</name>
                                            !=
                                            <name>null</name>
                                            &amp;&amp;
                                            <call>
                                                <name><name>fCurrentElemDecl</name>.
                                                    <name>getConstraintType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>XSConstants</name>.
                                                <name>VC_FIXED</name>
                                            </name>
                                            &amp;&amp; !
                                            <name>fNil</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>content</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>fBuffer</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">// 5.2.2.1 The element information item must have no
                                                element information item [children].
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fSubElement</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportSchemaError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"cvc-elt.5.2.2.1"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <name><name>element</name>.
                                                                                        <name>rawname</name>
                                                                                    </name>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            <comment type="line">// 5.2.2.2 The appropriate case among the following
                                                must be true:
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>fCurrentType</name>.
                                                                <name>getTypeCategory</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        ==
                                                        <name><name>XSTypeDefinition</name>.
                                                            <name>COMPLEX_TYPE</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>XSComplexTypeDecl</name>
                                                                </type>
                                                                <name>ctype</name> =
                                                                <init>
                                                                    <expr>(<name>XSComplexTypeDecl</name>)
                                                                        <name>fCurrentType</name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <comment type="line">// 5.2.2.2.1 If the {content type} of the
                                                            actual type definition is mixed, then the initial value of
                                                            the item must match the canonical lexical representation of
                                                            the {value constraint} value.
                                                        </comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name><name>ctype</name>.
                                                                        <name>fContentType</name>
                                                                    </name>
                                                                    ==
                                                                    <name><name>XSComplexTypeDecl</name>.
                                                                        <name>CONTENTTYPE_MIXED</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// REVISIT: how to get the
                                                                        initial value, does whiteSpace count?
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name><name>fCurrentElemDecl</name>.<name>
                                                                                        fDefault</name>.<name>
                                                                                        normalizedValue</name>.
                                                                                        <name>equals</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>content</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>reportSchemaError</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    "cvc-elt.5.2.2.2.1"
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>new
                                                                                                    <name>
                                                                                                        <name>Object
                                                                                                        </name>
                                                                                                        <index>[]
                                                                                                        </index>
                                                                                                    </name>
                                                                                                    <block>{
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                element</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    rawname
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                content
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                fCurrentElemDecl</name>
                                                                                                                .<name>
                                                                                                                    fDefault</name>.
                                                                                                                <name>
                                                                                                                    normalizedValue
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        }
                                                                                                    </block>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <comment type="line">// 5.2.2.2.2 If the {content type} of
                                                                the actual type definition is a simple type definition,
                                                                then the actual value of the item must match the
                                                                canonical lexical representation of the {value
                                                                constraint} value.
                                                            </comment>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name><name>ctype</name>.
                                                                                <name>fContentType</name>
                                                                            </name>
                                                                            ==
                                                                            <name><name>XSComplexTypeDecl</name>.
                                                                                <name>CONTENTTYPE_SIMPLE</name>
                                                                            </name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>actualValue</name>
                                                                                        != <name>null</name> &amp;&amp;
                                                                                        (!
                                                                                        <call>
                                                                                            <name>isComparable</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            fValidatedInfo
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            fCurrentElemDecl</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                fDefault
                                                                                                            </name>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        || !
                                                                                        <call>
                                                                                            <name><name>
                                                                                                actualValue</name>.
                                                                                                <name>equals</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            fCurrentElemDecl</name>
                                                                                                            .<name>
                                                                                                                fDefault</name>.
                                                                                                            <name>
                                                                                                                actualValue
                                                                                                            </name>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        )
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>
                                                                                                        reportSchemaError
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                "cvc-elt.5.2.2.2.2"
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        ,
                                                                                                        <argument>
                                                                                                            <expr>new
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        Object
                                                                                                                    </name>
                                                                                                                    <index>
                                                                                                                        []
                                                                                                                    </index>
                                                                                                                </name>
                                                                                                                <block>{
                                                                                                                    <expr>
                                                                                                                        <name>
                                                                                                                            <name>
                                                                                                                                element</name>
                                                                                                                            .
                                                                                                                            <name>
                                                                                                                                rawname
                                                                                                                            </name>
                                                                                                                        </name>
                                                                                                                    </expr>
                                                                                                                    ,
                                                                                                                    <expr>
                                                                                                                        <name>
                                                                                                                            content
                                                                                                                        </name>
                                                                                                                    </expr>
                                                                                                                    ,
                                                                                                                    <expr>
                                                                                                                        <call>
                                                                                                                            <name>
                                                                                                                                <name>
                                                                                                                                    fCurrentElemDecl</name>
                                                                                                                                .<name>
                                                                                                                                fDefault</name>.
                                                                                                                                <name>
                                                                                                                                    stringValue
                                                                                                                                </name>
                                                                                                                            </name>
                                                                                                                            <argument_list>
                                                                                                                                ()
                                                                                                                            </argument_list>
                                                                                                                        </call>
                                                                                                                    </expr>
                                                                                                                    }
                                                                                                                </block>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>fCurrentType</name>.
                                                                        <name>getTypeCategory</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                ==
                                                                <name><name>XSTypeDefinition</name>.
                                                                    <name>SIMPLE_TYPE</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>actualValue</name>
                                                                            != <name>null</name> &amp;&amp; (!
                                                                            <call>
                                                                                <name>isComparable</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>fValidatedInfo</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                fCurrentElemDecl</name>.
                                                                                                <name>fDefault</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            || !
                                                                            <call>
                                                                                <name><name>actualValue</name>.
                                                                                    <name>equals</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                fCurrentElemDecl</name>.<name>
                                                                                                fDefault</name>.
                                                                                                <name>actualValue</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            )
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <comment type="line">// REVISIT: the spec
                                                                                didn't mention this case: fixed
                                                                            </comment>
                                                                            <comment type="line">// value with simple
                                                                                type
                                                                            </comment>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>reportSchemaError</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    "cvc-elt.5.2.2.2.2"
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>new
                                                                                                    <name>
                                                                                                        <name>Object
                                                                                                        </name>
                                                                                                        <index>[]
                                                                                                        </index>
                                                                                                    </name>
                                                                                                    <block>{
                                                                                                        <expr>
                                                                                                            <name><name>
                                                                                                                element</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    rawname
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                content
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ,
                                                                                                        <expr>
                                                                                                            <call>
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        fCurrentElemDecl</name>
                                                                                                                    .<name>
                                                                                                                    fDefault</name>.
                                                                                                                    <name>
                                                                                                                        stringValue
                                                                                                                    </name>
                                                                                                                </name>
                                                                                                                <argument_list>
                                                                                                                    ()
                                                                                                                </argument_list>
                                                                                                            </call>
                                                                                                        </expr>
                                                                                                        }
                                                                                                    </block>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDefaultValue</name>
                                == <name>null</name> &amp;&amp; <name>fNormalizeData</name> &amp;&amp; <name>
                                fDocumentHandler
                            </name> != <name>null</name> &amp;&amp;
                                <name>fUnionType</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// for union types we need to send data because we delayed
                                    sending
                                </comment>
                                <comment type="line">// this data when we received it in the characters() call.
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>content</name> =
                                        <init>
                                            <expr>
                                                <name><name>fValidatedInfo</name>.
                                                    <name>normalizedValue</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>content</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>content</name>
                                                =
                                                <call>
                                                    <name><name>fBuffer</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>bufLen</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>content</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNormalizedStr</name>.
                                                <name>ch</name>
                                            </name>
                                            == <name>null</name> ||
                                            <name><name>fNormalizedStr</name>.<name>ch</name>.
                                                <name>length</name>
                                            </name>
                                            &lt;
                                            <name>bufLen</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fNormalizedStr</name>.
                                                        <name>ch</name>
                                                    </name>
                                                    = new
                                                    <name>
                                                        <name>char</name>
                                                        <index>[
                                                            <expr>
                                                                <name>bufLen</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>content</name>.
                                                <name>getChars</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>bufLen</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fNormalizedStr</name>.
                                                            <name>ch</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>offset</name>
                                        </name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNormalizedStr</name>.
                                            <name>length</name>
                                        </name>
                                        =
                                        <name>bufLen</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fDocumentHandler</name>.
                                                <name>characters</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNormalizedStr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// processElementContent</comment>

            <function>
                <type>
                    <name>Object</name>
                </type>
                <name>elementLocallyValidType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>textContent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentType</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>retValue</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Element Locally Valid (Type)</comment>
                    <comment type="line">// 3 The appropriate case among the following must be true:</comment>
                    <comment type="line">// 3.1 If the type definition is a simple type definition, then all of the
                        following must be true:
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fCurrentType</name>.
                                        <name>getTypeCategory</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XSTypeDefinition</name>.
                                    <name>SIMPLE_TYPE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 3.1.2 The element information item must have no element
                                    information item [children].
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fSubElement</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cvc-type.3.1.2"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name><name>element</name>.
                                                                            <name>rawname</name>
                                                                        </name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <comment type="line">// 3.1.3 If clause 3.2 of Element Locally Valid (Element) (3.3.4)
                                    did not apply, then the normalized value must be valid with respect to the type
                                    definition as defined by String Valid (3.14.4).
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>fNil</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>XSSimpleType</name>
                                                    </type>
                                                    <name>dv</name> =
                                                    <init>
                                                        <expr>(<name>XSSimpleType</name>)
                                                            <name>fCurrentType</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <try>try
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>!<name>fNormalizeData</name> ||
                                                                <name>fUnionType</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fValidationState</name>.
                                                                                <name>setNormalizationRequired</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>true</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>retValue</name>
                                                            =
                                                            <call>
                                                                <name><name>dv</name>.
                                                                    <name>validate</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>textContent</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fValidationState</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fValidatedInfo</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>InvalidDatatypeValueException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>e</name>.
                                                                                        <name>getKey</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>e</name>.
                                                                                        <name>getArgs</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"cvc-type.3.1.3"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name><name>element</name>.
                                                                                            <name>rawname</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name>textContent</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// 3.2 If the type definition is a complex type definition, then
                                    the element information item must be valid with respect to the type definition as
                                    per Element Locally Valid (Complex Type) (3.4.4);
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>retValue</name>
                                        =
                                        <call>
                                            <name>elementLocallyValidComplexType</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>textContent</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>retValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// elementLocallyValidType</comment>

            <function>
                <type>
                    <name>Object</name>
                </type>
                <name>elementLocallyValidComplexType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>textContent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>actualValue</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSComplexTypeDecl</name>
                            </type>
                            <name>ctype</name> =
                            <init>
                                <expr>(<name>XSComplexTypeDecl</name>)
                                    <name>fCurrentType</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Element Locally Valid (Complex Type)</comment>
                    <comment type="line">// For an element information item to be locally valid with respect to a
                        complex type definition all of the following must be true:
                    </comment>
                    <comment type="line">// 1 {abstract} is false.</comment>
                    <comment type="line">// 2 If clause 3.2 of Element Locally Valid (Element) (3.3.4) did not apply,
                        then the appropriate case among the following must be true:
                    </comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>fNil</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 2.1 If the {content type} is empty, then the element information
                                    item has no character or element information item [children].
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>ctype</name>.
                                                <name>fContentType</name>
                                            </name>
                                            ==
                                            <name><name>XSComplexTypeDecl</name>.
                                                <name>CONTENTTYPE_EMPTY</name>
                                            </name>
                                            &amp;&amp; (<name>fSubElement</name> || <name>fSawText</name> || <name>
                                            fSawChildren</name>)
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>reportSchemaError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"cvc-complex-type.2.1"</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>Object</name>
                                                                        <index>[]</index>
                                                                    </name>
                                                                    <block>{
                                                                        <expr>
                                                                            <name><name>element</name>.
                                                                                <name>rawname</name>
                                                                            </name>
                                                                        </expr>
                                                                        }
                                                                    </block>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <comment type="line">// 2.2 If the {content type} is a simple type definition, then
                                        the element information item has no element information item [children], and the
                                        normalized value of the element information item is valid with respect to that
                                        simple type definition as defined by String Valid (3.14.4).
                                    </comment>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>ctype</name>.
                                                        <name>fContentType</name>
                                                    </name>
                                                    ==
                                                    <name><name>XSComplexTypeDecl</name>.
                                                        <name>CONTENTTYPE_SIMPLE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>fSubElement</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>reportSchemaError</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"cvc-complex-type.2.2"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>new
                                                                                    <name>
                                                                                        <name>Object</name>
                                                                                        <index>[]</index>
                                                                                    </name>
                                                                                    <block>{
                                                                                        <expr>
                                                                                            <name><name>element</name>.
                                                                                                <name>rawname</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                        }
                                                                                    </block>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>XSSimpleType</name>
                                                            </type>
                                                            <name>dv</name> =
                                                            <init>
                                                                <expr>
                                                                    <name><name>ctype</name>.
                                                                        <name>fXSSimpleType</name>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <try>try
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>!<name>fNormalizeData</name> ||
                                                                        <name>fUnionType</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>fValidationState</name>.
                                                                                        <name>setNormalizationRequired
                                                                                        </name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>true</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>actualValue</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>dv</name>.
                                                                            <name>validate</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>textContent</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fValidationState</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fValidatedInfo</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                        <catch>catch (
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>InvalidDatatypeValueException</name>
                                                                    </type>
                                                                    <name>e</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>reportSchemaError</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>e</name>.
                                                                                                <name>getKey</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>e</name>.
                                                                                                <name>getArgs</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>reportSchemaError</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>"cvc-complex-type.2.2"</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>new
                                                                                        <name>
                                                                                            <name>Object</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                        <block>{
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    element</name>.
                                                                                                    <name>rawname</name>
                                                                                                </name>
                                                                                            </expr>
                                                                                            }
                                                                                        </block>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </catch>
                                                    </try>
                                                    <comment type="line">// REVISIT: eventually, this method should
                                                        return the same actualValue as elementLocallyValidType...
                                                    </comment>
                                                    <comment type="line">// obviously it'll return null when the content
                                                        is complex.
                                                    </comment>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// 2.3 If the {content type} is element-only, then the
                                                element information item has no character information item [children]
                                                other than those whose [character code] is defined as a white space in
                                                [XML 1.0 (Second Edition)].
                                            </comment>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>ctype</name>.
                                                                <name>fContentType</name>
                                                            </name>
                                                            ==
                                                            <name><name>XSComplexTypeDecl</name>.
                                                                <name>CONTENTTYPE_ELEMENT</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>fSawCharacters</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>reportSchemaError</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                "cvc-complex-type.2.3"
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>new
                                                                                                <name>
                                                                                                    <name>Object</name>
                                                                                                    <index>[]</index>
                                                                                                </name>
                                                                                                <block>{
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            element</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                rawname
                                                                                                            </name>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    }
                                                                                                </block>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                <comment type="line">// 2.4 If the {content type} is element-only or mixed, then the
                                    sequence of the element information item's element information item [children], if
                                    any, taken in order, is valid with respect to the {content type}'s particle, as
                                    defined in Element Sequence Locally Valid (Particle) (3.9.4).
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>ctype</name>.
                                                <name>fContentType</name>
                                            </name>
                                            ==
                                            <name><name>XSComplexTypeDecl</name>.
                                                <name>CONTENTTYPE_ELEMENT</name>
                                            </name>
                                            ||
                                            <name><name>ctype</name>.
                                                <name>fContentType</name>
                                            </name>
                                            ==
                                            <name><name>XSComplexTypeDecl</name>.
                                                <name>CONTENTTYPE_MIXED</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// if the current state is a valid state, check
                                                whether
                                            </comment>
                                            <comment type="line">// it's one of the final states.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>DEBUG</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>println</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fCurrCMState</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>fCurrCMState</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                        &gt;= 0 &amp;&amp; !
                                                        <call>
                                                            <name><name>fCurrentCM</name>.
                                                                <name>endContentModel</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fCurrCMState</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>expected</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name>expectedStr</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>
                                                                                                fCurrentCM</name>.
                                                                                                <name>whatCanGoHere
                                                                                                </name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            fCurrCMState
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"cvc-complex-type.2.4.b"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name><name>element</name>.
                                                                                            <name>rawname</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name>expected</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>actualValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// elementLocallyValidComplexType</comment>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>reportSchemaError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDoValidation</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fXSIErrorReporter</name>.
                                            <name>reportError</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>XSMessageFormatter</name>.
                                                        <name>SCHEMA_DOMAIN</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>arguments</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>XMLErrorReporter</name>.
                                                        <name>SEVERITY_ERROR</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns true if the two ValidatedInfo objects can be compared in the same value
                space. **/
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isComparable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>info1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>info2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>short</name>
                            </type>
                            <name>primitiveType1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>convertToPrimitiveKind</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>info1</name>.
                                                        <name>actualValueType</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>short</name>
                            </type>
                            <name>primitiveType2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>convertToPrimitiveKind</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>info2</name>.
                                                        <name>actualValueType</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>primitiveType1</name>
                                !=
                                <name>primitiveType2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>primitiveType1</name> ==
                                        <name><name>XSConstants</name>.
                                            <name>ANYSIMPLETYPE_DT</name>
                                        </name>
                                        &amp;&amp; <name>primitiveType2</name> ==
                                        <name><name>XSConstants</name>.
                                            <name>STRING_DT</name>
                                        </name>
                                        ||
                                        <name>primitiveType1</name>
                                        ==
                                        <name><name>XSConstants</name>.
                                            <name>STRING_DT</name>
                                        </name>
                                        &amp;&amp; <name>primitiveType2</name> ==
                                        <name><name>XSConstants</name>.
                                            <name>ANYSIMPLETYPE_DT</name>
                                        </name>
                                        )
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>primitiveType1</name>
                                        ==
                                        <name><name>XSConstants</name>.
                                            <name>LIST_DT</name>
                                        </name>
                                        || <name>primitiveType1</name> ==
                                        <name><name>XSConstants</name>.
                                            <name>LISTOFUNION_DT</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <specifier>final</specifier>
                                                    <name>ShortList</name>
                                                </type>
                                                <name>typeList1</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>info1</name>.
                                                            <name>itemValueTypes</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <specifier>final</specifier>
                                                    <name>ShortList</name>
                                                </type>
                                                <name>typeList2</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>info2</name>.
                                                            <name>itemValueTypes</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <specifier>final</specifier>
                                                    <name>int</name>
                                                </type>
                                                <name>typeList1Length</name> =
                                                <init>
                                                    <expr>
                                                        <name>typeList1</name>
                                                        != <name>null</name> ?
                                                        <call>
                                                            <name><name>typeList1</name>.
                                                                <name>getLength</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        : 0
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <specifier>final</specifier>
                                                    <name>int</name>
                                                </type>
                                                <name>typeList2Length</name> =
                                                <init>
                                                    <expr>
                                                        <name>typeList2</name>
                                                        != <name>null</name> ?
                                                        <call>
                                                            <name><name>typeList2</name>.
                                                                <name>getLength</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        : 0
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>typeList1Length</name>
                                                    !=
                                                    <name>typeList2Length</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>typeList1Length</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>++
                                                    <name>i</name>
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <specifier>final</specifier>
                                                            <name>short</name>
                                                        </type>
                                                        <name>primitiveItem1</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>convertToPrimitiveKind</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>typeList1</name>.
                                                                                        <name>item</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <specifier>final</specifier>
                                                            <name>short</name>
                                                        </type>
                                                        <name>primitiveItem2</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>convertToPrimitiveKind</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>typeList2</name>.
                                                                                        <name>item</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>primitiveItem1</name>
                                                            !=
                                                            <name>primitiveItem2</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>primitiveItem1</name>
                                                                        ==
                                                                        <name><name>XSConstants</name>.
                                                                            <name>ANYSIMPLETYPE_DT</name>
                                                                        </name>
                                                                        &amp;&amp; <name>primitiveItem2</name> ==
                                                                        <name><name>XSConstants</name>.
                                                                            <name>STRING_DT</name>
                                                                        </name>
                                                                        ||
                                                                        <name>primitiveItem1</name>
                                                                        ==
                                                                        <name><name>XSConstants</name>.
                                                                            <name>STRING_DT</name>
                                                                        </name>
                                                                        &amp;&amp; <name>primitiveItem2</name> ==
                                                                        <name><name>XSConstants</name>.
                                                                            <name>ANYSIMPLETYPE_DT</name>
                                                                        </name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <continue>continue;</continue>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>short</name>
                </type>
                <name>convertToPrimitiveKind</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="javadoc">/** Primitive datatypes. */</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>valueType</name>
                                &lt;=
                                <name><name>XSConstants</name>.
                                    <name>NOTATION_DT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueType</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="javadoc">/** Types derived from string. */</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>valueType</name>
                                &lt;=
                                <name><name>XSConstants</name>.
                                    <name>ENTITY_DT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>XSConstants</name>.
                                            <name>STRING_DT</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="javadoc">/** Types derived from decimal. */</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>valueType</name>
                                &lt;=
                                <name><name>XSConstants</name>.
                                    <name>POSITIVEINTEGER_DT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>XSConstants</name>.
                                            <name>DECIMAL_DT</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="javadoc">/** Other types. */</comment>
                    <return>return
                        <expr>
                            <name>valueType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>String</name>
                </type>
                <name>expectedStr</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"{"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>expected</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>i</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>ret</name>.
                                                    <name>append</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>", "</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ret</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>expected</name>.
                                                            <name>elementAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>toString</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ret</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'}'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ret</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**********************************/</comment>

            <comment type="line">// xpath matcher information</comment>

            <comment type="javadoc">/**
                * Stack of XPath matchers for identity constraints.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>static</specifier> class <name>XPathMatcherStack</name>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Active matchers. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>XPathMatcher</name>
                                <index>[]</index>
                            </type>
                            <name>fMatchers</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>XPathMatcher</name>
                                        <index>[<expr>4</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Count of active matchers. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>int</name>
                            </type>
                            <name>fMatchersCount</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Offset stack for contexts. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>IntStack</name>
                            </type>
                            <name>fContextStack</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>IntStack</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <constructor>
                        <specifier>public</specifier>
                        <name>XPathMatcherStack</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;()</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Public methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Resets the XPath matcher stack. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>clear</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>fMatchersCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fMatchers</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <name>fMatchersCount</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fContextStack</name>.
                                            <name>clear</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// clear()</comment>

                    <comment type="javadoc">/** Returns the size of the stack. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fContextStack</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// size():int</comment>

                    <comment type="javadoc">/** Returns the count of XPath matchers. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>getMatcherCount</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>fMatchersCount</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// getMatcherCount():int</comment>

                    <comment type="javadoc">/** Adds a matcher. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>addMatcher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XPathMatcher</name>
                                    </type>
                                    <name>matcher</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureMatcherCapacity</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fMatchers</name>
                                        <index>[
                                            <expr><name>fMatchersCount</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>matcher</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// addMatcher(XPathMatcher)</comment>

                    <comment type="javadoc">/** Returns the XPath matcher at the specified index. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>XPathMatcher</name>
                        </type>
                        <name>getMatcherAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>
                                        <name>fMatchers</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// getMatcherAt(index):XPathMatcher</comment>

                    <comment type="javadoc">/** Pushes a new context onto the stack. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>pushContext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fContextStack</name>.
                                            <name>push</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fMatchersCount</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// pushContext()</comment>

                    <comment type="javadoc">/** Pops a context off of the stack. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>popContext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fMatchersCount</name>
                                    =
                                    <call>
                                        <name><name>fContextStack</name>.
                                            <name>pop</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// popContext()</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Private methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Ensures the size of the matchers array. */</comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>ensureMatcherCapacity</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fMatchersCount</name>
                                        ==
                                        <name><name>fMatchers</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>XPathMatcher</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>array</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>XPathMatcher</name>
                                                            <index>[
                                                                <expr>
                                                                    <name><name>fMatchers</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    * 2
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fMatchers</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>fMatchers</name>.
                                                                    <name>length</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fMatchers</name>
                                                =
                                                <name>array</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// ensureMatcherCapacity()</comment>

                    }
                </block>
            </class>
            <comment type="line">// class XPathMatcherStack</comment>

            <comment type="line">// value store implementations</comment>

            <comment type="javadoc">/**
                * Value store implementation base class. There are specific subclasses
                * for handling unique, key, and keyref.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>abstract</specifier> class <name>ValueStoreBase</name>
                <super>
                    <implements>implements
                        <name>ValueStore</name>
                    </implements>
                </super>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Identity constraint. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>IdentityConstraint</name>
                            </type>
                            <name>fIdentityConstraint</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>int</name>
                            </type>
                            <name>fFieldCount</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>Field</name>
                                <index>[]</index>
                            </type>
                            <name>fFields</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/** current data */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>fLocalValues</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>fLocalValueTypes</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>ShortList</name>
                                <index>[]</index>
                            </type>
                            <name>fLocalItemValueTypes</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Current data value count. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>int</name>
                            </type>
                            <name>fValuesCount</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** global data */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>final</specifier>
                                <name>Vector</name>
                            </type>
                            <name>fValues</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>ShortVector</name>
                            </type>
                            <name>fValueTypes</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>Vector</name>
                            </type>
                            <name>fItemValueTypes</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>fUseValueTypeVector</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>fValueTypesLength</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>short</name>
                            </type>
                            <name>fValueType</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>fUseItemValueTypeVector</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>fItemValueTypesLength</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>ShortList</name>
                            </type>
                            <name>fItemValueType</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** buffer for error messages */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>StringBuffer</name>
                            </type>
                            <name>fTempBuffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Constructs a value store for the specified identity constraint. */
                    </comment>
                    <constructor>
                        <specifier>protected</specifier>
                        <name>ValueStoreBase</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                    </type>
                                    <name>identityConstraint</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fIdentityConstraint</name>
                                    =
                                    <name>identityConstraint</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fFieldCount</name>
                                    =
                                    <call>
                                        <name><name>fIdentityConstraint</name>.
                                            <name>getFieldCount</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fFields</name>
                                    = new
                                    <name>
                                        <name>Field</name>
                                        <index>[
                                            <expr>
                                                <name>fFieldCount</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fLocalValues</name>
                                    = new
                                    <name>
                                        <name>Object</name>
                                        <index>[
                                            <expr>
                                                <name>fFieldCount</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fLocalValueTypes</name>
                                    = new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name>fFieldCount</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fLocalItemValueTypes</name>
                                    = new
                                    <name>
                                        <name>ShortList</name>
                                        <index>[
                                            <expr>
                                                <name>fFieldCount</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>fFieldCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fFields</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>fIdentityConstraint</name>.
                                                    <name>getFieldAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(IdentityConstraint)</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Public methods</comment>
                    <comment type="line">//</comment>

                    <comment type="line">// destroys this ValueStore; useful when, for instance, a</comment>
                    <comment type="line">// locally-scoped ID constraint is involved.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>clear</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fValuesCount</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fUseValueTypeVector</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fValueTypesLength</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fValueType</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fUseItemValueTypeVector</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fItemValueTypesLength</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fItemValueType</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fValues</name>.
                                            <name>setSize</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fValueTypes</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fValueTypes</name>.
                                                        <name>clear</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fItemValueTypes</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fItemValueTypes</name>.
                                                        <name>setSize</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// end clear():void</comment>

                    <comment type="line">// appends the contents of one ValueStore to those of us.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>append</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ValueStoreBase</name>
                                    </type>
                                    <name>newVal</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <call>
                                            <name><name>newVal</name>.<name>fValues</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>fValues</name>.
                                                    <name>addElement</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>newVal</name>.<name>fValues</name>.
                                                                    <name>elementAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>
                    <comment type="line">// append(ValueStoreBase)</comment>

                    <comment type="javadoc">/** Start scope for value store. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>startValueScope</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fValuesCount</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>fFieldCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fLocalValues</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fLocalValueTypes</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = 0
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fLocalItemValueTypes</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>
                    <comment type="line">// startValueScope()</comment>

                    <comment type="javadoc">/** Ends scope for value store. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endValueScope</name>
                        <parameter_list>()</parameter_list>
                        <block>{

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fValuesCount</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>fIdentityConstraint</name>.
                                                            <name>getCategory</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_KEY</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>String</name>
                                                            </type>
                                                            <name>code</name> =
                                                            <init>
                                                                <expr>"AbsentKeyValue"</expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>String</name>
                                                            </type>
                                                            <name>eName</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fIdentityConstraint</name>.
                                                                            <name>getElementName</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportSchemaError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>code</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <name>eName</name>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// do we have enough values?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fValuesCount</name>
                                        !=
                                        <name>fFieldCount</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>fIdentityConstraint</name>.
                                                            <name>getCategory</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case
                                                    <expr>
                                                        <name><name>IdentityConstraint</name>.
                                                            <name>IC_UNIQUE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>code</name> =
                                                                <init>
                                                                    <expr>"UniqueNotEnoughValues"</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>ename</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fIdentityConstraint</name>.
                                                                                <name>getElementName</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>code</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name>ename</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break>
                                                        }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>IdentityConstraint</name>.
                                                            <name>IC_KEY</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>code</name> =
                                                                <init>
                                                                    <expr>"KeyNotEnoughValues"</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>UniqueOrKey</name>
                                                                </type>
                                                                <name>key</name> =
                                                                <init>
                                                                    <expr>(<name>UniqueOrKey</name>)
                                                                        <name>fIdentityConstraint</name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>ename</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fIdentityConstraint</name>.
                                                                                <name>getElementName</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>kname</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>key</name>.
                                                                                <name>getIdentityConstraintName</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>code</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name>ename</name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name>kname</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break>
                                                        }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>IdentityConstraint</name>.
                                                            <name>IC_KEYREF</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>code</name> =
                                                                <init>
                                                                    <expr>"KeyRefNotEnoughValues"</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>KeyRef</name>
                                                                </type>
                                                                <name>keyref</name> =
                                                                <init>
                                                                    <expr>(<name>KeyRef</name>)
                                                                        <name>fIdentityConstraint</name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>ename</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fIdentityConstraint</name>.
                                                                                <name>getElementName</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>kname</name> =
                                                                <init>
                                                                    <expr>(
                                                                        <call>
                                                                            <name><name>keyref</name>.
                                                                                <name>getKey</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        ).
                                                                        <call>
                                                                            <name>getIdentityConstraintName</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>reportSchemaError</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>code</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name>ename</name>
                                                                                    </expr>
                                                                                    ,
                                                                                    <expr>
                                                                                        <name>kname</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break>
                                                        }
                                                    </block>
                                                </case>
                                                }
                                            </block>
                                        </switch>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>

                            }
                        </block>
                    </function>
                    <comment type="line">// endValueScope()</comment>

                    <comment type="line">// This is needed to allow keyref's to look for matched keys</comment>
                    <comment type="line">// in the correct scope. Unique and Key may also need to</comment>
                    <comment type="line">// override this method for purposes of their own.</comment>
                    <comment type="line">// This method is called whenever the DocumentFragment</comment>
                    <comment type="line">// of an ID Constraint goes out of scope.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endDocumentFragment</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </function>
                    <comment type="line">// endDocumentFragment():void</comment>

                    <comment type="javadoc">/**
                        * Signals the end of the document. This is where the specific
                        * instances of value stores can verify the integrity of the
                        * identity constraints.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endDocument</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </function>
                    <comment type="line">// endDocument()</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// ValueStore methods</comment>
                    <comment type="line">//</comment>

                    <comment type="block">/* reports an error if an element is matched
                        * has nillable true and is matched by a key.
                        */
                    </comment>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>reportError</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>args</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>reportSchemaError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>args</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// reportError(String,Object[])</comment>

                    <comment type="javadoc">/**
                        * Adds the specified value to the value store.
                        *
                        * @param field The field associated to the value. This reference
                        * is used to ensure that each field only adds a value
                        * once within a selection scope.
                        * @param actualValue The value to add.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>addValue</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Field</name>
                                    </type>
                                    <name>field</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>actualValue</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>valueType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>ShortList</name>
                                    </type>
                                    <name>itemValueType</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <expr>
                                        <name>i</name>
                                        = <name>fFieldCount</name> - 1
                                    </expr>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &gt; -1
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>--
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>fFields</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>field</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <comment type="line">// do we even know this field?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>i</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"UnknownField"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>field</name>.
                                                                                <name>toString</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>Boolean</name>.
                                            <name>TRUE</name>
                                        </name>
                                        !=
                                        <call>
                                            <name>mayMatch</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>field</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"FieldMultipleMatch"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>field</name>.
                                                                                <name>toString</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>fValuesCount</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fLocalValues</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>actualValue</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fLocalValueTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>valueType</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fLocalItemValueTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>itemValueType</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fValuesCount</name>
                                        ==
                                        <name>fFieldCount</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>checkDuplicateValues</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// store values</comment>
                                        <for>for (
                                            <init>
                                                <expr>
                                                    <name>i</name>
                                                    = 0
                                                </expr>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>fFieldCount</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>fValues</name>.
                                                                <name>addElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fLocalValues</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>addValueType</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fLocalValueTypes</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>addItemValueType</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fLocalItemValueTypes</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// addValue(String,Field)</comment>

                    <comment type="javadoc">/**
                        * Returns true if this value store contains the locally scoped value stores
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>contains</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// REVISIT: we can improve performance by using hash codes, instead
                                of
                            </comment>
                            <comment type="line">// traversing global vector that could be quite large.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>size</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fValues</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <label>
                                <name>LOOP</name>
                                :
                            </label>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>i</name>
                                        =
                                        <name>next</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>next</name>
                                            = <name>i</name> +
                                            <name>fFieldCount</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>j</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>j</name>
                                                &lt;
                                                <name>fFieldCount</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>j</name>++
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Object</name>
                                                    </type>
                                                    <name>value1</name> =
                                                    <init>
                                                        <expr>
                                                            <name>
                                                                <name>fLocalValues</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Object</name>
                                                    </type>
                                                    <name>value2</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>fValues</name>.
                                                                    <name>elementAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>short</name>
                                                    </type>
                                                    <name>valueType1</name> =
                                                    <init>
                                                        <expr>
                                                            <name>
                                                                <name>fLocalValueTypes</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>short</name>
                                                    </type>
                                                    <name>valueType2</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name>getValueTypeAt</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>value1</name>
                                                        == <name>null</name> || <name>value2</name> == <name>null</name> || <name>
                                                        valueType1
                                                    </name> != <name>valueType2</name> || !(
                                                        <call>
                                                            <name><name>value1</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>value2</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        )
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <continue>continue LOOP;</continue>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>valueType1</name>
                                                                ==
                                                                <name><name>XSConstants</name>.
                                                                    <name>LIST_DT</name>
                                                                </name>
                                                                || <name>valueType1</name> ==
                                                                <name><name>XSConstants</name>.
                                                                    <name>LISTOFUNION_DT</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>ShortList</name>
                                                                        </type>
                                                                        <name>list1</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <name>
                                                                                    <name>fLocalItemValueTypes</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>j</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>ShortList</name>
                                                                        </type>
                                                                        <name>list2</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>getItemValueTypeAt</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>list1</name>
                                                                            == <name>null</name> || <name>list2</name> == <name>
                                                                            null
                                                                        </name> || !
                                                                            <call>
                                                                                <name><name>list1</name>.
                                                                                    <name>equals</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>list2</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <continue>continue LOOP;</continue>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            <expr_stmt>
                                                <expr><name>i</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </for>
                                    <comment type="line">// found it</comment>
                                    <return>return <expr>true</expr>;
                                    </return>
                                    }
                                </block>
                            </for>
                            <comment type="line">// didn't find it</comment>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// contains():boolean</comment>

                    <comment type="javadoc">/**
                        * Returns -1 if this value store contains the specified
                        * values, otherwise the index of the first field in the
                        * key sequence.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>contains</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ValueStoreBase</name>
                                    </type>
                                    <name>vsb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>Vector</name>
                                    </type>
                                    <name>values</name> =
                                    <init>
                                        <expr>
                                            <name><name>vsb</name>.
                                                <name>fValues</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>size1</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>values</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fFieldCount</name>
                                        &lt;= 1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>size1</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>++
                                                    <name>i</name>
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>short</name>
                                                        </type>
                                                        <name>val</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>vsb</name>.
                                                                        <name>getValueTypeAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name>valueTypeContains</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>val</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            || !
                                                            <call>
                                                                <name><name>fValues</name>.
                                                                    <name>contains</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>values</name>.
                                                                                    <name>elementAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>val</name>
                                                                    ==
                                                                    <name><name>XSConstants</name>.
                                                                        <name>LIST_DT</name>
                                                                    </name>
                                                                    || <name>val</name> ==
                                                                    <name><name>XSConstants</name>.
                                                                        <name>LISTOFUNION_DT</name>
                                                                    </name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>ShortList</name>
                                                                            </type>
                                                                            <name>list1</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>vsb</name>.
                                                                                            <name>getItemValueTypeAt
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name>itemValueTypeContains</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>list1</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <return>return
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="javadoc">/** Handle n-tuples. **/</comment>
                            <else>else
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <specifier>final</specifier>
                                                <name>int</name>
                                            </type>
                                            <name>size2</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>fValues</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <comment type="javadoc">/** Iterate over each set of fields. **/</comment>
                                    <label><name>OUTER</name>:
                                    </label>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>i</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>i</name>
                                                &lt;
                                                <name>size1</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr>
                                                <name>i</name>
                                                +=
                                                <name>fFieldCount</name>
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <comment type="javadoc">/** Check whether this set is contained in the value
                                                store. **/
                                            </comment>
                                            <label><name>INNER</name>:
                                            </label>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>j</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>j</name>
                                                        &lt;
                                                        <name>size2</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr>
                                                        <name>j</name>
                                                        +=
                                                        <name>fFieldCount</name>
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>k</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>k</name>
                                                                &lt;
                                                                <name>fFieldCount</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr>++
                                                                <name>k</name>
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>Object</name>
                                                                    </type>
                                                                    <name>value1</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>values</name>.
                                                                                    <name>elementAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>i</name>+
                                                                                            <name>k</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>Object</name>
                                                                    </type>
                                                                    <name>value2</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>fValues</name>.
                                                                                    <name>elementAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>j</name>+
                                                                                            <name>k</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>short</name>
                                                                    </type>
                                                                    <name>valueType1</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>vsb</name>.
                                                                                    <name>getValueTypeAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>i</name>+
                                                                                            <name>k</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>short</name>
                                                                    </type>
                                                                    <name>valueType2</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name>getValueTypeAt</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr><name>j</name>+
                                                                                            <name>k</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>value1</name>
                                                                        != <name>value2</name> &amp;&amp; (<name>
                                                                        valueType1
                                                                    </name> != <name>valueType2</name> || <name>value1
                                                                    </name> == <name>null</name> || !
                                                                        <call>
                                                                            <name><name>value1</name>.
                                                                                <name>equals</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>value2</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                        )
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <continue>continue INNER;</continue>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>valueType1</name>
                                                                                ==
                                                                                <name><name>XSConstants</name>.
                                                                                    <name>LIST_DT</name>
                                                                                </name>
                                                                                || <name>valueType1</name> ==
                                                                                <name><name>XSConstants</name>.
                                                                                    <name>LISTOFUNION_DT</name>
                                                                                </name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <decl_stmt>
                                                                                    <decl>
                                                                                        <type>
                                                                                            <name>ShortList</name>
                                                                                        </type>
                                                                                        <name>list1</name> =
                                                                                        <init>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        vsb</name>.
                                                                                                        <name>
                                                                                                            getItemValueTypeAt
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr><name>
                                                                                                                i</name>
                                                                                                                +
                                                                                                                <name>
                                                                                                                    k
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </init>
                                                                                    </decl>
                                                                                    ;
                                                                                </decl_stmt>
                                                                                <decl_stmt>
                                                                                    <decl>
                                                                                        <type>
                                                                                            <name>ShortList</name>
                                                                                        </type>
                                                                                        <name>list2</name> =
                                                                                        <init>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>
                                                                                                        getItemValueTypeAt
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr><name>
                                                                                                                j</name>
                                                                                                                +
                                                                                                                <name>
                                                                                                                    k
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </init>
                                                                                    </decl>
                                                                                    ;
                                                                                </decl_stmt>
                                                                                <if>if
                                                                                    <condition>(
                                                                                        <expr>
                                                                                            <name>list1</name>
                                                                                            == <name>null</name> || <name>
                                                                                            list2
                                                                                        </name> == <name>null</name> ||
                                                                                            !
                                                                                            <call>
                                                                                                <name><name>list1</name>
                                                                                                    .
                                                                                                    <name>equals</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                list2
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        )
                                                                                    </condition>
                                                                                    <then>
                                                                                        <block>{
                                                                                            <continue>continue INNER;
                                                                                            </continue>
                                                                                            }
                                                                                        </block>
                                                                                    </then>
                                                                                </if>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                </else>
                                                            </if>
                                                            }
                                                        </block>
                                                    </for>
                                                    <continue>continue OUTER;</continue>
                                                    }
                                                </block>
                                            </for>
                                            <return>return
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </for>
                                    }
                                </block>
                            </else>
                            <return>return <expr>-1</expr>;
                            </return>

                            }
                        </block>
                    </function>
                    <comment type="line">// contains(Vector):Object</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Protected methods</comment>
                    <comment type="line">//</comment>

                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>checkDuplicateValues</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// no-op</comment>
                            }
                        </block>
                    </function>
                    <comment type="line">// duplicateValue(Hashtable)</comment>

                    <comment type="javadoc">/** Returns a string of the specified values. */</comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>values</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{

                            <comment type="line">// no values</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name> =
                                    <init>
                                        <expr>
                                            <name><name>values</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>""</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fTempBuffer</name>.
                                            <name>setLength</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// construct value string</comment>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>i</name>
                                                &gt; 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>fTempBuffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>','</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>fTempBuffer</name>.
                                                    <name>append</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>values</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fTempBuffer</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>

                            }
                        </block>
                    </function>
                    <comment type="line">// toString(Object[]):String</comment>

                    <comment type="javadoc">/** Returns a string of the specified values. */</comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Vector</name>
                                    </type>
                                    <name>values</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{

                            <comment type="line">// no values</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>length</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>""</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// one value</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>length</name>
                                        == 1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>String</name>.
                                                        <name>valueOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>values</name>.
                                                                        <name>elementAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>start</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// construct value string</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>StringBuffer</name>
                                    </type>
                                    <name>str</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>StringBuffer</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>length</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>i</name>
                                                &gt; 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>','</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>append</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>values</name>.
                                                                    <name>elementAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                            +
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>

                            }
                        </block>
                    </function>
                    <comment type="line">// toString(Vector,int,int):String</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Object methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Returns a string representation of this object. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>s</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>super</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index1</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>lastIndexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'$'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index1</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>s</name>
                                                =
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index1</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index2</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>lastIndexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'.'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index2</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>s</name>
                                                =
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index2</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>s</name>
                                    + '[' + <name>fIdentityConstraint</name> + ']'
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// toString():String</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Private methods</comment>
                    <comment type="line">//</comment>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>addValueType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fValueTypes</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>type</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr><name>fValueTypesLength</name>++ == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>fValueType</name>
                                                        =
                                                        <name>type</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fValueType</name>
                                                        !=
                                                        <name>type</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>fUseValueTypeVector</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>fValueTypes</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fValueTypes</name>
                                                                            = new
                                                                            <call>
                                                                                <name>ShortVector</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>fValueTypesLength
                                                                                            </name>
                                                                                            * 2
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name> =
                                                                    <init>
                                                                        <expr>1</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr>
                                                                    <name>i</name>
                                                                    &lt;
                                                                    <name>fValueTypesLength</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr>++
                                                                    <name>i</name>
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fValueTypes</name>.
                                                                                <name>add</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>fValueType</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fValueTypes</name>.
                                                                        <name>add</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>type</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>short</name>
                        </type>
                        <name>getValueTypeAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>fValueTypes</name>.
                                                        <name>valueAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>fValueType</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>boolean</name>
                        </type>
                        <name>valueTypeContains</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>fValueTypes</name>.
                                                        <name>contains</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>fValueType</name>
                                    ==
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>addItemValueType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ShortList</name>
                                    </type>
                                    <name>itemValueType</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseItemValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fItemValueTypes</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>itemValueType</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr><name>fItemValueTypesLength</name>++ == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>fItemValueType</name>
                                                        =
                                                        <name>itemValueType</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>!(<name>fItemValueType</name> == <name>itemValueType</name> ||
                                                        (<name>fItemValueType</name> != <name>null</name> &amp;&amp;
                                                        <call>
                                                            <name><name>fItemValueType</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>itemValueType</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ))
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>fUseItemValueTypeVector</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>fItemValueTypes</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fItemValueTypes</name>
                                                                            = new
                                                                            <call>
                                                                                <name>Vector</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>
                                                                                                fItemValueTypesLength
                                                                                            </name>
                                                                                            * 2
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name> =
                                                                    <init>
                                                                        <expr>1</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr>
                                                                    <name>i</name>
                                                                    &lt;
                                                                    <name>fItemValueTypesLength</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr>++
                                                                    <name>i</name>
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fItemValueTypes</name>.
                                                                                <name>add</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>fItemValueType</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fItemValueTypes</name>.
                                                                        <name>add</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>itemValueType</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>ShortList</name>
                        </type>
                        <name>getItemValueTypeAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseItemValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>(<name>ShortList</name>)
                                                <call>
                                                    <name><name>fItemValueTypes</name>.
                                                        <name>elementAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>fItemValueType</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>boolean</name>
                        </type>
                        <name>itemValueTypeContains</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ShortList</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fUseItemValueTypeVector</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>fItemValueTypes</name>.
                                                        <name>contains</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>fItemValueType</name>
                                    == <name>value</name> ||
                                    (<name>fItemValueType</name> != <name>null</name> &amp;&amp;
                                    <call>
                                        <name><name>fItemValueType</name>.
                                            <name>equals</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    }
                </block>
            </class>
            <comment type="line">// class ValueStoreBase</comment>

            <comment type="javadoc">/**
                * Unique value store.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                class <name>UniqueValueStore</name>
                <super>
                    <extends>extends
                        <name>ValueStoreBase</name>
                    </extends>
                </super>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Constructs a unique value store. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>UniqueValueStore</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>UniqueOrKey</name>
                                    </type>
                                    <name>unique</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unique</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(Unique)</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// ValueStoreBase protected methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/**
                        * Called when a duplicate value is added.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>checkDuplicateValues</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// is this value as a group duplicated?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>contains</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"DuplicateUnique"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>toString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fLocalValues</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>ename</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fIdentityConstraint</name>.
                                                                <name>getElementName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name>ename</name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// duplicateValue(Hashtable)</comment>

                    }
                </block>
            </class>
            <comment type="line">// class UniqueValueStore</comment>

            <comment type="javadoc">/**
                * Key value store.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                class <name>KeyValueStore</name>
                <super>
                    <extends>extends
                        <name>ValueStoreBase</name>
                    </extends>
                </super>
                <block>{

                    <comment type="line">// REVISIT: Implement a more efficient storage mechanism. -Ac</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Constructs a key value store. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>KeyValueStore</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>UniqueOrKey</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(Key)</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// ValueStoreBase protected methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/**
                        * Called when a duplicate value is added.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>checkDuplicateValues</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>contains</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"DuplicateKey"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>toString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fLocalValues</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>ename</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fIdentityConstraint</name>.
                                                                <name>getElementName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name>ename</name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    <comment type="line">// duplicateValue(Hashtable)</comment>

                    }
                </block>
            </class>
            <comment type="line">// class KeyValueStore</comment>

            <comment type="javadoc">/**
                * Key reference value store.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                class <name>KeyRefValueStore</name>
                <super>
                    <extends>extends
                        <name>ValueStoreBase</name>
                    </extends>
                </super>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Key value store. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>ValueStoreBase</name>
                            </type>
                            <name>fKeyValueStore</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Constructs a key value store. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>KeyRefValueStore</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>KeyRef</name>
                                    </type>
                                    <name>keyRef</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>KeyValueStore</name>
                                    </type>
                                    <name>keyValueStore</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyRef</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fKeyValueStore</name>
                                    =
                                    <name>keyValueStore</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(KeyRef)</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// ValueStoreBase methods</comment>
                    <comment type="line">//</comment>

                    <comment type="line">// end the value Scope; here's where we have to tie</comment>
                    <comment type="line">// up keyRef loose ends.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endDocumentFragment</name>
                        <parameter_list>()</parameter_list>
                        <block>{

                            <comment type="line">// do all the necessary management...</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>endDocumentFragment</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// verify references</comment>
                            <comment type="line">// get the key store corresponding (if it exists):</comment>
                            <expr_stmt>
                                <expr>
                                    <name>fKeyValueStore</name>
                                    =
                                    (<name>ValueStoreBase</name>)
                                    <call>
                                        <name><name>fValueStoreCache</name>.<name>fGlobalIDConstraintMap</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>KeyRef</name>) <name>fIdentityConstraint</name>).
                                                    <call>
                                                        <name>getKey</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fKeyValueStore</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// report error</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"KeyRefOutOfScope"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fIdentityConstraint</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>errorIndex</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fKeyValueStore</name>.
                                                    <name>contains</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>errorIndex</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>code</name> =
                                                <init>
                                                    <expr>"KeyNotFound"</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>values</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>toString</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fValues</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fFieldCount</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>element</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fIdentityConstraint</name>.
                                                                <name>getElementName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>name</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>fIdentityConstraint</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportSchemaError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>code</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name>name</name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name>values</name>
                                                                    </expr>
                                                                    ,
                                                                    <expr>
                                                                        <name>element</name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            }
                        </block>
                    </function>
                    <comment type="line">// endDocumentFragment()</comment>

                    <comment type="javadoc">/** End document. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endDocument</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>endDocument</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                    </function>
                    <comment type="line">// endDocument()</comment>

                    }
                </block>
            </class>
            <comment type="line">// class KeyRefValueStore</comment>

            <comment type="line">// value store management</comment>

            <comment type="javadoc">/**
                * Value store cache. This class is used to store the values for
                * identity constraints.
                *
                * @author Andy Clark, IBM
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                class <name>ValueStoreCache</name>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>LocalIDKey</name>
                            </type>
                            <name>fLocalId</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>LocalIDKey</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// values stores</comment>

                    <comment type="javadoc">/** stores all global Values stores. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Vector</name>
                            </type>
                            <name>fValueStores</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Values stores associated to specific identity constraints.
                        * This hashtable maps IdentityConstraints and
                        * the 0-based element on which their selectors first matched to
                        * a corresponding ValueStore. This should take care
                        * of all cases, including where ID constraints with
                        * descendant-or-self axes occur on recursively-defined
                        * elements.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Hashtable</name>
                            </type>
                            <name>fIdentityConstraint2ValueStoreMap</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// sketch of algorithm:</comment>
                    <comment type="line">// - when a constraint is first encountered, its</comment>
                    <comment type="line">// values are stored in the (local) fIdentityConstraint2ValueStoreMap;
                    </comment>
                    <comment type="line">// - Once it is validated (i.e., when it goes out of scope),</comment>
                    <comment type="line">// its values are merged into the fGlobalIDConstraintMap;</comment>
                    <comment type="line">// - as we encounter keyref's, we look at the global table to</comment>
                    <comment type="line">// validate them.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// The fGlobalIDMapStack has the following structure:</comment>
                    <comment type="line">// - validation always occurs against the fGlobalIDConstraintMap</comment>
                    <comment type="line">// (which comprises all the "eligible" id constraints);</comment>
                    <comment type="line">// When an endElement is found, this Hashtable is merged with the one</comment>
                    <comment type="line">// below in the stack.</comment>
                    <comment type="line">// When a start tag is encountered, we create a new</comment>
                    <comment type="line">// fGlobalIDConstraintMap.</comment>
                    <comment type="line">// i.e., the top of the fGlobalIDMapStack always contains</comment>
                    <comment type="line">// the preceding siblings' eligible id constraints;</comment>
                    <comment type="line">// the fGlobalIDConstraintMap contains descendants+self.</comment>
                    <comment type="line">// keyrefs can only match descendants+self.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Stack</name>
                            </type>
                            <name>fGlobalMapStack</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Stack</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Hashtable</name>
                            </type>
                            <name>fGlobalIDConstraintMap</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Default constructor. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>ValueStoreCache</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;()</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Public methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Resets the identity constraint cache. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>startDocument</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fValueStores</name>.
                                            <name>removeAllElements</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fIdentityConstraint2ValueStoreMap</name>.
                                            <name>clear</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fGlobalIDConstraintMap</name>.
                                            <name>clear</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fGlobalMapStack</name>.
                                            <name>removeAllElements</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// startDocument()</comment>

                    <comment type="line">// startElement: pushes the current fGlobalIDConstraintMap</comment>
                    <comment type="line">// onto fGlobalMapStack and clears fGlobalIDConstraint map.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>startElement</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// only clone the hashtable when there are elements</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>fGlobalIDConstraintMap</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>fGlobalMapStack</name>.
                                                    <name>push</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>fGlobalIDConstraintMap</name>.
                                                                    <name>clone</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>fGlobalMapStack</name>.
                                                    <name>push</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fGlobalIDConstraintMap</name>.
                                            <name>clear</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// startElement(void)</comment>

                    <comment type="javadoc">/** endElement(): merges contents of fGlobalIDConstraintMap with the
                        * top of fGlobalMapStack into fGlobalIDConstraintMap.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endElement</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>fGlobalMapStack</name>.
                                                <name>isEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return;</return>
                                </then>
                            </if>
                            <comment type="line">// must be an invalid doc!</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Hashtable</name>
                                    </type>
                                    <name>oldMap</name> =
                                    <init>
                                        <expr>(<name>Hashtable</name>)
                                            <call>
                                                <name><name>fGlobalMapStack</name>.
                                                    <name>pop</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// return if there is no element</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>oldMap</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return;</return>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Enumeration</name>
                                    </type>
                                    <name>keys</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>oldMap</name>.
                                                    <name>keys</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>keys</name>.
                                                <name>hasMoreElements</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>IdentityConstraint</name>
                                            </type>
                                            <name>id</name> =
                                            <init>
                                                <expr>(<name>IdentityConstraint</name>)
                                                    <call>
                                                        <name><name>keys</name>.
                                                            <name>nextElement</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>ValueStoreBase</name>
                                            </type>
                                            <name>oldVal</name> =
                                            <init>
                                                <expr>(<name>ValueStoreBase</name>)
                                                    <call>
                                                        <name><name>oldMap</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>id</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>oldVal</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>ValueStoreBase</name>
                                                        </type>
                                                        <name>currVal</name> =
                                                        <init>
                                                            <expr>(<name>ValueStoreBase</name>)
                                                                <call>
                                                                    <name><name>fGlobalIDConstraintMap</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>id</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>currVal</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fGlobalIDConstraintMap</name>.
                                                                        <name>put</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>id</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>oldVal</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>currVal</name>
                                                                    !=
                                                                    <name>oldVal</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>currVal</name>.
                                                                                    <name>append</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>oldVal</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </function>
                    <comment type="line">// endElement()</comment>

                    <comment type="javadoc">/**
                        * Initializes the value stores for the specified element
                        * declaration.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>initValueStoresFor</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XSElementDecl</name>
                                    </type>
                                    <name>eDecl</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>FieldActivator</name>
                                    </type>
                                    <name>activator</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// initialize value stores for unique fields</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                        <index>[]</index>
                                    </type>
                                    <name>icArray</name> =
                                    <init>
                                        <expr>
                                            <name><name>eDecl</name>.
                                                <name>fIDConstraints</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>icCount</name> =
                                    <init>
                                        <expr>
                                            <name><name>eDecl</name>.
                                                <name>fIDCPos</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>icCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <switch>switch
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>icArray</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>getCategory</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <case>case
                                                <expr>(
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_UNIQUE</name>
                                                    </name>
                                                    )
                                                </expr>
                                                :
                                                <comment type="line">// initialize value stores for unique fields
                                                </comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>UniqueOrKey</name>
                                                        </type>
                                                        <name>unique</name> =
                                                        <init>
                                                            <expr>(<name>UniqueOrKey</name>)
                                                                <name>
                                                                    <name>icArray</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>LocalIDKey</name>
                                                        </type>
                                                        <name>toHash</name> =
                                                        <init>
                                                            <expr>new
                                                                <call>
                                                                    <name>LocalIDKey</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>unique</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fElementDepth</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>UniqueValueStore</name>
                                                        </type>
                                                        <name>uniqueValueStore</name> =
                                                        <init>
                                                            <expr>(<name>UniqueValueStore</name>)
                                                                <call>
                                                                    <name><name>fIdentityConstraint2ValueStoreMap</name>
                                                                        .
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>toHash</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>uniqueValueStore</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>uniqueValueStore</name>
                                                                    = new
                                                                    <call>
                                                                        <name>UniqueValueStore</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>unique</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>
                                                                            fIdentityConstraint2ValueStoreMap</name>.
                                                                            <name>put</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toHash</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>uniqueValueStore</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>uniqueValueStore</name>.
                                                                            <name>clear</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>fValueStores</name>.
                                                                <name>addElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>uniqueValueStore</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>activateSelectorFor</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>icArray</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </case>
                                            <case>case
                                                <expr>(
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_KEY</name>
                                                    </name>
                                                    )
                                                </expr>
                                                :
                                                <comment type="line">// initialize value stores for key fields</comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>UniqueOrKey</name>
                                                        </type>
                                                        <name>key</name> =
                                                        <init>
                                                            <expr>(<name>UniqueOrKey</name>)
                                                                <name>
                                                                    <name>icArray</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>toHash</name>
                                                        = new
                                                        <call>
                                                            <name>LocalIDKey</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>key</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fElementDepth</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>KeyValueStore</name>
                                                        </type>
                                                        <name>keyValueStore</name> =
                                                        <init>
                                                            <expr>(<name>KeyValueStore</name>)
                                                                <call>
                                                                    <name><name>fIdentityConstraint2ValueStoreMap</name>
                                                                        .
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>toHash</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>keyValueStore</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>keyValueStore</name>
                                                                    = new
                                                                    <call>
                                                                        <name>KeyValueStore</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>key</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>
                                                                            fIdentityConstraint2ValueStoreMap</name>.
                                                                            <name>put</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toHash</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>keyValueStore</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>keyValueStore</name>.
                                                                            <name>clear</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>fValueStores</name>.
                                                                <name>addElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>keyValueStore</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>activateSelectorFor</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>icArray</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </case>
                                            <case>case
                                                <expr>(
                                                    <name><name>IdentityConstraint</name>.
                                                        <name>IC_KEYREF</name>
                                                    </name>
                                                    )
                                                </expr>
                                                :
                                                <comment type="line">// initialize value stores for keyRef fields
                                                </comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>KeyRef</name>
                                                        </type>
                                                        <name>keyRef</name> =
                                                        <init>
                                                            <expr>(<name>KeyRef</name>)
                                                                <name>
                                                                    <name>icArray</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>toHash</name>
                                                        = new
                                                        <call>
                                                            <name>LocalIDKey</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>keyRef</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fElementDepth</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>KeyRefValueStore</name>
                                                        </type>
                                                        <name>keyRefValueStore</name> =
                                                        <init>
                                                            <expr>(<name>KeyRefValueStore</name>)
                                                                <call>
                                                                    <name><name>fIdentityConstraint2ValueStoreMap</name>
                                                                        .
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>toHash</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>keyRefValueStore</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>keyRefValueStore</name>
                                                                    = new
                                                                    <call>
                                                                        <name>KeyRefValueStore</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>keyRef</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>
                                                                            fIdentityConstraint2ValueStoreMap</name>.
                                                                            <name>put</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toHash</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>keyRefValueStore</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>keyRefValueStore</name>.
                                                                            <name>clear</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>fValueStores</name>.
                                                                <name>addElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>keyRefValueStore</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>activateSelectorFor</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>icArray</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </case>
                                            }
                                        </block>
                                    </switch>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>
                    <comment type="line">// initValueStoresFor(XSElementDecl)</comment>

                    <comment type="javadoc">/** Returns the value store associated to the specified IdentityConstraint.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>ValueStoreBase</name>
                        </type>
                        <name>getValueStoreFor</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                    </type>
                                    <name>id</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>initialDepth</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>fLocalId</name>.
                                        <name>fDepth</name>
                                    </name>
                                    =
                                    <name>initialDepth</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>fLocalId</name>.
                                        <name>fId</name>
                                    </name>
                                    =
                                    <name>id</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>(<name>ValueStoreBase</name>)
                                    <call>
                                        <name><name>fIdentityConstraint2ValueStoreMap</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fLocalId</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// getValueStoreFor(IdentityConstraint, int):ValueStoreBase</comment>

                    <comment type="javadoc">/** Returns the global value store associated to the specified
                        IdentityConstraint. */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>ValueStoreBase</name>
                        </type>
                        <name>getGlobalValueStoreFor</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                    </type>
                                    <name>id</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>ValueStoreBase</name>)
                                    <call>
                                        <name><name>fGlobalIDConstraintMap</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>id</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// getValueStoreFor(IdentityConstraint):ValueStoreBase</comment>

                    <comment type="line">// This method takes the contents of the (local) ValueStore</comment>
                    <comment type="line">// associated with id and moves them into the global</comment>
                    <comment type="line">// hashtable, if id is a &lt;unique&gt; or a &lt;key&gt;.</comment>
                    <comment type="line">// If it's a &lt;keyRef&gt;, then we leave it for later.</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>transplant</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                    </type>
                                    <name>id</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>initialDepth</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>fLocalId</name>.
                                        <name>fDepth</name>
                                    </name>
                                    =
                                    <name>initialDepth</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>fLocalId</name>.
                                        <name>fId</name>
                                    </name>
                                    =
                                    <name>id</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ValueStoreBase</name>
                                    </type>
                                    <name>newVals</name> =
                                    <init>
                                        <expr>(<name>ValueStoreBase</name>)
                                            <call>
                                                <name><name>fIdentityConstraint2ValueStoreMap</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fLocalId</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>id</name>.
                                                <name>getCategory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>IdentityConstraint</name>.
                                            <name>IC_KEYREF</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return;</return>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ValueStoreBase</name>
                                    </type>
                                    <name>currVals</name> =
                                    <init>
                                        <expr>(<name>ValueStoreBase</name>)
                                            <call>
                                                <name><name>fGlobalIDConstraintMap</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>id</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>currVals</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>currVals</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>newVals</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fGlobalIDConstraintMap</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>id</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>currVals</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>fGlobalIDConstraintMap</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>id</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>newVals</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>

                            }
                        </block>
                    </function>
                    <comment type="line">// transplant(id)</comment>

                    <comment type="javadoc">/** Check identity constraints. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>endDocument</name>
                        <parameter_list>()</parameter_list>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>count</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fValueStores</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>count</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>ValueStoreBase</name>
                                            </type>
                                            <name>valueStore</name> =
                                            <init>
                                                <expr>(<name>ValueStoreBase</name>)
                                                    <call>
                                                        <name><name>fValueStores</name>.
                                                            <name>elementAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>valueStore</name>.
                                                    <name>endDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>

                            }
                        </block>
                    </function>
                    <comment type="line">// endDocument()</comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Object methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Returns a string representation of this object. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>s</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>super</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index1</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>lastIndexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'$'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index1</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index1</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index2</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>lastIndexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'.'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index2</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index2</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>s</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// toString():String</comment>

                    }
                </block>
            </class>
            <comment type="line">// class ValueStoreCache</comment>

            <comment type="line">// the purpose of this class is to enable IdentityConstraint,int</comment>
            <comment type="line">// pairs to be used easily as keys in Hashtables.</comment>
            <class>
                <specifier>protected</specifier>
                class <name>LocalIDKey</name>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>IdentityConstraint</name>
                            </type>
                            <name>fId</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <name>int</name>
                            </type>
                            <name>fDepth</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>public</specifier>
                        <name>LocalIDKey</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            }
                        </block>
                    </constructor>

                    <constructor>
                        <specifier>public</specifier>
                        <name>LocalIDKey</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>IdentityConstraint</name>
                                    </type>
                                    <name>id</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>depth</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fId</name>
                                    =
                                    <name>id</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fDepth</name>
                                    =
                                    <name>depth</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// init(IdentityConstraint, int)</comment>

                    <comment type="line">// object method</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fId</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    +
                                    <name>fDepth</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>equals</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>localIDKey</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>localIDKey</name>
                                        <name>instanceof</name>
                                        <name>LocalIDKey</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>LocalIDKey</name>
                                                </type>
                                                <name>lIDKey</name> =
                                                <init>
                                                    <expr>(<name>LocalIDKey</name>)
                                                        <name>localIDKey</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>(
                                                <name><name>lIDKey</name>.
                                                    <name>fId</name>
                                                </name>
                                                == <name>fId</name> &amp;&amp;
                                                <name><name>lIDKey</name>.
                                                    <name>fDepth</name>
                                                </name>
                                                == <name>fDepth</name>)
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// class LocalIDKey</comment>

            <comment type="javadoc">/**
                * A simple vector for &lt;code&gt;short&lt;/code&gt;s.
                */
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>ShortVector</name>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Current length. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>fLength</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Data. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>fData</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <constructor>
                        <specifier>public</specifier>
                        <name>ShortVector</name>
                        <parameter_list>()</parameter_list>
                        <block>{}</block>
                    </constructor>

                    <constructor>
                        <specifier>public</specifier>
                        <name>ShortVector</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>initialCapacity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fData</name>
                                    = new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name>initialCapacity</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="line">//</comment>
                    <comment type="line">// Public methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Returns the length of the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>length</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>fLength</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Adds the value to the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fLength</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>fData</name>
                                        <index>[
                                            <expr><name>fLength</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Returns the short value at the specified position in the vector. */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>short</name>
                        </type>
                        <name>valueAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>position</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>
                                        <name>fData</name>
                                        <index>[
                                            <expr>
                                                <name>position</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Clears the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>clear</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fLength</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Returns whether the short is contained in the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>contains</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>fLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>fData</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>value</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="line">//</comment>
                    <comment type="line">// Private methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Ensures capacity. */</comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>ensureCapacity</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fData</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>fData</name>
                                                = new
                                                <name>
                                                    <name>short</name>
                                                    <index>[<expr>8</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>fData</name>.
                                                    <name>length</name>
                                                </name>
                                                &lt;=
                                                <name>size</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>short</name>
                                                            <index>[]</index>
                                                        </type>
                                                        <name>newdata</name> =
                                                        <init>
                                                            <expr>new
                                                                <name>
                                                                    <name>short</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name><name>fData</name>.
                                                                                <name>length</name>
                                                                            </name>
                                                                            * 2
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>System</name>.
                                                                <name>arraycopy</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fData</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newdata</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>fData</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>fData</name>
                                                        =
                                                        <name>newdata</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            }
        </block>
    </class>
    <comment type="line">// class SchemaValidator</comment>
</unit>
