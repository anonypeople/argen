<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\XNIException.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xni</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This exception is the base exception of all XNI exceptions. It
        * can be constructed with an error message or used to wrap another
        * exception object.
        * &lt;p&gt;
        * &lt;strong&gt;Note:&lt;/strong&gt; By extending the Java
        * &lt;code&gt;RuntimeException&lt;/code&gt;, XNI handlers and components are
        * not required to catch XNI exceptions but may explicitly catch
        * them, if so desired.
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: XNIException.java,v 1.5 2004/08/15 21:22:16 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>XNIException</name>
        <super>
            <extends>extends
                <name>RuntimeException</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>9019819772686063775L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** The wrapped exception. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Exception</name>
                    </type>
                    <name>fException</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Constructs an XNI exception with a message.
                *
                * @param message The exception message.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XNIException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(String)</comment>

            <comment type="javadoc">/**
                * Constructs an XNI exception with a wrapped exception.
                *
                * @param exception The wrapped exception.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XNIException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Exception</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fException</name>
                            =
                            <name>exception</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(Exception)</comment>

            <comment type="javadoc">/**
                * Constructs an XNI exception with a message and wrapped exception.
                *
                * @param message The exception message.
                * @param exception The wrapped exception.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XNIException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Exception</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fException</name>
                            =
                            <name>exception</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(Exception,String)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Returns the wrapped exception. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Exception</name>
                </type>
                <name>getException</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fException</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getException():Exception</comment>

            }
        </block>
    </class>
    <comment type="line">// class QName</comment>
</unit>
