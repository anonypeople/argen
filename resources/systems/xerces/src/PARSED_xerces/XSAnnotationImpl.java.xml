<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\XSAnnotationImpl.java">
    <comment type="block">/*
        * Copyright 2001-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSAnnotation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSConstants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSNamespaceItem</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>parsers</name>.
            <name>SAXParser</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>parsers</name>.
            <name>DOMParser</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>ContentHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>InputSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Element</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Document</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This is an implementation of the XSAnnotation schema component.
        *
        * @xerces.internal
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XSAnnotationImpl</name>
        <super>
            <implements>implements
                <name>XSAnnotation</name>
            </implements>
        </super>
        <block>{

            <comment type="line">// Data</comment>

            <comment type="line">// the content of the annotation node, including all children, along</comment>
            <comment type="line">// with any non-schema attributes from its parent</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fData</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// the grammar which owns this annotation; we get parsers</comment>
            <comment type="line">// from here when we need them</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>SchemaGrammar</name>
                    </type>
                    <name>fGrammar</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// constructors</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XSAnnotationImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>contents</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>grammar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fData</name>
                            =
                            <name>contents</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fGrammar</name>
                            =
                            <name>grammar</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Write contents of the annotation to the specified DOM object. If the
                * specified &lt;code&gt;target&lt;/code&gt; object is a DOM in-scope namespace
                * declarations for &lt;code&gt;annotation&lt;/code&gt; element are added as
                * attributes nodes of the serialized &lt;code&gt;annotation&lt;/code&gt;, otherwise
                * the corresponding events for all in-scope namespace declaration are
                * sent via specified document handler.
                * @param target A target pointer to the annotation target object, i.e.
                * &lt;code&gt;org.w3c.dom.Document&lt;/code&gt;,
                * &lt;code&gt;org.xml.sax.ContentHandler&lt;/code&gt;.
                * @param targetType A target type.
                * @return If the &lt;code&gt;target&lt;/code&gt; is recognized type and supported by
                * this implementation return true, otherwise return false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>writeAnnotation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>targetType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>targetType</name>
                                ==
                                <name><name>XSAnnotation</name>.
                                    <name>W3C_DOM_ELEMENT</name>
                                </name>
                                || <name>targetType</name> ==
                                <name><name>XSAnnotation</name>.
                                    <name>W3C_DOM_DOCUMENT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>writeToDOM</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Node</name>)
                                                        <name>target</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>targetType</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>targetType</name>
                                        ==
                                        <name>SAX_CONTENTHANDLER</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>writeToSAX</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>ContentHandler</name>)
                                                                <name>target</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A text representation of annotation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAnnotationString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// XSObject methods</comment>

            <comment type="javadoc">/**
                * The &lt;code&gt;type&lt;/code&gt; of this object, i.e.
                * &lt;code&gt;ELEMENT_DECLARATION&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>ANNOTATION</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The name of type &lt;code&gt;NCName&lt;/code&gt; of this declaration as defined in
                * XML Namespaces.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The [target namespace] of this object, or &lt;code&gt;null&lt;/code&gt; if it is
                * unspecified.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNamespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A namespace schema information item corresponding to the target
                * namespace of the component, if it's globally declared; or null
                * otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSNamespaceItem</name>
                </type>
                <name>getNamespaceItem</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// private methods</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>writeToSAX</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ContentHandler</name>
                            </type>
                            <name>handler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// nothing must go wrong with this parse...</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SAXParser</name>
                            </type>
                            <name>parser</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fGrammar</name>.
                                            <name>getSAXParser</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringReader</name>
                            </type>
                            <name>aReader</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>InputSource</name>
                            </type>
                            <name>aSource</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>InputSource</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aReader</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>parser</name>.
                                    <name>setContentHandler</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>handler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>parser</name>.
                                            <name>parse</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aSource</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>SAXException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// this should never happen!</comment>
                                <comment type="line">// REVISIT: what to do with this?; should really not</comment>
                                <comment type="line">// eat it...</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>i</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ditto with above</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="line">// this creates the new Annotation element as the first child</comment>
            <comment type="line">// of the Node</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>writeToDOM</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>futureOwner</name> =
                            <init>
                                <expr>(<name>type</name> ==
                                    <name><name>XSAnnotation</name>.
                                        <name>W3C_DOM_ELEMENT</name>
                                    </name>
                                    )?
                                    <call>
                                        <name><name>target</name>.
                                            <name>getOwnerDocument</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :(<name>Document</name>)
                                    <name>target</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DOMParser</name>
                            </type>
                            <name>parser</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fGrammar</name>.
                                            <name>getDOMParser</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringReader</name>
                            </type>
                            <name>aReader</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>InputSource</name>
                            </type>
                            <name>aSource</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>InputSource</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aReader</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>parser</name>.
                                            <name>parse</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aSource</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>SAXException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// this should never happen!</comment>
                                <comment type="line">// REVISIT: what to do with this?; should really not</comment>
                                <comment type="line">// eat it...</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>i</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ditto with above</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>aDocument</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>parser</name>.
                                            <name>getDocument</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>annotation</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>aDocument</name>.
                                            <name>getDocumentElement</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newElem</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>futureOwner</name>.
                                            <name>importNode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>annotation</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>target</name>.
                                    <name>insertBefore</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newElem</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>target</name>.
                                                    <name>getFirstChild</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
