<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\XSAttributeDecl.java">
    <comment type="block">/*
        * Copyright 2001-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>XSSimpleType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>ValidatedInfo</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The XML representation for an attribute declaration
        * schema component is an &lt;attribute&gt; element information item
        *
        * @xerces.internal
        *
        * @author Elena Litani, IBM
        * @author Sandy Gao, IBM
        * @version $Id: XSAttributeDecl.java,v 1.18 2004/12/07 18:11:27 sandygao Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XSAttributeDecl</name>
        <super>
            <implements>implements
                <name>XSAttributeDeclaration</name>
            </implements>
        </super>
        <block>{

            <comment type="line">// scopes</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SCOPE_ABSENT</name>        =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SCOPE_GLOBAL</name>        =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SCOPE_LOCAL</name>         =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// the name of the attribute</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fName</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// the target namespace of the attribute</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fTargetNamespace</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// the simple type of the attribute</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSSimpleType</name>
                    </type>
                    <name>fType</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// value constraint type: default, fixed or !specified</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fConstraintType</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// scope</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fScope</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>SCOPE_ABSENT</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// enclosing complex type, when the scope is local</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSComplexTypeDecl</name>
                    </type>
                    <name>fEnclosingCT</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// optional annotation</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSAnnotationImpl</name>
                    </type>
                    <name>fAnnotation</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// value constraint value</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>ValidatedInfo</name>
                    </type>
                    <name>fDefault</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>targetNamespace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSSimpleType</name>
                            </type>
                            <name>simpleType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>constraintType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>scope</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>valInfo</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSComplexTypeDecl</name>
                            </type>
                            <name>enclosingCT</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAnnotationImpl</name>
                            </type>
                            <name>annotation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fName</name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fTargetNamespace</name>
                            =
                            <name>targetNamespace</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fType</name>
                            =
                            <name>simpleType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fConstraintType</name>
                            =
                            <name>constraintType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fScope</name>
                            =
                            <name>scope</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDefault</name>
                            =
                            <name>valInfo</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEnclosingCT</name>
                            =
                            <name>enclosingCT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fAnnotation</name>
                            =
                            <name>annotation</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fName</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fTargetNamespace</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fType</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fConstraintType</name>
                            =
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fScope</name>
                            =
                            <name><name>XSConstants</name>.
                                <name>SCOPE_ABSENT</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDefault</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fAnnotation</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the type of the object, i.e ELEMENT_DECLARATION.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>ATTRIBUTE_DECLARATION</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The &lt;code&gt;name&lt;/code&gt; of this &lt;code&gt;XSObject&lt;/code&gt; depending on the
                * &lt;code&gt;XSObject&lt;/code&gt; type.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The namespace URI of this node, or &lt;code&gt;null&lt;/code&gt; if it is
                * unspecified. defines how a namespace URI is attached to schema
                * components.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNamespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fTargetNamespace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A simple type definition
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getTypeDefinition</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Optional. Either global or a complex type definition (
                * &lt;code&gt;ctDefinition&lt;/code&gt;). This property is absent in the case of
                * declarations within attribute group definitions: their scope will be
                * determined when they are used in the construction of complex type
                * definitions.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getScope</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fScope</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Locally scoped declarations are available for use only within the
                * complex type definition identified by the &lt;code&gt;scope&lt;/code&gt;
                * property.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSComplexTypeDefinition</name>
                </type>
                <name>getEnclosingCTDefinition</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fEnclosingCT</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Value constraint: one of default, fixed.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getConstraintType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fConstraintType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Value constraint: The actual value (with respect to the {type
                * definition}) Should we return Object instead of DOMString?
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getConstraintValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: SCAPI: what's the proper representation</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>getConstraintType</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                            ?
                            <name>null</name>
                            :
                            <call>
                                <name><name>fDefault</name>.
                                    <name>stringValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Optional. Annotation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSAnnotation</name>
                </type>
                <name>getAnnotation</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fAnnotation</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ValidatedInfo</name>
                </type>
                <name>getValInfo</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDefault</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * @see org.apache.xerces.xs.XSObject#getNamespaceItem()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSNamespaceItem</name>
                </type>
                <name>getNamespaceItem</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: implement</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getActualVC</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getConstraintType</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                            ?
                            <name>null</name>
                            :
                            <name><name>fDefault</name>.
                                <name>actualValue</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getActualVCType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getConstraintType</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                            ?
                            <name><name>XSConstants</name>.
                                <name>UNAVAILABLE_DT</name>
                            </name>
                            :
                            <name><name>fDefault</name>.
                                <name>actualValueType</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ShortList</name>
                </type>
                <name>getItemValueTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getConstraintType</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name><name>XSConstants</name>.
                                <name>VC_NONE</name>
                            </name>
                            ?
                            <name>null</name>
                            :
                            <name><name>fDefault</name>.
                                <name>itemValueTypes</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class XSAttributeDecl</comment>
</unit>
