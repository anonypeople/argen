<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\XSComplexTypeDecl.java">
    <comment type="block">/*
        * Copyright 2001-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>XSSimpleType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            models</name>.
            <name>XSCMValidator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            models</name>.
            <name>CMBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            util</name>.
            <name>XSObjectListImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.<name>xs</name>.
            <name>XSSimpleTypeDecl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>TypeInfo</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The XML representation for a complexType
        * schema component is a &lt;complexType&gt; element information item
        *
        * @xerces.internal
        *
        * @author Elena Litani, IBM
        * @author Sandy Gao, IBM
        * @version $Id: XSComplexTypeDecl.java,v 1.22 2005/06/13 20:43:27 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XSComplexTypeDecl</name>
        <super>
            <implements>implements <name>XSComplexTypeDefinition</name>,
                <name>TypeInfo</name>
            </implements>
        </super>
        <block>{

            <comment type="line">// name of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fName</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// target namespace of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fTargetNamespace</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// base type of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSTypeDefinition</name>
                    </type>
                    <name>fBaseType</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// derivation method of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fDerivedBy</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_RESTRICTION</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// final set of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fFinal</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_NONE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// block set (prohibited substitution) of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fBlock</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_NONE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// flags: whether is abstract; whether contains ID type;</comment>
            <comment type="line">// whether it's an anonymous tpye</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fMiscFlags</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// the attribute group that holds the attribute uses and attribute wildcard</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSAttributeGroupDecl</name>
                    </type>
                    <name>fAttrGrp</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// the content type of the complexType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>short</name>
                    </type>
                    <name>fContentType</name> =
                    <init>
                        <expr>
                            <name>CONTENTTYPE_EMPTY</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// if the content type is simple, then the corresponding simpleType</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSSimpleType</name>
                    </type>
                    <name>fXSSimpleType</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// if the content type is element or mixed, the particle</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSParticleDecl</name>
                    </type>
                    <name>fParticle</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// if there is a particle, the content model corresponding to that particle</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSCMValidator</name>
                    </type>
                    <name>fCMValidator</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// list of annotations affiliated with this type</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>XSObjectListImpl</name>
                    </type>
                    <name>fAnnotations</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// DOM Level 3 TypeInfo Derivation Method constants</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DERIVATION_ANY</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DERIVATION_RESTRICTION</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DERIVATION_EXTENSION</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DERIVATION_UNION</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DERIVATION_LIST</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>XSComplexTypeDecl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// do-nothing constructor for now.</comment>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>targetNamespace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>baseType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivedBy</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>schemaFinal</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>block</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>contentType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isAbstract</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeGroupDecl</name>
                            </type>
                            <name>attrGrp</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSSimpleType</name>
                            </type>
                            <name>simpleType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSParticleDecl</name>
                            </type>
                            <name>particle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSObjectListImpl</name>
                            </type>
                            <name>annotations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fTargetNamespace</name>
                            =
                            <name>targetNamespace</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseType</name>
                            =
                            <name>baseType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDerivedBy</name>
                            =
                            <name>derivedBy</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fFinal</name>
                            =
                            <name>schemaFinal</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBlock</name>
                            =
                            <name>block</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fContentType</name>
                            =
                            <name>contentType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>isAbstract</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fMiscFlags</name>
                                    |=
                                    <name>CT_IS_ABSTRACT</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fAttrGrp</name>
                            =
                            <name>attrGrp</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fXSSimpleType</name>
                            =
                            <name>simpleType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fParticle</name>
                            =
                            <name>particle</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fAnnotations</name>
                            =
                            <name>annotations</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fName</name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getTypeCategory</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>COMPLEX_TYPE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getFinalSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fFinal</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTargetNamespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fTargetNamespace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// flags for the misc flag</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CT_IS_ABSTRACT</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CT_HAS_TYPE_ID</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CT_IS_ANONYMOUS</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// methods to get/set misc flag</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsTypeID</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>fMiscFlags</name> &amp; <name>CT_HAS_TYPE_ID</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIsAbstractType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fMiscFlags</name>
                            |=
                            <name>CT_IS_ABSTRACT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setContainsTypeID</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fMiscFlags</name>
                            |=
                            <name>CT_HAS_TYPE_ID</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIsAnonymous</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fMiscFlags</name>
                            |=
                            <name>CT_IS_ANONYMOUS</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>XSCMValidator</name>
                </type>
                <name>getContentModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMBuilder</name>
                            </type>
                            <name>cmBuilder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCMValidator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fCMValidator</name>
                                    =
                                    <call>
                                        <name><name>cmBuilder</name>.
                                            <name>getContentModel</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>fCMValidator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// some utility methods:</comment>

            <comment type="line">// return the attribute group for this complex type</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSAttributeGroupDecl</name>
                </type>
                <name>getAttrGrp</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fAttrGrp</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>str</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>appendTypeInfo</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>appendTypeInfo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>
                                <name>contentType</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <block>{<expr>"EMPTY"</expr>, <expr>"SIMPLE"</expr>, <expr>"ELEMENT"</expr>, <expr>
                                        "MIXED"</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>
                                <name>derivedBy</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <block>{<expr>"EMPTY"</expr>, <expr>"EXTENSION"</expr>, <expr>"RESTRICTION"</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Complex type name='" + <name>fTargetNamespace</name> + "," +
                                            <call>
                                                <name>getTypeName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBaseType</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>" base type name='" +
                                                    <call>
                                                        <name><name>fBaseType</name>.
                                                            <name>getName</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + "', "
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" content type='" +
                                            <name>
                                                <name>contentType</name>
                                                <index>[
                                                    <expr>
                                                        <name>fContentType</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" isAbstract='" +
                                            <call>
                                                <name>getAbstract</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" hasTypeId='" +
                                            <call>
                                                <name>containsTypeID</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" final='" + <name>fFinal</name> + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" block='" + <name>fBlock</name> + "', "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fParticle</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>" particle='" +
                                                    <call>
                                                        <name><name>fParticle</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + "', "
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" derivedBy='" +
                                            <name>
                                                <name>derivedBy</name>
                                                <index>[
                                                    <expr>
                                                        <name>fDerivedBy</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            + "'. "
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>derivedFromType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>ancestor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// ancestor is null, retur false</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestor</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// ancestor is anyType, return true</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestor</name>
                                ==
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnyType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>true</expr>;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// recursively get base, and compare it with ancestor</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>type</name>
                                != <name>ancestor</name> &amp;&amp;
                                <comment type="line">// compare with ancestor</comment>
                                <name>type</name>
                                !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnySimpleType</name>
                                </name>
                                &amp;&amp;
                                <comment type="line">// reached anySimpleType</comment>
                                <name>type</name>
                                !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnyType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// reached anyType</comment>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    =
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>type</name>
                            ==
                            <name>ancestor</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>derivedFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorNS</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// ancestor is null, retur false</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestorName</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// ancestor is anyType, return true</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestorNS</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>ancestorNS</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>SchemaSymbols</name>.
                                                    <name>URI_SCHEMAFORSCHEMA</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>ancestorName</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>SchemaSymbols</name>.
                                                    <name>ATTVAL_ANYTYPE</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// recursively get base, and compare it with ancestor</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>!(
                                <call>
                                    <name><name>ancestorName</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>type</name>.
                                                        <name>getName</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp;
                                ((<name>ancestorNS</name> == <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>type</name>.
                                        <name>getNamespace</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == <name>null</name>) ||
                                (<name>ancestorNS</name> != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>ancestorNS</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>type</name>.
                                                        <name>getNamespace</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ))) &amp;&amp;
                                <comment type="line">// compare with ancestor</comment>
                                <name>type</name>
                                !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnySimpleType</name>
                                </name>
                                &amp;&amp;
                                <comment type="line">// reached anySimpleType</comment>
                                <name>type</name>
                                !=
                                <name><name>SchemaGrammar</name>.
                                    <name>fAnyType</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// reached anyType</comment>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    = (<name>XSTypeDefinition</name>)
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>type</name>
                            !=
                            <name><name>SchemaGrammar</name>.
                                <name>fAnySimpleType</name>
                            </name>
                            &amp;&amp;
                            <name>type</name>
                            !=
                            <name><name>SchemaGrammar</name>.
                                <name>fAnyType</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if a type is derived from another given the the name, namespace
                * and derivation method. See:
                * http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#TypeInfo-isDerivedFrom
                *
                * @param ancestorNS
                * The namspace of the ancestor type declaration
                * @param ancestorName
                * The name of the ancestor type declaration
                * @param derivation
                * The derivation method
                *
                * @return boolean True if the ancestor type is derived from the reference
                * type by the specifiied derivation method.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDOMDerivedFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorNS</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// ancestor is null, retur false</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestorName</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// ancestor is anyType, return true</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestorNS</name>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>ancestorNS</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>SchemaSymbols</name>.
                                                    <name>URI_SCHEMAFORSCHEMA</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>ancestorName</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>SchemaSymbols</name>.
                                                    <name>ATTVAL_ANYTYPE</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp; (<name>derivationMethod</name> ==
                                <name>DERIVATION_RESTRICTION</name>
                                &amp;&amp; <name>derivationMethod</name> == <name>DERIVATION_EXTENSION</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// restriction</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>derivationMethod</name> &amp; <name>DERIVATION_RESTRICTION</name>) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isDerivedByRestriction</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ancestorNS</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>ancestorName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>derivationMethod</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// extension</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>derivationMethod</name> &amp; <name>DERIVATION_EXTENSION</name>) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isDerivedByExtension</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ancestorNS</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>ancestorName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>derivationMethod</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// list or union</comment>
                    <if>if
                        <condition>(
                            <expr>(((<name>derivationMethod</name> &amp; <name>DERIVATION_LIST</name>) != 0) || ((<name>
                                derivationMethod
                            </name> &amp; <name>DERIVATION_UNION</name>) != 0))
                                &amp;&amp; ((<name>derivationMethod</name> &amp; <name>DERIVATION_RESTRICTION</name>) ==
                                0)
                                &amp;&amp; ((<name>derivationMethod</name> &amp; <name>DERIVATION_EXTENSION</name>) ==
                                0)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>ancestorNS</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>URI_SCHEMAFORSCHEMA</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>ancestorName</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_ANYTYPE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>ancestorName</name>
                                                    =
                                                    <name><name>SchemaSymbols</name>.
                                                        <name>ATTVAL_ANYSIMPLETYPE</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>!(
                                            <call>
                                                <name><name>fName</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_ANYTYPE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>fTargetNamespace</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>URI_SCHEMAFORSCHEMA</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>fBaseType</name>
                                                        != <name>null</name> &amp;&amp; <name>fBaseType</name>
                                                        <name>instanceof</name>
                                                        <name>XSSimpleTypeDecl</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{

                                                        <return>return
                                                            <expr>((<name>XSSimpleTypeDecl</name>) <name>
                                                                fBaseType</name>).
                                                                <call>
                                                                    <name>isDOMDerivedFrom</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ancestorNS</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ancestorName</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>derivationMethod</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>fBaseType</name>
                                                                !=
                                                                <name>null</name>
                                                                &amp;&amp; <name>fBaseType</name>
                                                                <name>instanceof</name>
                                                                <name>XSComplexTypeDecl</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>((<name>XSComplexTypeDecl</name>) <name>
                                                                        fBaseType</name>).
                                                                        <call>
                                                                            <name>isDOMDerivedFrom</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>ancestorNS</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>ancestorName</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>derivationMethod</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// If the value of the parameter is 0 i.e. no bit (corresponding to</comment>
                    <comment type="line">// restriction, list, extension or union) is set to 1 for the</comment>
                    <comment type="line">// derivationMethod parameter.</comment>
                    <if>if
                        <condition>(
                            <expr>((<name>derivationMethod</name>  &amp; <name>DERIVATION_EXTENSION</name>) == 0)
                                &amp;&amp; (((<name>derivationMethod</name> &amp; <name>DERIVATION_RESTRICTION</name>)
                                == 0)
                                &amp;&amp; ((<name>derivationMethod</name> &amp; <name>DERIVATION_LIST</name>) == 0)
                                &amp;&amp; ((<name>derivationMethod</name> &amp; <name>DERIVATION_UNION</name>) == 0))
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>isDerivedByAny</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ancestorNS</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ancestorName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>derivationMethod</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if a type is derived from another by any combination of
                * restriction, list ir union. See:
                * http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#TypeInfo-isDerivedFrom
                *
                * @param ancestorNS
                * The namspace of the ancestor type declaration
                * @param ancestorName
                * The name of the ancestor type declaration
                * @param derivationMethod
                * A short indication the method of derivation
                * @param type
                * The reference type definition
                *
                * @return boolean True if the type is derived by any method for the
                * reference type
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isDerivedByAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorNS</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>oldType</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>derivedFrom</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>type</name>
                                != <name>null</name> &amp;&amp; <name>type</name> !=
                                <name>oldType</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <comment type="line">// If the ancestor type is reached or is the same as this type.
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>ancestorName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        &amp;&amp; ((<name>ancestorNS</name> == <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>type</name>.
                                                <name>getNamespace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == <name>null</name>)
                                        || (<name>ancestorNS</name> != <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>ancestorNS</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getNamespace</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ))
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>derivedFrom</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// Check if this type is derived from the base by restriction or
                            </comment>
                            <comment type="line">// extension</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isDerivedByRestriction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ancestorNS</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ancestorName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>derivationMethod</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>type</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>isDerivedByExtension</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ancestorNS</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>ancestorName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>derivationMethod</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>type</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>oldType</name>
                                    =
                                    <name>type</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    =
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>derivedFrom</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if a type is derived from another by restriction. See:
                * http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#TypeInfo-isDerivedFrom
                *
                * @param ancestorNS
                * The namspace of the ancestor type declaration
                * @param ancestorName
                * The name of the ancestor type declaration
                * @param derivationMethod
                * A short indication the method of derivation *
                * @param type
                * The reference type definition
                *
                * @return boolean True if the type is derived by restriciton for the
                * reference type
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isDerivedByRestriction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorNS</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>oldType</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>type</name>
                                != <name>null</name> &amp;&amp; <name>type</name> !=
                                <name>oldType</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <comment type="line">// ancestor is anySimpleType, return false</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ancestorNS</name>
                                        !=
                                        <name>null</name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>ancestorNS</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>SchemaSymbols</name>.
                                                            <name>URI_SCHEMAFORSCHEMA</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>ancestorName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>SchemaSymbols</name>.
                                                            <name>ATTVAL_ANYSIMPLETYPE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// if the name and namespace of this type is the same as the</comment>
                            <comment type="line">// ancestor return true</comment>
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>ancestorName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        &amp;&amp; (<name>ancestorNS</name> != <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>ancestorNS</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getNamespace</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        || ((
                                        <call>
                                            <name><name>type</name>.
                                                <name>getNamespace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == <name>null</name> &amp;&amp; <name>ancestorNS</name> == <name>null</name>))
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{

                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// If the base type is a complexType with simpleContent</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        <name>instanceof</name>
                                        <name>XSSimpleTypeDecl</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>ancestorNS</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>SchemaSymbols</name>.
                                                                        <name>URI_SCHEMAFORSCHEMA</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>ancestorName</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>SchemaSymbols</name>.
                                                                        <name>ATTVAL_ANYTYPE</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ancestorName</name>
                                                            =
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_ANYSIMPLETYPE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>((<name>XSSimpleTypeDecl</name>) <name>type</name>).
                                                <call>
                                                    <name>isDOMDerivedFrom</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ancestorNS</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>ancestorName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>derivationMethod</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// If the base type is a complex type</comment>
                                        <comment type="line">// Every derivation step till the base type should be
                                        </comment>
                                        <comment type="line">// restriction. If not return false</comment>
                                        <if>if
                                            <condition>(
                                                <expr>((<name>XSComplexTypeDecl</name>) <name>type</name>).
                                                    <call>
                                                        <name>getDerivationMethod</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name><name>XSConstants</name>.
                                                        <name>DERIVATION_RESTRICTION</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>oldType</name>
                                    =
                                    <name>type</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    =
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                    </while>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if a type is derived from another by extension. See:
                * http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#TypeInfo-isDerivedFrom
                *
                * @param ancestorNS
                * The namspace of the ancestor type declaration
                * @param ancestorName
                * The name of the ancestor type declaration
                * @param derivationMethod
                * A short indication the method of derivation
                * @param type
                * The reference type definition
                *
                * @return boolean True if the type is derived by extension for the
                * reference type
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isDerivedByExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorNS</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ancestorName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>extension</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>oldType</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>type</name>
                                != <name>null</name> &amp;&amp; <name>type</name> !=
                                <name>oldType</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// If ancestor is anySimpleType return false.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ancestorNS</name>
                                        !=
                                        <name>null</name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>ancestorNS</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>SchemaSymbols</name>.
                                                            <name>URI_SCHEMAFORSCHEMA</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>ancestorName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>SchemaSymbols</name>.
                                                            <name>ATTVAL_ANYSIMPLETYPE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>SchemaSymbols</name>.<name>URI_SCHEMAFORSCHEMA</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getNamespace</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>SchemaSymbols</name>.<name>ATTVAL_ANYTYPE</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>ancestorName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        &amp;&amp; ((<name>ancestorNS</name> == <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>type</name>.
                                                <name>getNamespace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == <name>null</name>)
                                        || (<name>ancestorNS</name> != <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>ancestorNS</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>type</name>.
                                                                <name>getNamespace</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ))
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// returns true if atleast one derivation step was
                                            extension
                                        </comment>
                                        <return>return
                                            <expr>
                                                <name>extension</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// If the base type is a complexType with simpleContent</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        <name>instanceof</name>
                                        <name>XSSimpleTypeDecl</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>ancestorNS</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>SchemaSymbols</name>.
                                                                        <name>URI_SCHEMAFORSCHEMA</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>ancestorName</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>SchemaSymbols</name>.
                                                                        <name>ATTVAL_ANYTYPE</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ancestorName</name>
                                                            =
                                                            <name><name>SchemaSymbols</name>.
                                                                <name>ATTVAL_ANYSIMPLETYPE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// derivationMethod extension will always return false for
                                            a
                                        </comment>
                                        <comment type="line">// simpleType,</comment>
                                        <comment type="line">// we treat it like a restriction</comment>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>derivationMethod</name> &amp; <name>
                                                    DERIVATION_EXTENSION</name>) != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>extension</name>
                                                            &amp; ((<name>XSSimpleTypeDecl</name>) <name>type</name>).
                                                            <call>
                                                                <name>isDOMDerivedFrom</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ancestorNS</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ancestorName</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>(<name>derivationMethod
                                                                        </name> &amp; <name>
                                                                            DERIVATION_RESTRICTION</name>)
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>extension</name>
                                                            &amp; ((<name>XSSimpleTypeDecl</name>) <name>type</name>).
                                                            <call>
                                                                <name>isDOMDerivedFrom</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ancestorNS</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ancestorName</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>derivationMethod</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </else>
                                        </if>

                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// If the base type is a complex type</comment>
                                        <comment type="line">// At least one derivation step upto the ancestor type
                                            should be
                                        </comment>
                                        <comment type="line">// extension.</comment>
                                        <if>if
                                            <condition>(
                                                <expr>((<name>XSComplexTypeDecl</name>) <name>type</name>).
                                                    <call>
                                                        <name>getDerivationMethod</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>XSConstants</name>.
                                                        <name>DERIVATION_EXTENSION</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>extension</name>
                                                            = <name>extension</name> | true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>oldType</name>
                                    =
                                    <name>type</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>type</name>
                                    =
                                    <call>
                                        <name><name>type</name>.
                                            <name>getBaseType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fName</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fTargetNamespace</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseType</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDerivedBy</name>
                            =
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_RESTRICTION</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fFinal</name>
                            =
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_NONE</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBlock</name>
                            =
                            <name><name>XSConstants</name>.
                                <name>DERIVATION_NONE</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fMiscFlags</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// reset attribute group</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fAttrGrp</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fContentType</name>
                            =
                            <name>CONTENTTYPE_EMPTY</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fXSSimpleType</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fParticle</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCMValidator</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fAnnotations</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// help out the garbage collector</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fAnnotations</name>.
                                                <name>clear</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fAnnotations</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the type of the object, i.e ELEMENT_DECLARATION.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>TYPE_DEFINITION</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The &lt;code&gt;name&lt;/code&gt; of this &lt;code&gt;XSObject&lt;/code&gt; depending on the
                * &lt;code&gt;XSObject&lt;/code&gt; type.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getAnonymous</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>null</name> :
                            <name>fName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A boolean that specifies if the type definition is anonymous.
                * Convenience attribute. This is a field is not part of
                * XML Schema component model.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getAnonymous</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>fMiscFlags</name> &amp; <name>CT_IS_ANONYMOUS</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The namespace URI of this node, or &lt;code&gt;null&lt;/code&gt; if it is
                * unspecified. defines how a namespace URI is attached to schema
                * components.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNamespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fTargetNamespace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {base type definition} Either a simple type definition or a complex
                * type definition.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSTypeDefinition</name>
                </type>
                <name>getBaseType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fBaseType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {derivation method} Either extension or restriction. The valid constant
                * value for this &lt;code&gt;XSConstants&lt;/code&gt; EXTENTION, RESTRICTION.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getDerivationMethod</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDerivedBy</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {final} For complex type definition it is a subset of {extension,
                * restriction}. For simple type definition it is a subset of
                * {extension, list, restriction, union}.
                * @param derivation Extension, restriction, list, union constants
                * (defined in &lt;code&gt;XSConstants&lt;/code&gt;).
                * @return True if derivation is in the final set, otherwise false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFinal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>fFinal</name> &amp; <name>derivation</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {final} For complex type definition it is a subset of {extension, restriction}.
                *
                * @return A bit flag that represents:
                * {extension, restriction) or none for complexTypes;
                * {extension, list, restriction, union} or none for simpleTypes;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getFinal</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fFinal</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {abstract} A boolean. Complex types for which {abstract} is true must
                * not be used as the {type definition} for the validation of element
                * information items.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getAbstract</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>fMiscFlags</name> &amp; <name>CT_IS_ABSTRACT</name>) != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {attribute uses} A set of attribute uses.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getAttributeUses</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fAttrGrp</name>.
                                    <name>getAttributeUses</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {attribute wildcard} Optional. A wildcard.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSWildcard</name>
                </type>
                <name>getAttributeWildcard</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fAttrGrp</name>.
                                    <name>getAttributeWildcard</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {content type} One of empty, a simple type definition (see
                * &lt;code&gt;simpleType&lt;/code&gt;, or mixed, element-only (see
                * &lt;code&gt;cmParticle&lt;/code&gt;).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getContentType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fContentType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A simple type definition corresponding to simple content model,
                * otherwise &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getSimpleType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fXSSimpleType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A particle for mixed or element-only content model, otherwise
                * &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSParticle</name>
                </type>
                <name>getParticle</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fParticle</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {prohibited substitutions} A subset of {extension, restriction}.
                * @param prohibited extention or restriction constants (defined in
                * &lt;code&gt;XSConstants&lt;/code&gt;).
                * @return True if prohibited is a prohibited substitution, otherwise
                * false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isProhibitedSubstitution</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>prohibited</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>fBlock</name> &amp; <name>prohibited</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {prohibited substitutions}
                *
                * @return A bit flag corresponding to prohibited substitutions
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getProhibitedSubstitutions</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fBlock</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Optional. Annotation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getAnnotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fAnnotations</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @see org.apache.xerces.xs.XSObject#getNamespaceItem()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSNamespaceItem</name>
                </type>
                <name>getNamespaceItem</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: implement</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/* (non-Javadoc)
                * @see org.apache.xerces.xs.XSComplexTypeDefinition#getAttributeUse(java.lang.String, java.lang.String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSAttributeUse</name>
                </type>
                <name>getAttributeUse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fAttrGrp</name>.
                                    <name>getAttributeUse</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespace</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeNamespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNamespace</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDerivedFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>typeNamespaceArg</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>typeNameArg</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isDOMDerivedFrom</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>typeNamespaceArg</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>typeNameArg</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>derivationMethod</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class XSComplexTypeDecl</comment>
</unit>
