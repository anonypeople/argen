<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\XSComplexTypeDefinition.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This interface represents the Complex Type Definition schema component.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSComplexTypeDefinition</name>
        <super>
            <extends>extends
                <name>XSTypeDefinition</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// Content Model Types</comment>
            <comment type="javadoc">/**
                * Represents an empty content type. A content type with the distinguished
                * value empty validates elements with no character or element
                * information item children.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTTYPE_EMPTY</name>         =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Represents a simple content type. A content type which is simple
                * validates elements with character-only children.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTTYPE_SIMPLE</name>        =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Represents an element-only content type. An element-only content type
                * validates elements with children that conform to the supplied content
                * model.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTTYPE_ELEMENT</name>       =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Represents a mixed content type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CONTENTTYPE_MIXED</name>         =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * [derivation method]: either &lt;code&gt;DERIVATION_EXTENSION&lt;/code&gt;,
                * &lt;code&gt;DERIVATION_RESTRICTION&lt;/code&gt;, or &lt;code&gt;DERIVATION_NONE&lt;/code&gt;
                * (see &lt;code&gt;XSConstants&lt;/code&gt;).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getDerivationMethod</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [abstract]: a boolean. Complex types for which &lt;code&gt;abstract&lt;/code&gt; is
                * true must not be used as the type definition for the validation of
                * element information items.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getAbstract</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A set of attribute uses if it exists, otherwise an empty
                * &lt;code&gt;XSObjectList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getAttributeUses</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * An attribute wildcard if it exists, otherwise &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSWildcard</name>
                </type>
                <name>getAttributeWildcard</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [content type]: one of empty (&lt;code&gt;CONTENTTYPE_EMPTY&lt;/code&gt;), a simple
                * type definition (&lt;code&gt;CONTENTTYPE_SIMPLE&lt;/code&gt;), mixed (
                * &lt;code&gt;CONTENTTYPE_MIXED&lt;/code&gt;), or element-only (
                * &lt;code&gt;CONTENTTYPE_ELEMENT&lt;/code&gt;).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getContentType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A simple type definition corresponding to a simple content model,
                * otherwise &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getSimpleType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A particle for a mixed or element-only content model, otherwise
                * &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSParticle</name>
                </type>
                <name>getParticle</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [prohibited substitutions]: a subset of {extension, restriction}
                * @param restriction Extension or restriction constants (see
                * &lt;code&gt;XSConstants&lt;/code&gt;).
                * @return True if &lt;code&gt;restriction&lt;/code&gt; is a prohibited substitution,
                * otherwise false.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isProhibitedSubstitution</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>restriction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * [prohibited substitutions]: A subset of {extension, restriction} or
                * &lt;code&gt;DERIVATION_NONE&lt;/code&gt; represented as a bit flag (see
                * &lt;code&gt;XSConstants&lt;/code&gt;).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getProhibitedSubstitutions</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A set of [annotations] if it exists, otherwise an empty
                * &lt;code&gt;XSObjectList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getAnnotations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
