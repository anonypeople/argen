<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\datatypes\XSDecimal.java">
    <comment type="block">/*
        * Copyright 2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>datatypes</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigDecimal</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Interface to expose the value of 'decimal' and related datatypes.&lt;/p&gt;
        *
        * @author Naela Nissar, IBM
        *
        * @version $Id: XSDecimal.java,v 1.4 2005/05/15 20:38:40 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSDecimal</name>
        <block>{

            <comment type="javadoc">/**
                * @return the &lt;code&gt;BigDecimal&lt;/code&gt; representation of this object
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>BigDecimal</name>
                </type>
                <name>getBigDecimal</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * @return the &lt;code&gt;BigInteger&lt;/code&gt; representation of this object
                * @exception NumberFormatException if the value cannot be represented as a &lt;code&gt;BigInteger&lt;/code&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>BigInteger</name>
                </type>
                <name>getBigInteger</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return the long value representation of this object
                * @exception NumberFormatException if the value cannot be represented as a &lt;code&gt;long&lt;/code&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getLong</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return the int value representation of this object
                * @exception NumberFormatException if the value cannot be represented as a &lt;code&gt;int&lt;/code&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getInt</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return the short value representation of this object
                * @exception NumberFormatException if the value cannot be represented as a &lt;code&gt;short&lt;/code&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getShort</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return the byte value representation of this object
                * @exception NumberFormatException if the value cannot be represented as a &lt;code&gt;byte&lt;/code&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                </type>
                <name>getByte</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
