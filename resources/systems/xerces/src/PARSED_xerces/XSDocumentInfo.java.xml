<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\traversers\XSDocumentInfo.java">
    <comment type="block">/*
        * Copyright 1999-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>traversers</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Stack</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>validation</name>.
            <name>ValidationState</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>SchemaNamespaceSupport</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>SchemaSymbols</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>XMLSchemaException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.<name>
            util</name>.
            <name>XInt</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Element</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Objects of this class hold all information pecular to a
        * particular XML Schema document. This is needed because
        * namespace bindings and other settings on the &lt;schema/&gt; element
        * affect the contents of that schema document alone.
        *
        * @xerces.internal
        *
        * @author Neil Graham, IBM
        * @version $Id: XSDocumentInfo.java,v 1.21 2005/05/30 04:17:12 mrglavas Exp $
        */
    </comment>
    <class>class <name>XSDocumentInfo</name>
        <block>{

            <comment type="line">// Data</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>SchemaNamespaceSupport</name>
                    </type>
                    <name>fNamespaceSupport</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>SchemaNamespaceSupport</name>
                    </type>
                    <name>fNamespaceSupportRoot</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Stack</name>
                    </type>
                    <name>SchemaNamespaceSupportStack</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Stack</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// schema's attributeFormDefault</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fAreLocalAttributesQualified</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// elementFormDefault</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fAreLocalElementsQualified</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// [block | final]Default</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>fBlockDefault</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>fFinalDefault</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// targetNamespace</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>fTargetNamespace</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// represents whether this is a chameleon schema (i.e., whether its TNS is natural or
                comes from without)
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fIsChameleonSchema</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// the root of the schema Document tree itself</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Element</name>
                    </type>
                    <name>fSchemaElement</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// all namespaces that this document can refer to</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Vector</name>
                    </type>
                    <name>fImportedNS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Vector</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ValidationState</name>
                    </type>
                    <name>fValidationContext</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ValidationState</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>SymbolTable</name>
                    </type>
                    <name>fSymbolTable</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// attribute checker to which we'll return the attributes</comment>
            <comment type="line">// once we've been told that we're done with them</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSAttributeChecker</name>
                    </type>
                    <name>fAttrChecker</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// array of objects on the schema's root element. This is null</comment>
            <comment type="line">// once returnSchemaAttrs has been called.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Object</name>
                        <index>[]</index>
                    </type>
                    <name>fSchemaAttrs</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// list of annotations contained in the schema document. This is null</comment>
            <comment type="line">// once removeAnnotations has been called.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSAnnotationInfo</name>
                    </type>
                    <name>fAnnotations</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// note that the caller must ensure to call returnSchemaAttrs()</comment>
            <comment type="line">// to avoid memory leaks!</comment>
            <constructor>
                <name>XSDocumentInfo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>schemaRoot</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSAttributeChecker</name>
                            </type>
                            <name>attrChecker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLSchemaException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSchemaElement</name>
                            =
                            <name>schemaRoot</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNamespaceSupport</name>
                            = new
                            <call>
                                <name>SchemaNamespaceSupport</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fNamespaceSupport</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fIsChameleonSchema</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fSymbolTable</name>
                            =
                            <name>symbolTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fAttrChecker</name>
                            =
                            <name>attrChecker</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>schemaRoot</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Element</name>
                                        </type>
                                        <name>root</name> =
                                        <init>
                                            <expr>
                                                <name>schemaRoot</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fSchemaAttrs</name>
                                        =
                                        <call>
                                            <name><name>attrChecker</name>.
                                                <name>checkAttributes</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>root</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// schemaAttrs == null means it's not an &lt;xsd:schema&gt;
                                    element
                                </comment>
                                <comment type="line">// throw an exception, but we don't know the document systemId,
                                </comment>
                                <comment type="line">// so we leave that to the caller.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fSchemaAttrs</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>XMLSchemaException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>fAreLocalAttributesQualified</name>
                                        =
                                        ((<name>XInt</name>)
                                        <name>
                                            <name>fSchemaAttrs</name>
                                            <index>[
                                                <expr>
                                                    <name><name>XSAttributeChecker</name>.
                                                        <name>ATTIDX_AFORMDEFAULT</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ).
                                        <call>
                                            <name>intValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>SchemaSymbols</name>.
                                            <name>FORM_QUALIFIED</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fAreLocalElementsQualified</name>
                                        =
                                        ((<name>XInt</name>)
                                        <name>
                                            <name>fSchemaAttrs</name>
                                            <index>[
                                                <expr>
                                                    <name><name>XSAttributeChecker</name>.
                                                        <name>ATTIDX_EFORMDEFAULT</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ).
                                        <call>
                                            <name>intValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>SchemaSymbols</name>.
                                            <name>FORM_QUALIFIED</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fBlockDefault</name>
                                        =
                                        ((<name>XInt</name>)
                                        <name>
                                            <name>fSchemaAttrs</name>
                                            <index>[
                                                <expr>
                                                    <name><name>XSAttributeChecker</name>.
                                                        <name>ATTIDX_BLOCKDEFAULT</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ).
                                        <call>
                                            <name>shortValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fFinalDefault</name>
                                        =
                                        ((<name>XInt</name>)
                                        <name>
                                            <name>fSchemaAttrs</name>
                                            <index>[
                                                <expr>
                                                    <name><name>XSAttributeChecker</name>.
                                                        <name>ATTIDX_FINALDEFAULT</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ).
                                        <call>
                                            <name>shortValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fTargetNamespace</name>
                                        =
                                        (<name>String</name>)
                                        <name>
                                            <name>fSchemaAttrs</name>
                                            <index>[
                                                <expr>
                                                    <name><name>XSAttributeChecker</name>.
                                                        <name>ATTIDX_TARGETNAMESPACE</name>
                                                    </name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fTargetNamespace</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>fTargetNamespace</name>
                                                =
                                                <call>
                                                    <name><name>symbolTable</name>.
                                                        <name>addSymbol</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fTargetNamespace</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>fNamespaceSupportRoot</name>
                                        = new
                                        <call>
                                            <name>SchemaNamespaceSupport</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNamespaceSupport</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">//set namespace support</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fValidationContext</name>.
                                                <name>setNamespaceSupport</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNamespaceSupport</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fValidationContext</name>.
                                                <name>setSymbolTable</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>symbolTable</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// pass null as the schema document, so that the namespace
                                </comment>
                                <comment type="line">// context is not popped.</comment>

                                <comment type="line">// don't return the attribute array yet!</comment>
                                <comment type="line">//attrChecker.returnAttrArray(schemaAttrs, null);</comment>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="line">// backup the current ns support, and use the one passed-in.</comment>
            <comment type="line">// if no ns support is passed-in, use the one for &lt;schema&gt; element</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>backupNSSupport</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SchemaNamespaceSupport</name>
                            </type>
                            <name>nsSupport</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SchemaNamespaceSupportStack</name>.
                                    <name>push</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNamespaceSupport</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>nsSupport</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>nsSupport</name>
                                    =
                                    <name>fNamespaceSupportRoot</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fNamespaceSupport</name>
                            = new
                            <call>
                                <name>SchemaNamespaceSupport</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nsSupport</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationContext</name>.
                                    <name>setNamespaceSupport</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNamespaceSupport</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>restoreNSSupport</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fNamespaceSupport</name>
                            = (<name>SchemaNamespaceSupport</name>)
                            <call>
                                <name><name>SchemaNamespaceSupportStack</name>.
                                    <name>pop</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fValidationContext</name>.
                                    <name>setNamespaceSupport</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNamespaceSupport</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// some Object methods</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fTargetNamespace</name>
                            == <name>null</name>?"no targetNamspace":"targetNamespace is " +
                            <name>fTargetNamespace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addAllowedNS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fImportedNS</name>.
                                    <name>addElement</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespace</name>
                                            == <name>null</name> ? "" :
                                            <name>namespace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isAllowedNS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fImportedNS</name>.
                                    <name>contains</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespace</name>
                                            == <name>null</name> ? "" :
                                            <name>namespace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// store whether we have reported an error about that this document</comment>
            <comment type="line">// can't access components from the given namespace</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Vector</name>
                    </type>
                    <name>fReportedTNS</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// check whether we need to report an error against the given uri.</comment>
            <comment type="line">// if we have reported an error, then we don't need to report again;</comment>
            <comment type="line">// otherwise we reported the error, and remember this fact.</comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>needReportTNSError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fReportedTNS</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fReportedTNS</name>
                                    = new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>fReportedTNS</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>uri</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fReportedTNS</name>.
                                    <name>addElement</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>uri</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// return the attributes on the schema element itself:</comment>
            <function>
                <type>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>getSchemaAttrs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSchemaAttrs</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// deallocate the storage set aside for the schema element's</comment>
            <comment type="line">// attributes</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>returnSchemaAttrs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fAttrChecker</name>.
                                    <name>returnAttrArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fSchemaAttrs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSchemaAttrs</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// adds an annotation to the list of annotations</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>addAnnotation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSAnnotationInfo</name>
                            </type>
                            <name>info</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>info</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>fAnnotations</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fAnnotations</name>
                            =
                            <name>info</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// returns the list of annotations conatined in the</comment>
            <comment type="line">// schema document or null if the document contained no annotations.</comment>
            <function>
                <type>
                    <name>XSAnnotationInfo</name>
                </type>
                <name>getAnnotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fAnnotations</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// removes reference to annotation list</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>removeAnnotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fAnnotations</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// XSDocumentInfo</comment>
</unit>
