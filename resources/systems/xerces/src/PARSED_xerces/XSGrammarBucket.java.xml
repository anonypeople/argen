<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xs\XSGrammarBucket.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A class used to hold the internal schema grammar set for the current instance
        *
        * @xerces.internal
        *
        * @author Sandy Gao, IBM
        * @version $Id: XSGrammarBucket.java,v 1.10 2004/10/06 15:14:55 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XSGrammarBucket</name>
        <block>{

            <comment type="line">// Data</comment>

            <comment type="javadoc">/**
                * Hashtable that maps between Namespace and a Grammar
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Hashtable</name>
                    </type>
                    <name>fGrammarRegistry</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Hashtable</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>SchemaGrammar</name>
                    </type>
                    <name>fNoNSGrammar</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Get the schema grammar for the specified namespace
                *
                * @param namespace
                * @return SchemaGrammar associated with the namespace
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>SchemaGrammar</name>
                </type>
                <name>getGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>namespace</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>fNoNSGrammar</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>SchemaGrammar</name>)
                            <call>
                                <name><name>fGrammarRegistry</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Put a schema grammar into the registry
                * This method is for internal use only: it assumes that a grammar with
                * the same target namespace is not already in the bucket.
                *
                * @param grammar the grammar to put in the registry
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>grammar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>grammar</name>.
                                        <name>getTargetNamespace</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>fNoNSGrammar</name>
                                    =
                                    <name>grammar</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fGrammarRegistry</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>grammar</name>.
                                                            <name>getTargetNamespace</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>grammar</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * put a schema grammar and any grammars imported by it (directly or
                * inderectly) into the registry. when a grammar with the same target
                * namespace is already in the bucket, and different from the one being
                * added, it's an error, and no grammar will be added into the bucket.
                *
                * @param grammar the grammar to put in the registry
                * @param deep whether to add imported grammars
                * @return whether the process succeeded
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>putGrammar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>grammar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// whether there is one with the same tns</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>sg</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getGrammar</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>grammar</name>.
                                                        <name>fTargetNamespace</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sg</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// if the one we have is different from the one passed, it's an
                                    error
                                </comment>
                                <return>return
                                    <expr>
                                        <name>sg</name>
                                        ==
                                        <name>grammar</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// not deep import, then just add this one grammar</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>deep</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>putGrammar</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>grammar</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get all imported grammars, and make a copy of the Vector, so that</comment>
                    <comment type="line">// we can recursively process the grammars, and add distinct ones</comment>
                    <comment type="line">// to the same vector</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>currGrammars</name> =
                            <init>
                                <expr>(<name>Vector</name>)
                                    <call>
                                        <name><name>grammar</name>.
                                            <name>getImportedGrammars</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>currGrammars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>putGrammar</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>grammar</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>grammars</name> =
                            <init>
                                <expr>((<name>Vector</name>)
                                    <call>
                                        <name><name>currGrammars</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>sg1</name>,
                            <name>sg2</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>gs</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// for all (recursively) imported grammars</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>grammars</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <comment type="line">// get the grammar</comment>
                            <expr_stmt>
                                <expr>
                                    <name>sg1</name>
                                    = (<name>SchemaGrammar</name>)
                                    <call>
                                        <name><name>grammars</name>.
                                            <name>elementAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// check whether the bucket has one with the same tns</comment>
                            <expr_stmt>
                                <expr>
                                    <name>sg2</name>
                                    =
                                    <call>
                                        <name>getGrammar</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>sg1</name>.
                                                        <name>fTargetNamespace</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>sg2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// we need to add grammars imported by sg1 too</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>gs</name>
                                                =
                                                <call>
                                                    <name><name>sg1</name>.
                                                        <name>getImportedGrammars</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// for all grammars imported by sg2, but not in the
                                            vector
                                        </comment>
                                        <comment type="line">// we add them to the vector</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>gs</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <continue>continue;</continue>
                                            </then>
                                        </if>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>j</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>gs</name>.
                                                                    <name>size</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            - 1
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>j</name>
                                                    &gt;= 0
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>j</name>--
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>sg2</name>
                                                        = (<name>SchemaGrammar</name>)
                                                        <call>
                                                            <name><name>gs</name>.
                                                                <name>elementAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name><name>grammars</name>.
                                                                    <name>contains</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>sg2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>grammars</name>.
                                                                        <name>addElement</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>sg2</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// we found one with the same target namespace</comment>
                                <comment type="line">// if the two grammars are not the same object, then it's an
                                    error
                                </comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>sg2</name>
                                                !=
                                                <name>sg1</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// now we have all imported grammars stored in the vector. add them</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>putGrammar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>grammar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>grammars</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name>putGrammar</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>SchemaGrammar</name>)
                                                <call>
                                                    <name><name>grammars</name>.
                                                        <name>elementAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                    </for>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * get all grammars in the registry
                *
                * @return an array of SchemaGrammars.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>SchemaGrammar</name>
                    <index>[]</index>
                </type>
                <name>getGrammars</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// get the number of grammars</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fGrammarRegistry</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + (<name>fNoNSGrammar</name>==<name>null</name> ? 0 : 1)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                                <index>[]</index>
                            </type>
                            <name>grammars</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>SchemaGrammar</name>
                                        <index>[
                                            <expr>
                                                <name>count</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// get grammars with target namespace</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Enumeration</name>
                            </type>
                            <name>schemas</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fGrammarRegistry</name>.
                                            <name>elements</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>schemas</name>.
                                        <name>hasMoreElements</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>grammars</name>
                                    <index>[
                                        <expr><name>i</name>++
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = (<name>SchemaGrammar</name>)
                                <call>
                                    <name><name>schemas</name>.
                                        <name>nextElement</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                    </while>
                    <comment type="line">// add the grammar without target namespace, if any</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNoNSGrammar</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>grammars</name>
                                        <index>[
                                            <expr><name>count</name>-1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>fNoNSGrammar</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>grammars</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clear the registry.
                * REVISIT: update to use another XSGrammarBucket
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fNoNSGrammar</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fGrammarRegistry</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class XSGrammarBucket</comment>
</unit>
