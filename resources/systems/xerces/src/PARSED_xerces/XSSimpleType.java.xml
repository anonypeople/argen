<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\XSSimpleType.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>dv</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>XSSimpleTypeDefinition</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This interface &lt;code&gt;XSSimpleType&lt;/code&gt; represents the simple type
        * definition of schema component and defines methods to query the information
        * contained.
        * Any simple type (atomic, list or union) will implement this interface.
        * It inherits from &lt;code&gt;XSTypeDecl&lt;/code&gt;.
        *
        * @xerces.internal
        *
        * @author Sandy Gao, IBM
        *
        * @version $Id: XSSimpleType.java,v 1.17 2004/10/06 14:56:50 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSSimpleType</name>
        <super>
            <extends>extends
                <name>XSSimpleTypeDefinition</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * constants defined for the values of 'whitespace' facet.
                * see &lt;a href='http://www.w3.org/TR/xmlschema-2/#dt-whiteSpace'&gt; XML Schema
                * Part 2: Datatypes &lt;/a&gt;
                */
            </comment>
            <comment type="javadoc">/** preserve the white spaces */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>WS_PRESERVE</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** replace the white spaces */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>WS_REPLACE</name>  =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** collapse the white spaces */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>WS_COLLAPSE</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constant defined for the primitive built-in simple tpyes.
                * see &lt;a href='http://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes'&gt;
                * XML Schema Part 2: Datatypes &lt;/a&gt;
                */
            </comment>
            <comment type="javadoc">/** "string" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_STRING</name>        =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "boolean" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_BOOLEAN</name>       =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "decimal" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_DECIMAL</name>       =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "float" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_FLOAT</name>         =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "double" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_DOUBLE</name>        =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "duration" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_DURATION</name>      =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "dataTime" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_DATETIME</name>      =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "time" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_TIME</name>          =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "date" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_DATE</name>          =
                    <init>
                        <expr>9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "gYearMonth" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_GYEARMONTH</name>    =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "gYear" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_GYEAR</name>         =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "gMonthDay" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_GMONTHDAY</name>     =
                    <init>
                        <expr>12</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "gDay" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_GDAY</name>          =
                    <init>
                        <expr>13</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "gMonth" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_GMONTH</name>        =
                    <init>
                        <expr>14</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "hexBinary" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_HEXBINARY</name>     =
                    <init>
                        <expr>15</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "base64Binary" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_BASE64BINARY</name>  =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "anyURI" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_ANYURI</name>        =
                    <init>
                        <expr>17</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "QName" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_QNAME</name>         =
                    <init>
                        <expr>18</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "precisionDecimal" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_PRECISIONDECIMAL</name> =
                    <init>
                        <expr>19</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** "NOTATION" type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PRIMITIVE_NOTATION</name>      =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * return an ID representing the built-in primitive base type.
                * REVISIT: This method is (currently) for internal use only.
                * the constants returned from this method are not finalized yet.
                * the names and values might change in the further.
                *
                * @return an ID representing the built-in primitive base type
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getPrimitiveKind</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * validate a given string against this simple type.
                *
                * @param content the string value that needs to be validated
                * @param context the validation context
                * @param validatedInfo used to store validation result
                *
                * @return the actual value (QName, Boolean) of the string value
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>validate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>validatedInfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeValueException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * validate a given string value, represented by content.toString().
                * note that if content is a StringBuffer, for performance reasons,
                * it's possible that the content of the string buffer is modified.
                *
                * @param content the string value that needs to be validated
                * @param context the validation context
                * @param validatedInfo used to store validation result
                *
                * @return the actual value (QName, Boolean) of the string value
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>validate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>content</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>validatedInfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeValueException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Validate an actual value against this simple type.
                *
                * @param context the validation context
                * @param validatedInfo used to provide the actual value and member types
                * @exception InvalidDatatypeValueException exception for invalid values.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>validate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidatedInfo</name>
                            </type>
                            <name>validatedInfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeValueException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If this type is created from restriction, then some facets can be applied
                * to the simple type. &lt;code&gt;XSFacets&lt;/code&gt; is used to pass the value of
                * different facets.
                *
                * @param facets the value of all the facets
                * @param presentFacet bit combination value of the costraining facet
                * constants which are present.
                * @param fixedFacet bit combination value of the costraining facet
                * constants which are fixed.
                * @param context the validation context
                * @exception InvalidDatatypeFacetException exception for invalid facet values.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>applyFacets</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSFacets</name>
                            </type>
                            <name>facets</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>presentFacet</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>fixedFacet</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeFacetException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Check whether two actual values are equal.
                *
                * @param value1 the first value
                * @param value2 the second value
                * @return true if the two value are equal
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEqual</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Check the order of the two actual values. (May not be supported by all
                * simple types.
                * REVISIT: Andy believes that a compare() method is necessary.
                * I don't see the necessity for schema (the only place where we
                * need to compare two values is to check min/maxIn/Exclusive
                * facets, but we only need a private method for this case.)
                * But Andy thinks XPATH potentially needs this compare() method.
                *
                * @param value1 the first value
                * @prarm value2 the second value
                * @return &gt; 0 if value1 &gt; value2
                * = 0 if value1 == value2
                * &lt; = if value1 &lt; value2
                */
            </comment>
            <comment type="line">//public short compare(Object value1, Object value2);</comment>

            <comment type="javadoc">/**
                * Check whether this type is or is derived from ID.
                * REVISIT: this method makes ID special, which is not a good design.
                * but since ID is not a primitive, there doesn't seem to be a
                * clean way of doing it except to define special method like this.
                *
                * @return whether this simple type is or is derived from ID.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isIDType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Return the whitespace corresponding to this datatype.
                *
                * @return valid values are WS_PRESERVE, WS_REPLACE, WS_COLLAPSE.
                * @exception DatatypeException
                * union datatypes don't have whitespace facet associated with them
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getWhitespace</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DatatypeException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
