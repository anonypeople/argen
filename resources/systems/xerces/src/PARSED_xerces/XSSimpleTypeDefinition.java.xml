<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\XSSimpleTypeDefinition.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This interface represents the Simple Type Definition schema component. This
        * interface provides several query operations for facet components. Users
        * can either retrieve the defined facets as XML Schema components, using
        * the &lt;code&gt;facets&lt;/code&gt; and the &lt;code&gt;multiValueFacets&lt;/code&gt; attributes;
        * or users can separately query a facet's properties using methods such as
        * &lt;code&gt;getLexicalFacetValue&lt;/code&gt;, &lt;code&gt;isFixedFacet&lt;/code&gt;, etc.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSSimpleTypeDefinition</name>
        <super>
            <extends>extends
                <name>XSTypeDefinition</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// Variety definitions</comment>
            <comment type="javadoc">/**
                * The variety is absent for the anySimpleType definition.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VARIETY_ABSENT</name>            =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Atomic&lt;/code&gt; type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VARIETY_ATOMIC</name>            =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;List&lt;/code&gt; type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VARIETY_LIST</name>              =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Union&lt;/code&gt; type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VARIETY_UNION</name>             =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Facets</comment>
            <comment type="javadoc">/**
                * No facets defined.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_NONE</name>                =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.1 Length
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_LENGTH</name>              =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.2 minLength.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MINLENGTH</name>           =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.3 maxLength.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MAXLENGTH</name>           =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.4 pattern.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_PATTERN</name>             =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.5 whitespace.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_WHITESPACE</name>          =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.7 maxInclusive.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MAXINCLUSIVE</name>        =
                    <init>
                        <expr>32</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.9 maxExclusive.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MAXEXCLUSIVE</name>        =
                    <init>
                        <expr>64</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.9 minExclusive.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MINEXCLUSIVE</name>        =
                    <init>
                        <expr>128</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.10 minInclusive.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_MININCLUSIVE</name>        =
                    <init>
                        <expr>256</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.11 totalDigits .
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_TOTALDIGITS</name>         =
                    <init>
                        <expr>512</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.12 fractionDigits.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_FRACTIONDIGITS</name>      =
                    <init>
                        <expr>1024</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * 4.3.5 enumeration.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FACET_ENUMERATION</name>         =
                    <init>
                        <expr>2048</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A constant defined for the 'ordered' fundamental facet: not ordered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ORDERED_FALSE</name>             =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * A constant defined for the 'ordered' fundamental facet: partially
                * ordered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ORDERED_PARTIAL</name>           =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * A constant defined for the 'ordered' fundamental facet: total ordered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ORDERED_TOTAL</name>             =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * [variety]: one of {atomic, list, union} or absent.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getVariety</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If variety is &lt;code&gt;atomic&lt;/code&gt; the primitive type definition (a
                * built-in primitive datatype definition or the simple ur-type
                * definition) is available, otherwise &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getPrimitiveType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the closest built-in type category this type represents or
                * derived from. For example, if this simple type is a built-in derived
                * type integer the &lt;code&gt;INTEGER_DV&lt;/code&gt; is returned.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getBuiltInKind</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If variety is &lt;code&gt;list&lt;/code&gt; the item type definition (an atomic or
                * union simple type definition) is available, otherwise
                * &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getItemType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If variety is &lt;code&gt;union&lt;/code&gt; the list of member type definitions (a
                * non-empty sequence of simple type definitions) is available,
                * otherwise an empty &lt;code&gt;XSObjectList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getMemberTypes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [facets]: all facets defined on this type. The value is a bit
                * combination of FACET_XXX constants of all defined facets.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getDefinedFacets</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience method. [Facets]: check whether a facet is defined on this
                * type.
                * @param facetName The name of the facet.
                * @return True if the facet is defined, false otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDefinedFacet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>facetName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * [facets]: all defined facets for this type which are fixed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getFixedFacets</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience method. [Facets]: check whether a facet is defined and
                * fixed on this type.
                * @param facetName The name of the facet.
                * @return True if the facet is fixed, false otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFixedFacet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>facetName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience method. Returns a value of a single constraining facet for
                * this simple type definition. This method must not be used to retrieve
                * values for &lt;code&gt;enumeration&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt; facets.
                * @param facetName The name of the facet, i.e.
                * &lt;code&gt;FACET_LENGTH, FACET_TOTALDIGITS&lt;/code&gt;.
                * To retrieve the value for a pattern or
                * an enumeration, see &lt;code&gt;enumeration&lt;/code&gt; and
                * &lt;code&gt;pattern&lt;/code&gt;.
                * @return A value of the facet specified in &lt;code&gt;facetName&lt;/code&gt; for
                * this simple type definition or &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getLexicalFacetValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>facetName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * A list of enumeration values if it exists, otherwise an empty
                * &lt;code&gt;StringList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>StringList</name>
                </type>
                <name>getLexicalEnumeration</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A list of pattern values if it exists, otherwise an empty
                * &lt;code&gt;StringList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>StringList</name>
                </type>
                <name>getLexicalPattern</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Fundamental Facet: ordered.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getOrdered</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Fundamental Facet: cardinality.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getFinite</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Fundamental Facet: bounded.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getBounded</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Fundamental Facet: numeric.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getNumeric</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A list of constraining facets if it exists, otherwise an empty
                * &lt;code&gt;XSObjectList&lt;/code&gt;. Note: This method must not be used to
                * retrieve values for &lt;code&gt;enumeration&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt;
                * facets.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getFacets</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A list of enumeration and pattern constraining facets if it exists,
                * otherwise an empty &lt;code&gt;XSObjectList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getMultiValueFacets</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [annotations]: a set of annotations for this simple type component if
                * it exists, otherwise an empty &lt;code&gt;XSObjectList&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSObjectList</name>
                </type>
                <name>getAnnotations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
