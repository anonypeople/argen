<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\XSTypeDefinition.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This interface represents a complex or simple type definition.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSTypeDefinition</name>
        <super>
            <extends>extends
                <name>XSObject</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * The object describes a complex type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>COMPLEX_TYPE</name>              =
                    <init>
                        <expr>15</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The object describes a simple type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>SIMPLE_TYPE</name>               =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Return whether this type definition is a simple type or complex type.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getTypeCategory</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {base type definition}: either a simple type definition or a complex
                * type definition.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSTypeDefinition</name>
                </type>
                <name>getBaseType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {final}. For a complex type definition it is a subset of {extension,
                * restriction}. For a simple type definition it is a subset of
                * {extension, list, restriction, union}.
                * @param restriction Extension, restriction, list, union constants
                * (defined in &lt;code&gt;XSConstants&lt;/code&gt;).
                * @return True if &lt;code&gt;restriction&lt;/code&gt; is in the final set,
                * otherwise false.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFinal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>restriction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * For complex types the returned value is a bit combination of the subset
                * of {&lt;code&gt;DERIVATION_EXTENSION, DERIVATION_RESTRICTION&lt;/code&gt;}
                * corresponding to &lt;code&gt;final&lt;/code&gt; set of this type or
                * &lt;code&gt;DERIVATION_NONE&lt;/code&gt;. For simple types the returned value is
                * a bit combination of the subset of {
                * &lt;code&gt;DERIVATION_RESTRICTION, DERIVATION_EXTENSION, DERIVATION_UNION, DERIVATION_LIST&lt;/code&gt;
                * } corresponding to &lt;code&gt;final&lt;/code&gt; set of this type or
                * &lt;code&gt;DERIVATION_NONE&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getFinal</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience attribute. A boolean that specifies if the type definition
                * is anonymous.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getAnonymous</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience method which checks if this type is derived from the given
                * &lt;code&gt;ancestorType&lt;/code&gt;.
                * @param ancestorType An ancestor type definition.
                * @param derivationMethod A bit combination representing a subset of {
                * &lt;code&gt;DERIVATION_RESTRICTION, DERIVATION_EXTENSION, DERIVATION_UNION, DERIVATION_LIST&lt;/code&gt;
                * }.
                * @return True if this type is derived from &lt;code&gt;ancestorType&lt;/code&gt;
                * using only derivation methods from the &lt;code&gt;derivationMethod&lt;/code&gt;
                * .
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>derivedFromType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XSTypeDefinition</name>
                            </type>
                            <name>ancestorType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Convenience method which checks if this type is derived from the given
                * ancestor type.
                * @param namespace An ancestor type namespace.
                * @param name An ancestor type name.
                * @param derivationMethod A bit combination representing a subset of {
                * &lt;code&gt;DERIVATION_RESTRICTION, DERIVATION_EXTENSION, DERIVATION_UNION, DERIVATION_LIST&lt;/code&gt;
                * }.
                * @return True if this type is derived from &lt;code&gt;ancestorType&lt;/code&gt;
                * using only derivation methods from the &lt;code&gt;derivationMethod&lt;/code&gt;
                * .
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>derivedFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>derivationMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
