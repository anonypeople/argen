<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\XSWildcard.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This interface represents the Wildcard schema component.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>XSWildcard</name>
        <super>
            <extends>extends
                <name>XSTerm</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// Namespace Constraint</comment>
            <comment type="javadoc">/**
                * Namespace Constraint: any namespace is allowed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>NSCONSTRAINT_ANY</name>          =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Namespace Constraint: namespaces in the list are not allowed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>NSCONSTRAINT_NOT</name>          =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Namespace Constraint: namespaces in the list are allowed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>NSCONSTRAINT_LIST</name>         =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Process contents</comment>
            <comment type="javadoc">/**
                * There must be a top-level declaration for the item available, or the
                * item must have an xsi:type, and the item must be valid as appropriate.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PC_STRICT</name>                 =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * No constraints at all: the item must simply be well-formed XML.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PC_SKIP</name>                   =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * If the item, or any items among its [children] is an element
                * information item, has a uniquely determined declaration available, it
                * must be valid with respect to that definition, that is, validate
                * where you can and do not worry when you cannot.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PC_LAX</name>                    =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Namespace constraint: A constraint type: any, not, list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getConstraintType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Namespace constraint: For &lt;code&gt;constraintType&lt;/code&gt;
                * &lt;code&gt;NSCONSTRAINT_LIST&lt;/code&gt;, the list contains allowed namespaces.
                * For &lt;code&gt;constraintType&lt;/code&gt; &lt;code&gt;NSCONSTRAINT_NOT&lt;/code&gt;, the
                * list contains disallowed namespaces. For &lt;code&gt;constraintType&lt;/code&gt;
                * &lt;code&gt;NSCONSTRAINT_ANY&lt;/code&gt;, the &lt;code&gt;StringList&lt;/code&gt; is empty.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>StringList</name>
                </type>
                <name>getNsConstraintList</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * [process contents]: one of skip, lax or strict. Valid constants values
                * are: &lt;code&gt;PC_LAX&lt;/code&gt;, &lt;code&gt;PC_SKIP&lt;/code&gt; and
                * &lt;code&gt;PC_STRICT&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getProcessContents</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * An [annotation] if it exists, otherwise &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSAnnotation</name>
                </type>
                <name>getAnnotation</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
