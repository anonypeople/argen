object Tester {

def main(args: Array[String]): Unit = {
    val map1 = (1 to 100) map {i ⇒ i.toString -> i * 3L } toMap
val map2 = map1 map (x ⇒ x._1 → (x._2 / 2))
val map3 = map2 map (x ⇒ x._1 → (x._2 * 7))

val result = compare(List(map1, map2, map3), Map.empty)

println(map1)
println(map2)
println(map3)

println(result)

val summary = result map {
case (key, value) ⇒
key -> s"${map1(key)} , ${map2(key)} , ${map3(key)}, [$value]"
}

println("\n\n")
summary foreach println
}

def compare(toCompare: List[Map[String, Long]],
result: Map[String, Long]): Map[String, Long] = {
toCompare match {
case Nil ⇒
result
case head :: tail ⇒
val filterHead = head collect {
case (key, value) if result.get(key).fold(true) { _ < value } ⇒
(key, value)
}
compare(tail, result ++ filterHead)
}
}

}